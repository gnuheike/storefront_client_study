<?php
/**
 * PopupInstructionTwoLetterLocale
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PopupInstructionTwoLetterLocale Class Doc Comment
 *
 * @category Class
 * @description Object with localizations for instruction of a clan reward chain tooltip popup window. Two-letter lowercase [language code](https://developers.xsolla.com/doc/pay-station/features/localization/).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PopupInstructionTwoLetterLocale implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'popup_instruction-two-letter-locale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'en' => 'string',
        'ar' => 'string',
        'bg' => 'string',
        'cn' => 'string',
        'cs' => 'string',
        'de' => 'string',
        'es' => 'string',
        'fr' => 'string',
        'he' => 'string',
        'it' => 'string',
        'ja' => 'string',
        'ko' => 'string',
        'pl' => 'string',
        'pt' => 'string',
        'ro' => 'string',
        'ru' => 'string',
        'th' => 'string',
        'tr' => 'string',
        'tw' => 'string',
        'vi' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'en' => null,
        'ar' => null,
        'bg' => null,
        'cn' => null,
        'cs' => null,
        'de' => null,
        'es' => null,
        'fr' => null,
        'he' => null,
        'it' => null,
        'ja' => null,
        'ko' => null,
        'pl' => null,
        'pt' => null,
        'ro' => null,
        'ru' => null,
        'th' => null,
        'tr' => null,
        'tw' => null,
        'vi' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'en' => true,
        'ar' => true,
        'bg' => true,
        'cn' => true,
        'cs' => true,
        'de' => true,
        'es' => true,
        'fr' => true,
        'he' => true,
        'it' => true,
        'ja' => true,
        'ko' => true,
        'pl' => true,
        'pt' => true,
        'ro' => true,
        'ru' => true,
        'th' => true,
        'tr' => true,
        'tw' => true,
        'vi' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'en' => 'en',
        'ar' => 'ar',
        'bg' => 'bg',
        'cn' => 'cn',
        'cs' => 'cs',
        'de' => 'de',
        'es' => 'es',
        'fr' => 'fr',
        'he' => 'he',
        'it' => 'it',
        'ja' => 'ja',
        'ko' => 'ko',
        'pl' => 'pl',
        'pt' => 'pt',
        'ro' => 'ro',
        'ru' => 'ru',
        'th' => 'th',
        'tr' => 'tr',
        'tw' => 'tw',
        'vi' => 'vi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'en' => 'setEn',
        'ar' => 'setAr',
        'bg' => 'setBg',
        'cn' => 'setCn',
        'cs' => 'setCs',
        'de' => 'setDe',
        'es' => 'setEs',
        'fr' => 'setFr',
        'he' => 'setHe',
        'it' => 'setIt',
        'ja' => 'setJa',
        'ko' => 'setKo',
        'pl' => 'setPl',
        'pt' => 'setPt',
        'ro' => 'setRo',
        'ru' => 'setRu',
        'th' => 'setTh',
        'tr' => 'setTr',
        'tw' => 'setTw',
        'vi' => 'setVi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'en' => 'getEn',
        'ar' => 'getAr',
        'bg' => 'getBg',
        'cn' => 'getCn',
        'cs' => 'getCs',
        'de' => 'getDe',
        'es' => 'getEs',
        'fr' => 'getFr',
        'he' => 'getHe',
        'it' => 'getIt',
        'ja' => 'getJa',
        'ko' => 'getKo',
        'pl' => 'getPl',
        'pt' => 'getPt',
        'ro' => 'getRo',
        'ru' => 'getRu',
        'th' => 'getTh',
        'tr' => 'getTr',
        'tw' => 'getTw',
        'vi' => 'getVi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('en', $data ?? [], null);
        $this->setIfExists('ar', $data ?? [], null);
        $this->setIfExists('bg', $data ?? [], null);
        $this->setIfExists('cn', $data ?? [], null);
        $this->setIfExists('cs', $data ?? [], null);
        $this->setIfExists('de', $data ?? [], null);
        $this->setIfExists('es', $data ?? [], null);
        $this->setIfExists('fr', $data ?? [], null);
        $this->setIfExists('he', $data ?? [], null);
        $this->setIfExists('it', $data ?? [], null);
        $this->setIfExists('ja', $data ?? [], null);
        $this->setIfExists('ko', $data ?? [], null);
        $this->setIfExists('pl', $data ?? [], null);
        $this->setIfExists('pt', $data ?? [], null);
        $this->setIfExists('ro', $data ?? [], null);
        $this->setIfExists('ru', $data ?? [], null);
        $this->setIfExists('th', $data ?? [], null);
        $this->setIfExists('tr', $data ?? [], null);
        $this->setIfExists('tw', $data ?? [], null);
        $this->setIfExists('vi', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets en
     *
     * @return string|null
     */
    public function getEn()
    {
        return $this->container['en'];
    }

    /**
     * Sets en
     *
     * @param string|null $en en
     *
     * @return self
     */
    public function setEn($en)
    {
        if (is_null($en)) {
            array_push($this->openAPINullablesSetToNull, 'en');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('en', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['en'] = $en;

        return $this;
    }

    /**
     * Gets ar
     *
     * @return string|null
     */
    public function getAr()
    {
        return $this->container['ar'];
    }

    /**
     * Sets ar
     *
     * @param string|null $ar ar
     *
     * @return self
     */
    public function setAr($ar)
    {
        if (is_null($ar)) {
            array_push($this->openAPINullablesSetToNull, 'ar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ar'] = $ar;

        return $this;
    }

    /**
     * Gets bg
     *
     * @return string|null
     */
    public function getBg()
    {
        return $this->container['bg'];
    }

    /**
     * Sets bg
     *
     * @param string|null $bg bg
     *
     * @return self
     */
    public function setBg($bg)
    {
        if (is_null($bg)) {
            array_push($this->openAPINullablesSetToNull, 'bg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bg'] = $bg;

        return $this;
    }

    /**
     * Gets cn
     *
     * @return string|null
     */
    public function getCn()
    {
        return $this->container['cn'];
    }

    /**
     * Sets cn
     *
     * @param string|null $cn cn
     *
     * @return self
     */
    public function setCn($cn)
    {
        if (is_null($cn)) {
            array_push($this->openAPINullablesSetToNull, 'cn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cn'] = $cn;

        return $this;
    }

    /**
     * Gets cs
     *
     * @return string|null
     */
    public function getCs()
    {
        return $this->container['cs'];
    }

    /**
     * Sets cs
     *
     * @param string|null $cs cs
     *
     * @return self
     */
    public function setCs($cs)
    {
        if (is_null($cs)) {
            array_push($this->openAPINullablesSetToNull, 'cs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cs'] = $cs;

        return $this;
    }

    /**
     * Gets de
     *
     * @return string|null
     */
    public function getDe()
    {
        return $this->container['de'];
    }

    /**
     * Sets de
     *
     * @param string|null $de de
     *
     * @return self
     */
    public function setDe($de)
    {
        if (is_null($de)) {
            array_push($this->openAPINullablesSetToNull, 'de');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('de', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['de'] = $de;

        return $this;
    }

    /**
     * Gets es
     *
     * @return string|null
     */
    public function getEs()
    {
        return $this->container['es'];
    }

    /**
     * Sets es
     *
     * @param string|null $es es
     *
     * @return self
     */
    public function setEs($es)
    {
        if (is_null($es)) {
            array_push($this->openAPINullablesSetToNull, 'es');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('es', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['es'] = $es;

        return $this;
    }

    /**
     * Gets fr
     *
     * @return string|null
     */
    public function getFr()
    {
        return $this->container['fr'];
    }

    /**
     * Sets fr
     *
     * @param string|null $fr fr
     *
     * @return self
     */
    public function setFr($fr)
    {
        if (is_null($fr)) {
            array_push($this->openAPINullablesSetToNull, 'fr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fr'] = $fr;

        return $this;
    }

    /**
     * Gets he
     *
     * @return string|null
     */
    public function getHe()
    {
        return $this->container['he'];
    }

    /**
     * Sets he
     *
     * @param string|null $he he
     *
     * @return self
     */
    public function setHe($he)
    {
        if (is_null($he)) {
            array_push($this->openAPINullablesSetToNull, 'he');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('he', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['he'] = $he;

        return $this;
    }

    /**
     * Gets it
     *
     * @return string|null
     */
    public function getIt()
    {
        return $this->container['it'];
    }

    /**
     * Sets it
     *
     * @param string|null $it it
     *
     * @return self
     */
    public function setIt($it)
    {
        if (is_null($it)) {
            array_push($this->openAPINullablesSetToNull, 'it');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('it', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['it'] = $it;

        return $this;
    }

    /**
     * Gets ja
     *
     * @return string|null
     */
    public function getJa()
    {
        return $this->container['ja'];
    }

    /**
     * Sets ja
     *
     * @param string|null $ja ja
     *
     * @return self
     */
    public function setJa($ja)
    {
        if (is_null($ja)) {
            array_push($this->openAPINullablesSetToNull, 'ja');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ja', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ja'] = $ja;

        return $this;
    }

    /**
     * Gets ko
     *
     * @return string|null
     */
    public function getKo()
    {
        return $this->container['ko'];
    }

    /**
     * Sets ko
     *
     * @param string|null $ko ko
     *
     * @return self
     */
    public function setKo($ko)
    {
        if (is_null($ko)) {
            array_push($this->openAPINullablesSetToNull, 'ko');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ko', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ko'] = $ko;

        return $this;
    }

    /**
     * Gets pl
     *
     * @return string|null
     */
    public function getPl()
    {
        return $this->container['pl'];
    }

    /**
     * Sets pl
     *
     * @param string|null $pl pl
     *
     * @return self
     */
    public function setPl($pl)
    {
        if (is_null($pl)) {
            array_push($this->openAPINullablesSetToNull, 'pl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pl'] = $pl;

        return $this;
    }

    /**
     * Gets pt
     *
     * @return string|null
     */
    public function getPt()
    {
        return $this->container['pt'];
    }

    /**
     * Sets pt
     *
     * @param string|null $pt pt
     *
     * @return self
     */
    public function setPt($pt)
    {
        if (is_null($pt)) {
            array_push($this->openAPINullablesSetToNull, 'pt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pt'] = $pt;

        return $this;
    }

    /**
     * Gets ro
     *
     * @return string|null
     */
    public function getRo()
    {
        return $this->container['ro'];
    }

    /**
     * Sets ro
     *
     * @param string|null $ro ro
     *
     * @return self
     */
    public function setRo($ro)
    {
        if (is_null($ro)) {
            array_push($this->openAPINullablesSetToNull, 'ro');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ro', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ro'] = $ro;

        return $this;
    }

    /**
     * Gets ru
     *
     * @return string|null
     */
    public function getRu()
    {
        return $this->container['ru'];
    }

    /**
     * Sets ru
     *
     * @param string|null $ru ru
     *
     * @return self
     */
    public function setRu($ru)
    {
        if (is_null($ru)) {
            array_push($this->openAPINullablesSetToNull, 'ru');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ru', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ru'] = $ru;

        return $this;
    }

    /**
     * Gets th
     *
     * @return string|null
     */
    public function getTh()
    {
        return $this->container['th'];
    }

    /**
     * Sets th
     *
     * @param string|null $th th
     *
     * @return self
     */
    public function setTh($th)
    {
        if (is_null($th)) {
            array_push($this->openAPINullablesSetToNull, 'th');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('th', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['th'] = $th;

        return $this;
    }

    /**
     * Gets tr
     *
     * @return string|null
     */
    public function getTr()
    {
        return $this->container['tr'];
    }

    /**
     * Sets tr
     *
     * @param string|null $tr tr
     *
     * @return self
     */
    public function setTr($tr)
    {
        if (is_null($tr)) {
            array_push($this->openAPINullablesSetToNull, 'tr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tr'] = $tr;

        return $this;
    }

    /**
     * Gets tw
     *
     * @return string|null
     */
    public function getTw()
    {
        return $this->container['tw'];
    }

    /**
     * Sets tw
     *
     * @param string|null $tw tw
     *
     * @return self
     */
    public function setTw($tw)
    {
        if (is_null($tw)) {
            array_push($this->openAPINullablesSetToNull, 'tw');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tw', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tw'] = $tw;

        return $this;
    }

    /**
     * Gets vi
     *
     * @return string|null
     */
    public function getVi()
    {
        return $this->container['vi'];
    }

    /**
     * Sets vi
     *
     * @param string|null $vi vi
     *
     * @return self
     */
    public function setVi($vi)
    {
        if (is_null($vi)) {
            array_push($this->openAPINullablesSetToNull, 'vi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vi'] = $vi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


