<?php
/**
 * PromotionsUniqueCatalogOffersApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PromotionsUniqueCatalogOffersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PromotionsUniqueCatalogOffersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateUniqueCatalogOffer' => [
            'application/json',
        ],
        'adminCreateUniqueCatalogOffer' => [
            'application/json',
        ],
        'createUniqueCatalogOfferCode' => [
            'application/json',
        ],
        'deactivateUniqueCatalogOffer' => [
            'application/json',
        ],
        'deleteUniqueCatalogOfferPromotion' => [
            'application/json',
        ],
        'generateUniqueCatalogOfferCodes' => [
            'application/json',
        ],
        'getUniqueCatalogOffer' => [
            'application/json',
        ],
        'getUniqueCatalogOfferCodes' => [
            'application/json',
        ],
        'getUniqueCatalogOffers' => [
            'application/json',
        ],
        'updateUniqueCatalogOfferPromotion' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activateUniqueCatalogOffer
     *
     * Activate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function activateUniqueCatalogOffer($project_id, $external_id, string $contentType = self::contentTypes['activateUniqueCatalogOffer'][0])
    {
        $this->activateUniqueCatalogOfferWithHttpInfo($project_id, $external_id, $contentType);
    }

    /**
     * Operation activateUniqueCatalogOfferWithHttpInfo
     *
     * Activate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateUniqueCatalogOfferWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['activateUniqueCatalogOffer'][0])
    {
        $request = $this->activateUniqueCatalogOfferRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject45',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation activateUniqueCatalogOfferAsync
     *
     * Activate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateUniqueCatalogOfferAsync($project_id, $external_id, string $contentType = self::contentTypes['activateUniqueCatalogOffer'][0])
    {
        return $this->activateUniqueCatalogOfferAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateUniqueCatalogOfferAsyncWithHttpInfo
     *
     * Activate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateUniqueCatalogOfferAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['activateUniqueCatalogOffer'][0])
    {
        $returnType = '';
        $request = $this->activateUniqueCatalogOfferRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateUniqueCatalogOffer'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateUniqueCatalogOfferRequest($project_id, $external_id, string $contentType = self::contentTypes['activateUniqueCatalogOffer'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling activateUniqueCatalogOffer'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling activateUniqueCatalogOffer'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminCreateUniqueCatalogOffer
     *
     * Create unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateUniqueCatalogOfferRequest|null $admin_create_unique_catalog_offer_request admin_create_unique_catalog_offer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminCreateCoupon201Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject43
     */
    public function adminCreateUniqueCatalogOffer($project_id, $admin_create_unique_catalog_offer_request = null, string $contentType = self::contentTypes['adminCreateUniqueCatalogOffer'][0])
    {
        list($response) = $this->adminCreateUniqueCatalogOfferWithHttpInfo($project_id, $admin_create_unique_catalog_offer_request, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateUniqueCatalogOfferWithHttpInfo
     *
     * Create unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateUniqueCatalogOfferRequest|null $admin_create_unique_catalog_offer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminCreateCoupon201Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject43, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateUniqueCatalogOfferWithHttpInfo($project_id, $admin_create_unique_catalog_offer_request = null, string $contentType = self::contentTypes['adminCreateUniqueCatalogOffer'][0])
    {
        $request = $this->adminCreateUniqueCatalogOfferRequest($project_id, $admin_create_unique_catalog_offer_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\AdminCreateCoupon201Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject43',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\AdminCreateCoupon201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminCreateCoupon201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateUniqueCatalogOfferAsync
     *
     * Create unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateUniqueCatalogOfferRequest|null $admin_create_unique_catalog_offer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateUniqueCatalogOfferAsync($project_id, $admin_create_unique_catalog_offer_request = null, string $contentType = self::contentTypes['adminCreateUniqueCatalogOffer'][0])
    {
        return $this->adminCreateUniqueCatalogOfferAsyncWithHttpInfo($project_id, $admin_create_unique_catalog_offer_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateUniqueCatalogOfferAsyncWithHttpInfo
     *
     * Create unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateUniqueCatalogOfferRequest|null $admin_create_unique_catalog_offer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateUniqueCatalogOfferAsyncWithHttpInfo($project_id, $admin_create_unique_catalog_offer_request = null, string $contentType = self::contentTypes['adminCreateUniqueCatalogOffer'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminCreateCoupon201Response';
        $request = $this->adminCreateUniqueCatalogOfferRequest($project_id, $admin_create_unique_catalog_offer_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateUniqueCatalogOffer'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateUniqueCatalogOfferRequest|null $admin_create_unique_catalog_offer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateUniqueCatalogOfferRequest($project_id, $admin_create_unique_catalog_offer_request = null, string $contentType = self::contentTypes['adminCreateUniqueCatalogOffer'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateUniqueCatalogOffer'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_create_unique_catalog_offer_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($admin_create_unique_catalog_offer_request));
            } else {
                $httpBody = $admin_create_unique_catalog_offer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUniqueCatalogOfferCode
     *
     * Create unique catalog offer code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUniqueCatalogOfferCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject46CodesInner|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44|\OpenAPI\Client\Model\InlineObject47
     */
    public function createUniqueCatalogOfferCode($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createUniqueCatalogOfferCode'][0])
    {
        list($response) = $this->createUniqueCatalogOfferCodeWithHttpInfo($project_id, $external_id, $create_coupon_code_request, $contentType);
        return $response;
    }

    /**
     * Operation createUniqueCatalogOfferCodeWithHttpInfo
     *
     * Create unique catalog offer code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUniqueCatalogOfferCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject46CodesInner|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44|\OpenAPI\Client\Model\InlineObject47, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUniqueCatalogOfferCodeWithHttpInfo($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createUniqueCatalogOfferCode'][0])
    {
        $request = $this->createUniqueCatalogOfferCodeRequest($project_id, $external_id, $create_coupon_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject46CodesInner',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject44',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject47',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject46CodesInner',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject46CodesInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject47',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createUniqueCatalogOfferCodeAsync
     *
     * Create unique catalog offer code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUniqueCatalogOfferCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUniqueCatalogOfferCodeAsync($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createUniqueCatalogOfferCode'][0])
    {
        return $this->createUniqueCatalogOfferCodeAsyncWithHttpInfo($project_id, $external_id, $create_coupon_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUniqueCatalogOfferCodeAsyncWithHttpInfo
     *
     * Create unique catalog offer code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUniqueCatalogOfferCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUniqueCatalogOfferCodeAsyncWithHttpInfo($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createUniqueCatalogOfferCode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject46CodesInner';
        $request = $this->createUniqueCatalogOfferCodeRequest($project_id, $external_id, $create_coupon_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUniqueCatalogOfferCode'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUniqueCatalogOfferCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUniqueCatalogOfferCodeRequest($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createUniqueCatalogOfferCode'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling createUniqueCatalogOfferCode'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling createUniqueCatalogOfferCode'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_coupon_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_coupon_code_request));
            } else {
                $httpBody = $create_coupon_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deactivateUniqueCatalogOffer
     *
     * Deactivate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deactivateUniqueCatalogOffer($project_id, $external_id, string $contentType = self::contentTypes['deactivateUniqueCatalogOffer'][0])
    {
        $this->deactivateUniqueCatalogOfferWithHttpInfo($project_id, $external_id, $contentType);
    }

    /**
     * Operation deactivateUniqueCatalogOfferWithHttpInfo
     *
     * Deactivate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deactivateUniqueCatalogOfferWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deactivateUniqueCatalogOffer'][0])
    {
        $request = $this->deactivateUniqueCatalogOfferRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject45',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deactivateUniqueCatalogOfferAsync
     *
     * Deactivate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateUniqueCatalogOfferAsync($project_id, $external_id, string $contentType = self::contentTypes['deactivateUniqueCatalogOffer'][0])
    {
        return $this->deactivateUniqueCatalogOfferAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deactivateUniqueCatalogOfferAsyncWithHttpInfo
     *
     * Deactivate unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateUniqueCatalogOfferAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deactivateUniqueCatalogOffer'][0])
    {
        $returnType = '';
        $request = $this->deactivateUniqueCatalogOfferRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deactivateUniqueCatalogOffer'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deactivateUniqueCatalogOfferRequest($project_id, $external_id, string $contentType = self::contentTypes['deactivateUniqueCatalogOffer'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling deactivateUniqueCatalogOffer'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling deactivateUniqueCatalogOffer'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUniqueCatalogOfferPromotion
     *
     * Delete unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUniqueCatalogOfferPromotion($project_id, $external_id, string $contentType = self::contentTypes['deleteUniqueCatalogOfferPromotion'][0])
    {
        $this->deleteUniqueCatalogOfferPromotionWithHttpInfo($project_id, $external_id, $contentType);
    }

    /**
     * Operation deleteUniqueCatalogOfferPromotionWithHttpInfo
     *
     * Delete unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUniqueCatalogOfferPromotionWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deleteUniqueCatalogOfferPromotion'][0])
    {
        $request = $this->deleteUniqueCatalogOfferPromotionRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteUniqueCatalogOfferPromotionAsync
     *
     * Delete unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUniqueCatalogOfferPromotionAsync($project_id, $external_id, string $contentType = self::contentTypes['deleteUniqueCatalogOfferPromotion'][0])
    {
        return $this->deleteUniqueCatalogOfferPromotionAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUniqueCatalogOfferPromotionAsyncWithHttpInfo
     *
     * Delete unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUniqueCatalogOfferPromotionAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deleteUniqueCatalogOfferPromotion'][0])
    {
        $returnType = '';
        $request = $this->deleteUniqueCatalogOfferPromotionRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUniqueCatalogOfferPromotion'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUniqueCatalogOfferPromotionRequest($project_id, $external_id, string $contentType = self::contentTypes['deleteUniqueCatalogOfferPromotion'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling deleteUniqueCatalogOfferPromotion'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling deleteUniqueCatalogOfferPromotion'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateUniqueCatalogOfferCodes
     *
     * Generate unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenerateCouponCodes200Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject48
     */
    public function generateUniqueCatalogOfferCodes($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateUniqueCatalogOfferCodes'][0])
    {
        list($response) = $this->generateUniqueCatalogOfferCodesWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request, $contentType);
        return $response;
    }

    /**
     * Operation generateUniqueCatalogOfferCodesWithHttpInfo
     *
     * Generate unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenerateCouponCodes200Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject48, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateUniqueCatalogOfferCodesWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateUniqueCatalogOfferCodes'][0])
    {
        $request = $this->generateUniqueCatalogOfferCodesRequest($project_id, $external_id, $generate_coupon_codes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenerateCouponCodes200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject48',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenerateCouponCodes200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenerateCouponCodes200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject48',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation generateUniqueCatalogOfferCodesAsync
     *
     * Generate unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateUniqueCatalogOfferCodesAsync($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateUniqueCatalogOfferCodes'][0])
    {
        return $this->generateUniqueCatalogOfferCodesAsyncWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateUniqueCatalogOfferCodesAsyncWithHttpInfo
     *
     * Generate unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateUniqueCatalogOfferCodesAsyncWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateUniqueCatalogOfferCodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GenerateCouponCodes200Response';
        $request = $this->generateUniqueCatalogOfferCodesRequest($project_id, $external_id, $generate_coupon_codes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateUniqueCatalogOfferCodes'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateUniqueCatalogOfferCodesRequest($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateUniqueCatalogOfferCodes'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling generateUniqueCatalogOfferCodes'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling generateUniqueCatalogOfferCodes'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/code/generate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generate_coupon_codes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generate_coupon_codes_request));
            } else {
                $httpBody = $generate_coupon_codes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniqueCatalogOffer
     *
     * Get unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Promotions200GetUniqueCatalogOfferPromotionModel|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44
     */
    public function getUniqueCatalogOffer($project_id, $external_id, string $contentType = self::contentTypes['getUniqueCatalogOffer'][0])
    {
        list($response) = $this->getUniqueCatalogOfferWithHttpInfo($project_id, $external_id, $contentType);
        return $response;
    }

    /**
     * Operation getUniqueCatalogOfferWithHttpInfo
     *
     * Get unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Promotions200GetUniqueCatalogOfferPromotionModel|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniqueCatalogOfferWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['getUniqueCatalogOffer'][0])
    {
        $request = $this->getUniqueCatalogOfferRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Promotions200GetUniqueCatalogOfferPromotionModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject44',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Promotions200GetUniqueCatalogOfferPromotionModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Promotions200GetUniqueCatalogOfferPromotionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniqueCatalogOfferAsync
     *
     * Get unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueCatalogOfferAsync($project_id, $external_id, string $contentType = self::contentTypes['getUniqueCatalogOffer'][0])
    {
        return $this->getUniqueCatalogOfferAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniqueCatalogOfferAsyncWithHttpInfo
     *
     * Get unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueCatalogOfferAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['getUniqueCatalogOffer'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Promotions200GetUniqueCatalogOfferPromotionModel';
        $request = $this->getUniqueCatalogOfferRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniqueCatalogOffer'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniqueCatalogOfferRequest($project_id, $external_id, string $contentType = self::contentTypes['getUniqueCatalogOffer'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getUniqueCatalogOffer'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getUniqueCatalogOffer'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniqueCatalogOfferCodes
     *
     * Get unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject97|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44
     */
    public function getUniqueCatalogOfferCodes($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOfferCodes'][0])
    {
        list($response) = $this->getUniqueCatalogOfferCodesWithHttpInfo($project_id, $external_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getUniqueCatalogOfferCodesWithHttpInfo
     *
     * Get unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject97|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniqueCatalogOfferCodesWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOfferCodes'][0])
    {
        $request = $this->getUniqueCatalogOfferCodesRequest($project_id, $external_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject97',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject44',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject97',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject97',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniqueCatalogOfferCodesAsync
     *
     * Get unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueCatalogOfferCodesAsync($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOfferCodes'][0])
    {
        return $this->getUniqueCatalogOfferCodesAsyncWithHttpInfo($project_id, $external_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniqueCatalogOfferCodesAsyncWithHttpInfo
     *
     * Get unique catalog offer codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueCatalogOfferCodesAsyncWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOfferCodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject97';
        $request = $this->getUniqueCatalogOfferCodesRequest($project_id, $external_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniqueCatalogOfferCodes'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOfferCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniqueCatalogOfferCodesRequest($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOfferCodes'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getUniqueCatalogOfferCodes'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getUniqueCatalogOfferCodes'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsUniqueCatalogOffersApi.getUniqueCatalogOfferCodes, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PromotionsUniqueCatalogOffersApi.getUniqueCatalogOfferCodes, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUniqueCatalogOffers
     *
     * Get list of unique catalog offer promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject96|\OpenAPI\Client\Model\InlineObject1
     */
    public function getUniqueCatalogOffers($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOffers'][0])
    {
        list($response) = $this->getUniqueCatalogOffersWithHttpInfo($project_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getUniqueCatalogOffersWithHttpInfo
     *
     * Get list of unique catalog offer promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject96|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUniqueCatalogOffersWithHttpInfo($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOffers'][0])
    {
        $request = $this->getUniqueCatalogOffersRequest($project_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject96',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject96',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject96',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUniqueCatalogOffersAsync
     *
     * Get list of unique catalog offer promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueCatalogOffersAsync($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOffers'][0])
    {
        return $this->getUniqueCatalogOffersAsyncWithHttpInfo($project_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUniqueCatalogOffersAsyncWithHttpInfo
     *
     * Get list of unique catalog offer promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUniqueCatalogOffersAsyncWithHttpInfo($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOffers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject96';
        $request = $this->getUniqueCatalogOffersRequest($project_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUniqueCatalogOffers'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUniqueCatalogOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUniqueCatalogOffersRequest($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getUniqueCatalogOffers'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getUniqueCatalogOffers'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsUniqueCatalogOffersApi.getUniqueCatalogOffers, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PromotionsUniqueCatalogOffersApi.getUniqueCatalogOffers, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateUniqueCatalogOfferPromotion
     *
     * Update unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateUniqueCatalogOfferPromotionRequest|null $update_unique_catalog_offer_promotion_request update_unique_catalog_offer_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateUniqueCatalogOfferPromotion($project_id, $external_id, $update_unique_catalog_offer_promotion_request = null, string $contentType = self::contentTypes['updateUniqueCatalogOfferPromotion'][0])
    {
        $this->updateUniqueCatalogOfferPromotionWithHttpInfo($project_id, $external_id, $update_unique_catalog_offer_promotion_request, $contentType);
    }

    /**
     * Operation updateUniqueCatalogOfferPromotionWithHttpInfo
     *
     * Update unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateUniqueCatalogOfferPromotionRequest|null $update_unique_catalog_offer_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUniqueCatalogOfferPromotionWithHttpInfo($project_id, $external_id, $update_unique_catalog_offer_promotion_request = null, string $contentType = self::contentTypes['updateUniqueCatalogOfferPromotion'][0])
    {
        $request = $this->updateUniqueCatalogOfferPromotionRequest($project_id, $external_id, $update_unique_catalog_offer_promotion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateUniqueCatalogOfferPromotionAsync
     *
     * Update unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateUniqueCatalogOfferPromotionRequest|null $update_unique_catalog_offer_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUniqueCatalogOfferPromotionAsync($project_id, $external_id, $update_unique_catalog_offer_promotion_request = null, string $contentType = self::contentTypes['updateUniqueCatalogOfferPromotion'][0])
    {
        return $this->updateUniqueCatalogOfferPromotionAsyncWithHttpInfo($project_id, $external_id, $update_unique_catalog_offer_promotion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUniqueCatalogOfferPromotionAsyncWithHttpInfo
     *
     * Update unique catalog offer promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateUniqueCatalogOfferPromotionRequest|null $update_unique_catalog_offer_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUniqueCatalogOfferPromotionAsyncWithHttpInfo($project_id, $external_id, $update_unique_catalog_offer_promotion_request = null, string $contentType = self::contentTypes['updateUniqueCatalogOfferPromotion'][0])
    {
        $returnType = '';
        $request = $this->updateUniqueCatalogOfferPromotionRequest($project_id, $external_id, $update_unique_catalog_offer_promotion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateUniqueCatalogOfferPromotion'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateUniqueCatalogOfferPromotionRequest|null $update_unique_catalog_offer_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUniqueCatalogOfferPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUniqueCatalogOfferPromotionRequest($project_id, $external_id, $update_unique_catalog_offer_promotion_request = null, string $contentType = self::contentTypes['updateUniqueCatalogOfferPromotion'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling updateUniqueCatalogOfferPromotion'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling updateUniqueCatalogOfferPromotion'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/unique_catalog_offer/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_unique_catalog_offer_promotion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_unique_catalog_offer_promotion_request));
            } else {
                $httpBody = $update_unique_catalog_offer_promotion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
