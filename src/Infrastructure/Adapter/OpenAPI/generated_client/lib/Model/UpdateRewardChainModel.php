<?php
/**
 * UpdateRewardChainModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateRewardChainModel Class Doc Comment
 *
 * @category Class
 * @description A reward chain.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateRewardChainModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'update-reward-chain-model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => '\OpenAPI\Client\Model\NameLocalizationObject',
        'description' => '\OpenAPI\Client\Model\DescriptionLocalizationObject',
        'long_description' => '\OpenAPI\Client\Model\LongDescriptionLocalizationObject',
        'image_url' => 'string',
        'order' => 'int',
        'date_start' => '\DateTime',
        'date_end' => '\DateTime',
        'is_enabled' => 'bool',
        'steps' => '\OpenAPI\Client\Model\ModifyRewardStep[]',
        'recurrent_schedule' => '\OpenAPI\Client\Model\RecurrentScheduleCreateUpdate',
        'attribute_conditions' => '\OpenAPI\Client\Model\CreateItemPromotionRequestAttributeConditionsInner',
        'is_always_visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'long_description' => null,
        'image_url' => null,
        'order' => null,
        'date_start' => 'date-time',
        'date_end' => 'date-time',
        'is_enabled' => null,
        'steps' => null,
        'recurrent_schedule' => null,
        'attribute_conditions' => null,
        'is_always_visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'description' => true,
        'long_description' => true,
        'image_url' => true,
        'order' => false,
        'date_start' => false,
        'date_end' => true,
        'is_enabled' => false,
        'steps' => false,
        'recurrent_schedule' => true,
        'attribute_conditions' => false,
        'is_always_visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'long_description' => 'long_description',
        'image_url' => 'image_url',
        'order' => 'order',
        'date_start' => 'date_start',
        'date_end' => 'date_end',
        'is_enabled' => 'is_enabled',
        'steps' => 'steps',
        'recurrent_schedule' => 'recurrent_schedule',
        'attribute_conditions' => 'attribute_conditions',
        'is_always_visible' => 'is_always_visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'long_description' => 'setLongDescription',
        'image_url' => 'setImageUrl',
        'order' => 'setOrder',
        'date_start' => 'setDateStart',
        'date_end' => 'setDateEnd',
        'is_enabled' => 'setIsEnabled',
        'steps' => 'setSteps',
        'recurrent_schedule' => 'setRecurrentSchedule',
        'attribute_conditions' => 'setAttributeConditions',
        'is_always_visible' => 'setIsAlwaysVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'long_description' => 'getLongDescription',
        'image_url' => 'getImageUrl',
        'order' => 'getOrder',
        'date_start' => 'getDateStart',
        'date_end' => 'getDateEnd',
        'is_enabled' => 'getIsEnabled',
        'steps' => 'getSteps',
        'recurrent_schedule' => 'getRecurrentSchedule',
        'attribute_conditions' => 'getAttributeConditions',
        'is_always_visible' => 'getIsAlwaysVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('date_start', $data ?? [], null);
        $this->setIfExists('date_end', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], null);
        $this->setIfExists('recurrent_schedule', $data ?? [], null);
        $this->setIfExists('attribute_conditions', $data ?? [], null);
        $this->setIfExists('is_always_visible', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date_start'] === null) {
            $invalidProperties[] = "'date_start' can't be null";
        }
        if ($this->container['is_enabled'] === null) {
            $invalidProperties[] = "'is_enabled' can't be null";
        }
        if ($this->container['steps'] === null) {
            $invalidProperties[] = "'steps' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\NameLocalizationObject
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\NameLocalizationObject $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\DescriptionLocalizationObject|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\DescriptionLocalizationObject|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return \OpenAPI\Client\Model\LongDescriptionLocalizationObject|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param \OpenAPI\Client\Model\LongDescriptionLocalizationObject|null $long_description long_description
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url Image URL.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order Defines arrangement order.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets date_start
     *
     * @return \DateTime
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param \DateTime $date_start Date when your reward chain starts.
     *
     * @return self
     */
    public function setDateStart($date_start)
    {
        if (is_null($date_start)) {
            throw new \InvalidArgumentException('non-nullable date_start cannot be null');
        }
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     *
     * @return \DateTime|null
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     *
     * @param \DateTime|null $date_end Date when your reward chain promotion ends. Can be `null`. If `date_end` is `null`, the reward chain will be unlimited by time.
     *
     * @return self
     */
    public function setDateEnd($date_end)
    {
        if (is_null($date_end)) {
            array_push($this->openAPINullablesSetToNull, 'date_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \OpenAPI\Client\Model\ModifyRewardStep[]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \OpenAPI\Client\Model\ModifyRewardStep[] $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            throw new \InvalidArgumentException('non-nullable steps cannot be null');
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets recurrent_schedule
     *
     * @return \OpenAPI\Client\Model\RecurrentScheduleCreateUpdate|null
     */
    public function getRecurrentSchedule()
    {
        return $this->container['recurrent_schedule'];
    }

    /**
     * Sets recurrent_schedule
     *
     * @param \OpenAPI\Client\Model\RecurrentScheduleCreateUpdate|null $recurrent_schedule recurrent_schedule
     *
     * @return self
     */
    public function setRecurrentSchedule($recurrent_schedule)
    {
        if (is_null($recurrent_schedule)) {
            array_push($this->openAPINullablesSetToNull, 'recurrent_schedule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurrent_schedule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurrent_schedule'] = $recurrent_schedule;

        return $this;
    }

    /**
     * Gets attribute_conditions
     *
     * @return \OpenAPI\Client\Model\CreateItemPromotionRequestAttributeConditionsInner|null
     */
    public function getAttributeConditions()
    {
        return $this->container['attribute_conditions'];
    }

    /**
     * Sets attribute_conditions
     *
     * @param \OpenAPI\Client\Model\CreateItemPromotionRequestAttributeConditionsInner|null $attribute_conditions attribute_conditions
     *
     * @return self
     */
    public function setAttributeConditions($attribute_conditions)
    {
        if (is_null($attribute_conditions)) {
            throw new \InvalidArgumentException('non-nullable attribute_conditions cannot be null');
        }
        $this->container['attribute_conditions'] = $attribute_conditions;

        return $this;
    }

    /**
     * Gets is_always_visible
     *
     * @return bool|null
     */
    public function getIsAlwaysVisible()
    {
        return $this->container['is_always_visible'];
    }

    /**
     * Sets is_always_visible
     *
     * @param bool|null $is_always_visible Whether the reward chain is visible to all users: * If `true`, the chain is always displayed, regardless of the user's authentication status or attributes. * If `false`, the chain is displayed only if no suitable reward chain is found. For example, if the user is not authenticated or their attributes don’t match any personalized chain.  Applies only in the context of personalized reward chains and is used if the `attribute_conditions` array is not passed.
     *
     * @return self
     */
    public function setIsAlwaysVisible($is_always_visible)
    {
        if (is_null($is_always_visible)) {
            throw new \InvalidArgumentException('non-nullable is_always_visible cannot be null');
        }
        $this->container['is_always_visible'] = $is_always_visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


