<?php
/**
 * RewardChainValuePointsAdminApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RewardChainValuePointsAdminApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RewardChainValuePointsAdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminCreateRewardChain' => [
            'application/json',
        ],
        'adminCreateValuePoints' => [
            'application/json',
        ],
        'adminDeleteItemsValuePointReward' => [
            'application/json',
        ],
        'adminDeleteRewardChain' => [
            'application/json',
        ],
        'adminDeleteValuePoint' => [
            'application/json',
        ],
        'adminGetItemsValuePointReward' => [
            'application/json',
        ],
        'adminGetRewardChain' => [
            'application/json',
        ],
        'adminGetRewardChains' => [
            'application/json',
        ],
        'adminGetValuePoint' => [
            'application/json',
        ],
        'adminGetValuePointsList' => [
            'application/json',
        ],
        'adminPatchItemsValuePointReward' => [
            'application/json',
        ],
        'adminResetRewardChain' => [
            'application/json',
        ],
        'adminSetItemsValuePointReward' => [
            'application/json',
        ],
        'adminToggleRewardChain' => [
            'application/json',
        ],
        'adminUpdateRewardChain' => [
            'application/json',
        ],
        'adminUpdateValuePoint' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminCreateRewardChain
     *
     * Create reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateRewardChainRequest|null $admin_create_reward_chain_request admin_create_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject91|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\Model422RcVpInvalidRequest
     */
    public function adminCreateRewardChain($project_id, $admin_create_reward_chain_request = null, string $contentType = self::contentTypes['adminCreateRewardChain'][0])
    {
        list($response) = $this->adminCreateRewardChainWithHttpInfo($project_id, $admin_create_reward_chain_request, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateRewardChainWithHttpInfo
     *
     * Create reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateRewardChainRequest|null $admin_create_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject91|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\Model422RcVpInvalidRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateRewardChainWithHttpInfo($project_id, $admin_create_reward_chain_request = null, string $contentType = self::contentTypes['adminCreateRewardChain'][0])
    {
        $request = $this->adminCreateRewardChainRequest($project_id, $admin_create_reward_chain_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject91',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Model422RcVpInvalidRequest',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject91',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject91',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Model422RcVpInvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateRewardChainAsync
     *
     * Create reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateRewardChainRequest|null $admin_create_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateRewardChainAsync($project_id, $admin_create_reward_chain_request = null, string $contentType = self::contentTypes['adminCreateRewardChain'][0])
    {
        return $this->adminCreateRewardChainAsyncWithHttpInfo($project_id, $admin_create_reward_chain_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateRewardChainAsyncWithHttpInfo
     *
     * Create reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateRewardChainRequest|null $admin_create_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateRewardChainAsyncWithHttpInfo($project_id, $admin_create_reward_chain_request = null, string $contentType = self::contentTypes['adminCreateRewardChain'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject91';
        $request = $this->adminCreateRewardChainRequest($project_id, $admin_create_reward_chain_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateRewardChain'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateRewardChainRequest|null $admin_create_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateRewardChainRequest($project_id, $admin_create_reward_chain_request = null, string $contentType = self::contentTypes['adminCreateRewardChain'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateRewardChain'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/reward_chain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_create_reward_chain_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($admin_create_reward_chain_request));
            } else {
                $httpBody = $admin_create_reward_chain_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminCreateValuePoints
     *
     * Create value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateValuePoints'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject82|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\Model422RcVpInvalidRequest
     */
    public function adminCreateValuePoints($project_id, $admin_value_points_create = null, string $contentType = self::contentTypes['adminCreateValuePoints'][0])
    {
        list($response) = $this->adminCreateValuePointsWithHttpInfo($project_id, $admin_value_points_create, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateValuePointsWithHttpInfo
     *
     * Create value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateValuePoints'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject82|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\Model422RcVpInvalidRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateValuePointsWithHttpInfo($project_id, $admin_value_points_create = null, string $contentType = self::contentTypes['adminCreateValuePoints'][0])
    {
        $request = $this->adminCreateValuePointsRequest($project_id, $admin_value_points_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject82',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Model422RcVpInvalidRequest',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject82',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject82',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Model422RcVpInvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateValuePointsAsync
     *
     * Create value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateValuePoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateValuePointsAsync($project_id, $admin_value_points_create = null, string $contentType = self::contentTypes['adminCreateValuePoints'][0])
    {
        return $this->adminCreateValuePointsAsyncWithHttpInfo($project_id, $admin_value_points_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateValuePointsAsyncWithHttpInfo
     *
     * Create value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateValuePoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateValuePointsAsyncWithHttpInfo($project_id, $admin_value_points_create = null, string $contentType = self::contentTypes['adminCreateValuePoints'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject82';
        $request = $this->adminCreateValuePointsRequest($project_id, $admin_value_points_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateValuePoints'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateValuePoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateValuePointsRequest($project_id, $admin_value_points_create = null, string $contentType = self::contentTypes['adminCreateValuePoints'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateValuePoints'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/value_points';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_value_points_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($admin_value_points_create));
            } else {
                $httpBody = $admin_value_points_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminDeleteItemsValuePointReward
     *
     * Delete value points from items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminDeleteItemsValuePointReward($project_id, $value_point_sku, string $contentType = self::contentTypes['adminDeleteItemsValuePointReward'][0])
    {
        $this->adminDeleteItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, $contentType);
    }

    /**
     * Operation adminDeleteItemsValuePointRewardWithHttpInfo
     *
     * Delete value points from items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminDeleteItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, string $contentType = self::contentTypes['adminDeleteItemsValuePointReward'][0])
    {
        $request = $this->adminDeleteItemsValuePointRewardRequest($project_id, $value_point_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminDeleteItemsValuePointRewardAsync
     *
     * Delete value points from items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteItemsValuePointRewardAsync($project_id, $value_point_sku, string $contentType = self::contentTypes['adminDeleteItemsValuePointReward'][0])
    {
        return $this->adminDeleteItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminDeleteItemsValuePointRewardAsyncWithHttpInfo
     *
     * Delete value points from items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, string $contentType = self::contentTypes['adminDeleteItemsValuePointReward'][0])
    {
        $returnType = '';
        $request = $this->adminDeleteItemsValuePointRewardRequest($project_id, $value_point_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminDeleteItemsValuePointReward'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminDeleteItemsValuePointRewardRequest($project_id, $value_point_sku, string $contentType = self::contentTypes['adminDeleteItemsValuePointReward'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminDeleteItemsValuePointReward'
            );
        }

        // verify the required parameter 'value_point_sku' is set
        if ($value_point_sku === null || (is_array($value_point_sku) && count($value_point_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value_point_sku when calling adminDeleteItemsValuePointReward'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/{value_point_sku}/value_points/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($value_point_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'value_point_sku' . '}',
                ObjectSerializer::toPathValue($value_point_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminDeleteRewardChain
     *
     * Delete reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminDeleteRewardChain($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminDeleteRewardChain'][0])
    {
        $this->adminDeleteRewardChainWithHttpInfo($project_id, $reward_chain_id, $contentType);
    }

    /**
     * Operation adminDeleteRewardChainWithHttpInfo
     *
     * Delete reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminDeleteRewardChainWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminDeleteRewardChain'][0])
    {
        $request = $this->adminDeleteRewardChainRequest($project_id, $reward_chain_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminDeleteRewardChainAsync
     *
     * Delete reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteRewardChainAsync($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminDeleteRewardChain'][0])
    {
        return $this->adminDeleteRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminDeleteRewardChainAsyncWithHttpInfo
     *
     * Delete reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminDeleteRewardChain'][0])
    {
        $returnType = '';
        $request = $this->adminDeleteRewardChainRequest($project_id, $reward_chain_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminDeleteRewardChain'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminDeleteRewardChainRequest($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminDeleteRewardChain'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminDeleteRewardChain'
            );
        }

        // verify the required parameter 'reward_chain_id' is set
        if ($reward_chain_id === null || (is_array($reward_chain_id) && count($reward_chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reward_chain_id when calling adminDeleteRewardChain'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($reward_chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reward_chain_id' . '}',
                ObjectSerializer::toPathValue($reward_chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminDeleteValuePoint
     *
     * Delete value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteValuePoint'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminDeleteValuePoint($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteValuePoint'][0])
    {
        $this->adminDeleteValuePointWithHttpInfo($project_id, $item_sku, $contentType);
    }

    /**
     * Operation adminDeleteValuePointWithHttpInfo
     *
     * Delete value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteValuePoint'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminDeleteValuePointWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteValuePoint'][0])
    {
        $request = $this->adminDeleteValuePointRequest($project_id, $item_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminDeleteValuePointAsync
     *
     * Delete value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteValuePointAsync($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteValuePoint'][0])
    {
        return $this->adminDeleteValuePointAsyncWithHttpInfo($project_id, $item_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminDeleteValuePointAsyncWithHttpInfo
     *
     * Delete value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteValuePointAsyncWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteValuePoint'][0])
    {
        $returnType = '';
        $request = $this->adminDeleteValuePointRequest($project_id, $item_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminDeleteValuePoint'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminDeleteValuePointRequest($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteValuePoint'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminDeleteValuePoint'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminDeleteValuePoint'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/value_points/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetItemsValuePointReward
     *
     * Get list of items with value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject83|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetItemsValuePointReward($project_id, $value_point_sku, string $contentType = self::contentTypes['adminGetItemsValuePointReward'][0])
    {
        list($response) = $this->adminGetItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, $contentType);
        return $response;
    }

    /**
     * Operation adminGetItemsValuePointRewardWithHttpInfo
     *
     * Get list of items with value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject83|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, string $contentType = self::contentTypes['adminGetItemsValuePointReward'][0])
    {
        $request = $this->adminGetItemsValuePointRewardRequest($project_id, $value_point_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject83',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject83',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject83',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetItemsValuePointRewardAsync
     *
     * Get list of items with value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetItemsValuePointRewardAsync($project_id, $value_point_sku, string $contentType = self::contentTypes['adminGetItemsValuePointReward'][0])
    {
        return $this->adminGetItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetItemsValuePointRewardAsyncWithHttpInfo
     *
     * Get list of items with value points
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, string $contentType = self::contentTypes['adminGetItemsValuePointReward'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject83';
        $request = $this->adminGetItemsValuePointRewardRequest($project_id, $value_point_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetItemsValuePointReward'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetItemsValuePointRewardRequest($project_id, $value_point_sku, string $contentType = self::contentTypes['adminGetItemsValuePointReward'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetItemsValuePointReward'
            );
        }

        // verify the required parameter 'value_point_sku' is set
        if ($value_point_sku === null || (is_array($value_point_sku) && count($value_point_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value_point_sku when calling adminGetItemsValuePointReward'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/{value_point_sku}/value_points/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($value_point_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'value_point_sku' . '}',
                ObjectSerializer::toPathValue($value_point_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetRewardChain
     *
     * Get reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject92|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject93
     */
    public function adminGetRewardChain($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminGetRewardChain'][0])
    {
        list($response) = $this->adminGetRewardChainWithHttpInfo($project_id, $reward_chain_id, $contentType);
        return $response;
    }

    /**
     * Operation adminGetRewardChainWithHttpInfo
     *
     * Get reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject92|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject93, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetRewardChainWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminGetRewardChain'][0])
    {
        $request = $this->adminGetRewardChainRequest($project_id, $reward_chain_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject92',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject93',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject92',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject92',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject93',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetRewardChainAsync
     *
     * Get reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetRewardChainAsync($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminGetRewardChain'][0])
    {
        return $this->adminGetRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetRewardChainAsyncWithHttpInfo
     *
     * Get reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminGetRewardChain'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject92';
        $request = $this->adminGetRewardChainRequest($project_id, $reward_chain_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetRewardChain'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetRewardChainRequest($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminGetRewardChain'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetRewardChain'
            );
        }

        // verify the required parameter 'reward_chain_id' is set
        if ($reward_chain_id === null || (is_array($reward_chain_id) && count($reward_chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reward_chain_id when calling adminGetRewardChain'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($reward_chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reward_chain_id' . '}',
                ObjectSerializer::toPathValue($reward_chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetRewardChains
     *
     * Get list of reward chains
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $enabled Filter elements by &#x60;is_enabled&#x60; flag. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChains'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject90|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetRewardChains($project_id, $limit = null, $offset = null, $enabled = null, string $contentType = self::contentTypes['adminGetRewardChains'][0])
    {
        list($response) = $this->adminGetRewardChainsWithHttpInfo($project_id, $limit, $offset, $enabled, $contentType);
        return $response;
    }

    /**
     * Operation adminGetRewardChainsWithHttpInfo
     *
     * Get list of reward chains
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $enabled Filter elements by &#x60;is_enabled&#x60; flag. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChains'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject90|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetRewardChainsWithHttpInfo($project_id, $limit = null, $offset = null, $enabled = null, string $contentType = self::contentTypes['adminGetRewardChains'][0])
    {
        $request = $this->adminGetRewardChainsRequest($project_id, $limit, $offset, $enabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject90',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject90',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject90',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetRewardChainsAsync
     *
     * Get list of reward chains
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $enabled Filter elements by &#x60;is_enabled&#x60; flag. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetRewardChainsAsync($project_id, $limit = null, $offset = null, $enabled = null, string $contentType = self::contentTypes['adminGetRewardChains'][0])
    {
        return $this->adminGetRewardChainsAsyncWithHttpInfo($project_id, $limit, $offset, $enabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetRewardChainsAsyncWithHttpInfo
     *
     * Get list of reward chains
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $enabled Filter elements by &#x60;is_enabled&#x60; flag. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetRewardChainsAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $enabled = null, string $contentType = self::contentTypes['adminGetRewardChains'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject90';
        $request = $this->adminGetRewardChainsRequest($project_id, $limit, $offset, $enabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetRewardChains'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $enabled Filter elements by &#x60;is_enabled&#x60; flag. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetRewardChains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetRewardChainsRequest($project_id, $limit = null, $offset = null, $enabled = null, string $contentType = self::contentTypes['adminGetRewardChains'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetRewardChains'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RewardChainValuePointsAdminApi.adminGetRewardChains, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling RewardChainValuePointsAdminApi.adminGetRewardChains, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/v2/project/{project_id}/admin/reward_chain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enabled,
            'enabled', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetValuePoint
     *
     * Get value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePoint'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValuePointItemModel|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetValuePoint($project_id, $item_sku, string $contentType = self::contentTypes['adminGetValuePoint'][0])
    {
        list($response) = $this->adminGetValuePointWithHttpInfo($project_id, $item_sku, $contentType);
        return $response;
    }

    /**
     * Operation adminGetValuePointWithHttpInfo
     *
     * Get value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePoint'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValuePointItemModel|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetValuePointWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminGetValuePoint'][0])
    {
        $request = $this->adminGetValuePointRequest($project_id, $item_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValuePointItemModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ValuePointItemModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValuePointItemModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetValuePointAsync
     *
     * Get value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetValuePointAsync($project_id, $item_sku, string $contentType = self::contentTypes['adminGetValuePoint'][0])
    {
        return $this->adminGetValuePointAsyncWithHttpInfo($project_id, $item_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetValuePointAsyncWithHttpInfo
     *
     * Get value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetValuePointAsyncWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminGetValuePoint'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValuePointItemModel';
        $request = $this->adminGetValuePointRequest($project_id, $item_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetValuePoint'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetValuePointRequest($project_id, $item_sku, string $contentType = self::contentTypes['adminGetValuePoint'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetValuePoint'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminGetValuePoint'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/value_points/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetValuePointsList
     *
     * Get list of value points (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePointsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject81|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetValuePointsList($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['adminGetValuePointsList'][0])
    {
        list($response) = $this->adminGetValuePointsListWithHttpInfo($project_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation adminGetValuePointsListWithHttpInfo
     *
     * Get list of value points (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePointsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject81|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetValuePointsListWithHttpInfo($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['adminGetValuePointsList'][0])
    {
        $request = $this->adminGetValuePointsListRequest($project_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject81',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject81',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject81',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetValuePointsListAsync
     *
     * Get list of value points (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePointsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetValuePointsListAsync($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['adminGetValuePointsList'][0])
    {
        return $this->adminGetValuePointsListAsyncWithHttpInfo($project_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetValuePointsListAsyncWithHttpInfo
     *
     * Get list of value points (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePointsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetValuePointsListAsyncWithHttpInfo($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['adminGetValuePointsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject81';
        $request = $this->adminGetValuePointsListRequest($project_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetValuePointsList'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetValuePointsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetValuePointsListRequest($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['adminGetValuePointsList'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetValuePointsList'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RewardChainValuePointsAdminApi.adminGetValuePointsList, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling RewardChainValuePointsAdminApi.adminGetValuePointsList, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/value_points';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminPatchItemsValuePointReward
     *
     * Partially update value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetForPatchInner[]|null $item_value_point_reward_set_for_patch_inner item_value_point_reward_set_for_patch_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminPatchItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminPatchItemsValuePointReward($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner = null, string $contentType = self::contentTypes['adminPatchItemsValuePointReward'][0])
    {
        $this->adminPatchItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner, $contentType);
    }

    /**
     * Operation adminPatchItemsValuePointRewardWithHttpInfo
     *
     * Partially update value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetForPatchInner[]|null $item_value_point_reward_set_for_patch_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminPatchItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminPatchItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner = null, string $contentType = self::contentTypes['adminPatchItemsValuePointReward'][0])
    {
        $request = $this->adminPatchItemsValuePointRewardRequest($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject75',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminPatchItemsValuePointRewardAsync
     *
     * Partially update value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetForPatchInner[]|null $item_value_point_reward_set_for_patch_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminPatchItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminPatchItemsValuePointRewardAsync($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner = null, string $contentType = self::contentTypes['adminPatchItemsValuePointReward'][0])
    {
        return $this->adminPatchItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminPatchItemsValuePointRewardAsyncWithHttpInfo
     *
     * Partially update value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetForPatchInner[]|null $item_value_point_reward_set_for_patch_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminPatchItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminPatchItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner = null, string $contentType = self::contentTypes['adminPatchItemsValuePointReward'][0])
    {
        $returnType = '';
        $request = $this->adminPatchItemsValuePointRewardRequest($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminPatchItemsValuePointReward'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetForPatchInner[]|null $item_value_point_reward_set_for_patch_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminPatchItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminPatchItemsValuePointRewardRequest($project_id, $value_point_sku, $item_value_point_reward_set_for_patch_inner = null, string $contentType = self::contentTypes['adminPatchItemsValuePointReward'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminPatchItemsValuePointReward'
            );
        }

        // verify the required parameter 'value_point_sku' is set
        if ($value_point_sku === null || (is_array($value_point_sku) && count($value_point_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value_point_sku when calling adminPatchItemsValuePointReward'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/{value_point_sku}/value_points/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($value_point_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'value_point_sku' . '}',
                ObjectSerializer::toPathValue($value_point_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($item_value_point_reward_set_for_patch_inner)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($item_value_point_reward_set_for_patch_inner));
            } else {
                $httpBody = $item_value_point_reward_set_for_patch_inner;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminResetRewardChain
     *
     * Reset reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminResetRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminResetRewardChain($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminResetRewardChain'][0])
    {
        $this->adminResetRewardChainWithHttpInfo($project_id, $reward_chain_id, $contentType);
    }

    /**
     * Operation adminResetRewardChainWithHttpInfo
     *
     * Reset reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminResetRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminResetRewardChainWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminResetRewardChain'][0])
    {
        $request = $this->adminResetRewardChainRequest($project_id, $reward_chain_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminResetRewardChainAsync
     *
     * Reset reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminResetRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminResetRewardChainAsync($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminResetRewardChain'][0])
    {
        return $this->adminResetRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminResetRewardChainAsyncWithHttpInfo
     *
     * Reset reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminResetRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminResetRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminResetRewardChain'][0])
    {
        $returnType = '';
        $request = $this->adminResetRewardChainRequest($project_id, $reward_chain_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminResetRewardChain'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminResetRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminResetRewardChainRequest($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminResetRewardChain'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminResetRewardChain'
            );
        }

        // verify the required parameter 'reward_chain_id' is set
        if ($reward_chain_id === null || (is_array($reward_chain_id) && count($reward_chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reward_chain_id when calling adminResetRewardChain'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}/reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($reward_chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reward_chain_id' . '}',
                ObjectSerializer::toPathValue($reward_chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminSetItemsValuePointReward
     *
     * Set value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetInner[]|null $item_value_point_reward_set_inner item_value_point_reward_set_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminSetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminSetItemsValuePointReward($project_id, $value_point_sku, $item_value_point_reward_set_inner = null, string $contentType = self::contentTypes['adminSetItemsValuePointReward'][0])
    {
        $this->adminSetItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_inner, $contentType);
    }

    /**
     * Operation adminSetItemsValuePointRewardWithHttpInfo
     *
     * Set value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetInner[]|null $item_value_point_reward_set_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminSetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminSetItemsValuePointRewardWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_inner = null, string $contentType = self::contentTypes['adminSetItemsValuePointReward'][0])
    {
        $request = $this->adminSetItemsValuePointRewardRequest($project_id, $value_point_sku, $item_value_point_reward_set_inner, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject75',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminSetItemsValuePointRewardAsync
     *
     * Set value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetInner[]|null $item_value_point_reward_set_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminSetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminSetItemsValuePointRewardAsync($project_id, $value_point_sku, $item_value_point_reward_set_inner = null, string $contentType = self::contentTypes['adminSetItemsValuePointReward'][0])
    {
        return $this->adminSetItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_inner, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminSetItemsValuePointRewardAsyncWithHttpInfo
     *
     * Set value points for items
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetInner[]|null $item_value_point_reward_set_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminSetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminSetItemsValuePointRewardAsyncWithHttpInfo($project_id, $value_point_sku, $item_value_point_reward_set_inner = null, string $contentType = self::contentTypes['adminSetItemsValuePointReward'][0])
    {
        $returnType = '';
        $request = $this->adminSetItemsValuePointRewardRequest($project_id, $value_point_sku, $item_value_point_reward_set_inner, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminSetItemsValuePointReward'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $value_point_sku Value Point SKU. (required)
     * @param  \OpenAPI\Client\Model\ItemValuePointRewardSetInner[]|null $item_value_point_reward_set_inner (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminSetItemsValuePointReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminSetItemsValuePointRewardRequest($project_id, $value_point_sku, $item_value_point_reward_set_inner = null, string $contentType = self::contentTypes['adminSetItemsValuePointReward'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminSetItemsValuePointReward'
            );
        }

        // verify the required parameter 'value_point_sku' is set
        if ($value_point_sku === null || (is_array($value_point_sku) && count($value_point_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value_point_sku when calling adminSetItemsValuePointReward'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/{value_point_sku}/value_points/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($value_point_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'value_point_sku' . '}',
                ObjectSerializer::toPathValue($value_point_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($item_value_point_reward_set_inner)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($item_value_point_reward_set_inner));
            } else {
                $httpBody = $item_value_point_reward_set_inner;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminToggleRewardChain
     *
     * Toggle reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminToggleRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminToggleRewardChain($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminToggleRewardChain'][0])
    {
        $this->adminToggleRewardChainWithHttpInfo($project_id, $reward_chain_id, $contentType);
    }

    /**
     * Operation adminToggleRewardChainWithHttpInfo
     *
     * Toggle reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminToggleRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminToggleRewardChainWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminToggleRewardChain'][0])
    {
        $request = $this->adminToggleRewardChainRequest($project_id, $reward_chain_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminToggleRewardChainAsync
     *
     * Toggle reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminToggleRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminToggleRewardChainAsync($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminToggleRewardChain'][0])
    {
        return $this->adminToggleRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminToggleRewardChainAsyncWithHttpInfo
     *
     * Toggle reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminToggleRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminToggleRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminToggleRewardChain'][0])
    {
        $returnType = '';
        $request = $this->adminToggleRewardChainRequest($project_id, $reward_chain_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminToggleRewardChain'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminToggleRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminToggleRewardChainRequest($project_id, $reward_chain_id, string $contentType = self::contentTypes['adminToggleRewardChain'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminToggleRewardChain'
            );
        }

        // verify the required parameter 'reward_chain_id' is set
        if ($reward_chain_id === null || (is_array($reward_chain_id) && count($reward_chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reward_chain_id when calling adminToggleRewardChain'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}/toggle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($reward_chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reward_chain_id' . '}',
                ObjectSerializer::toPathValue($reward_chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUpdateRewardChain
     *
     * Update reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  \OpenAPI\Client\Model\AdminUpdateRewardChainRequest|null $admin_update_reward_chain_request admin_update_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminUpdateRewardChain($project_id, $reward_chain_id, $admin_update_reward_chain_request = null, string $contentType = self::contentTypes['adminUpdateRewardChain'][0])
    {
        $this->adminUpdateRewardChainWithHttpInfo($project_id, $reward_chain_id, $admin_update_reward_chain_request, $contentType);
    }

    /**
     * Operation adminUpdateRewardChainWithHttpInfo
     *
     * Update reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  \OpenAPI\Client\Model\AdminUpdateRewardChainRequest|null $admin_update_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateRewardChain'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUpdateRewardChainWithHttpInfo($project_id, $reward_chain_id, $admin_update_reward_chain_request = null, string $contentType = self::contentTypes['adminUpdateRewardChain'][0])
    {
        $request = $this->adminUpdateRewardChainRequest($project_id, $reward_chain_id, $admin_update_reward_chain_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject93',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Model422RcVpInvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminUpdateRewardChainAsync
     *
     * Update reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  \OpenAPI\Client\Model\AdminUpdateRewardChainRequest|null $admin_update_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateRewardChainAsync($project_id, $reward_chain_id, $admin_update_reward_chain_request = null, string $contentType = self::contentTypes['adminUpdateRewardChain'][0])
    {
        return $this->adminUpdateRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, $admin_update_reward_chain_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUpdateRewardChainAsyncWithHttpInfo
     *
     * Update reward chain
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  \OpenAPI\Client\Model\AdminUpdateRewardChainRequest|null $admin_update_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateRewardChainAsyncWithHttpInfo($project_id, $reward_chain_id, $admin_update_reward_chain_request = null, string $contentType = self::contentTypes['adminUpdateRewardChain'][0])
    {
        $returnType = '';
        $request = $this->adminUpdateRewardChainRequest($project_id, $reward_chain_id, $admin_update_reward_chain_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUpdateRewardChain'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $reward_chain_id Reward chain ID. (required)
     * @param  \OpenAPI\Client\Model\AdminUpdateRewardChainRequest|null $admin_update_reward_chain_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateRewardChain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUpdateRewardChainRequest($project_id, $reward_chain_id, $admin_update_reward_chain_request = null, string $contentType = self::contentTypes['adminUpdateRewardChain'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminUpdateRewardChain'
            );
        }

        // verify the required parameter 'reward_chain_id' is set
        if ($reward_chain_id === null || (is_array($reward_chain_id) && count($reward_chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reward_chain_id when calling adminUpdateRewardChain'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/reward_chain/id/{reward_chain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($reward_chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reward_chain_id' . '}',
                ObjectSerializer::toPathValue($reward_chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_update_reward_chain_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($admin_update_reward_chain_request));
            } else {
                $httpBody = $admin_update_reward_chain_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUpdateValuePoint
     *
     * Update value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateValuePoint'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminUpdateValuePoint($project_id, $item_sku, $admin_value_points_create = null, string $contentType = self::contentTypes['adminUpdateValuePoint'][0])
    {
        $this->adminUpdateValuePointWithHttpInfo($project_id, $item_sku, $admin_value_points_create, $contentType);
    }

    /**
     * Operation adminUpdateValuePointWithHttpInfo
     *
     * Update value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateValuePoint'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUpdateValuePointWithHttpInfo($project_id, $item_sku, $admin_value_points_create = null, string $contentType = self::contentTypes['adminUpdateValuePoint'][0])
    {
        $request = $this->adminUpdateValuePointRequest($project_id, $item_sku, $admin_value_points_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Model422RcVpInvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminUpdateValuePointAsync
     *
     * Update value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateValuePointAsync($project_id, $item_sku, $admin_value_points_create = null, string $contentType = self::contentTypes['adminUpdateValuePoint'][0])
    {
        return $this->adminUpdateValuePointAsyncWithHttpInfo($project_id, $item_sku, $admin_value_points_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUpdateValuePointAsyncWithHttpInfo
     *
     * Update value point
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateValuePointAsyncWithHttpInfo($project_id, $item_sku, $admin_value_points_create = null, string $contentType = self::contentTypes['adminUpdateValuePoint'][0])
    {
        $returnType = '';
        $request = $this->adminUpdateValuePointRequest($project_id, $item_sku, $admin_value_points_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUpdateValuePoint'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AdminValuePointsCreate|null $admin_value_points_create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateValuePoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUpdateValuePointRequest($project_id, $item_sku, $admin_value_points_create = null, string $contentType = self::contentTypes['adminUpdateValuePoint'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminUpdateValuePoint'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminUpdateValuePoint'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/value_points/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_value_points_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($admin_value_points_create));
            } else {
                $httpBody = $admin_value_points_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
