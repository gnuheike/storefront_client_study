<?php
/**
 * VirtualItemsCurrencyAdminApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VirtualItemsCurrencyAdminApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VirtualItemsCurrencyAdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminCreateVirtualCurrency' => [
            'application/json',
        ],
        'adminCreateVirtualCurrencyPackage' => [
            'application/json',
        ],
        'adminCreateVirtualItem' => [
            'application/json',
        ],
        'adminDeleteVirtualCurrency' => [
            'application/json',
        ],
        'adminDeleteVirtualCurrencyPackage' => [
            'application/json',
        ],
        'adminDeleteVirtualItem' => [
            'application/json',
        ],
        'adminGetVirtualCurrenciesList' => [
            'application/json',
        ],
        'adminGetVirtualCurrency' => [
            'application/json',
        ],
        'adminGetVirtualCurrencyPackage' => [
            'application/json',
        ],
        'adminGetVirtualCurrencyPackagesList' => [
            'application/json',
        ],
        'adminGetVirtualItem' => [
            'application/json',
        ],
        'adminGetVirtualItemsList' => [
            'application/json',
        ],
        'adminGetVirtualItemsListByGroupExternalId' => [
            'application/json',
        ],
        'adminGetVirtualItemsListByGroupId' => [
            'application/json',
        ],
        'adminUpdateVirtualCurrency' => [
            'application/json',
        ],
        'adminUpdateVirtualCurrencyPackage' => [
            'application/json',
        ],
        'adminUpdateVirtualItem' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminCreateVirtualCurrency
     *
     * Create virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject64|\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest
     */
    public function adminCreateVirtualCurrency($project_id, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminCreateVirtualCurrency'][0])
    {
        list($response) = $this->adminCreateVirtualCurrencyWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateVirtualCurrencyWithHttpInfo
     *
     * Create virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject64|\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateVirtualCurrencyWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminCreateVirtualCurrency'][0])
    {
        $request = $this->adminCreateVirtualCurrencyRequest($project_id, $virtual_items_currency_admin_create_virtual_currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject64',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject64',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject64',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateVirtualCurrencyAsync
     *
     * Create virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateVirtualCurrencyAsync($project_id, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminCreateVirtualCurrency'][0])
    {
        return $this->adminCreateVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateVirtualCurrencyAsyncWithHttpInfo
     *
     * Create virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminCreateVirtualCurrency'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject64';
        $request = $this->adminCreateVirtualCurrencyRequest($project_id, $virtual_items_currency_admin_create_virtual_currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateVirtualCurrency'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateVirtualCurrencyRequest($project_id, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminCreateVirtualCurrency'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateVirtualCurrency'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($virtual_items_currency_admin_create_virtual_currency)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($virtual_items_currency_admin_create_virtual_currency));
            } else {
                $httpBody = $virtual_items_currency_admin_create_virtual_currency;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminCreateVirtualCurrencyPackage
     *
     * Create virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject64|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest
     */
    public function adminCreateVirtualCurrencyPackage($project_id, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminCreateVirtualCurrencyPackage'][0])
    {
        list($response) = $this->adminCreateVirtualCurrencyPackageWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency_package, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateVirtualCurrencyPackageWithHttpInfo
     *
     * Create virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject64|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateVirtualCurrencyPackageWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminCreateVirtualCurrencyPackage'][0])
    {
        $request = $this->adminCreateVirtualCurrencyPackageRequest($project_id, $virtual_items_currency_admin_create_virtual_currency_package, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject64',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject64',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject64',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateVirtualCurrencyPackageAsync
     *
     * Create virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateVirtualCurrencyPackageAsync($project_id, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminCreateVirtualCurrencyPackage'][0])
    {
        return $this->adminCreateVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency_package, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateVirtualCurrencyPackageAsyncWithHttpInfo
     *
     * Create virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminCreateVirtualCurrencyPackage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject64';
        $request = $this->adminCreateVirtualCurrencyPackageRequest($project_id, $virtual_items_currency_admin_create_virtual_currency_package, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateVirtualCurrencyPackage'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateVirtualCurrencyPackageRequest($project_id, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminCreateVirtualCurrencyPackage'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateVirtualCurrencyPackage'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($virtual_items_currency_admin_create_virtual_currency_package)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($virtual_items_currency_admin_create_virtual_currency_package));
            } else {
                $httpBody = $virtual_items_currency_admin_create_virtual_currency_package;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminCreateVirtualItem
     *
     * Create virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject64|\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest
     */
    public function adminCreateVirtualItem($project_id, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminCreateVirtualItem'][0])
    {
        list($response) = $this->adminCreateVirtualItemWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_item, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateVirtualItemWithHttpInfo
     *
     * Create virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject64|\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateVirtualItemWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminCreateVirtualItem'][0])
    {
        $request = $this->adminCreateVirtualItemRequest($project_id, $virtual_items_currency_admin_create_virtual_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject64',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject64',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject64',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateVirtualItemAsync
     *
     * Create virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateVirtualItemAsync($project_id, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminCreateVirtualItem'][0])
    {
        return $this->adminCreateVirtualItemAsyncWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateVirtualItemAsyncWithHttpInfo
     *
     * Create virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateVirtualItemAsyncWithHttpInfo($project_id, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminCreateVirtualItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject64';
        $request = $this->adminCreateVirtualItemRequest($project_id, $virtual_items_currency_admin_create_virtual_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateVirtualItem'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateVirtualItemRequest($project_id, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminCreateVirtualItem'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateVirtualItem'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($virtual_items_currency_admin_create_virtual_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($virtual_items_currency_admin_create_virtual_item));
            } else {
                $httpBody = $virtual_items_currency_admin_create_virtual_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminDeleteVirtualCurrency
     *
     * Delete virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminDeleteVirtualCurrency($project_id, $virtual_currency_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrency'][0])
    {
        $this->adminDeleteVirtualCurrencyWithHttpInfo($project_id, $virtual_currency_sku, $contentType);
    }

    /**
     * Operation adminDeleteVirtualCurrencyWithHttpInfo
     *
     * Delete virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminDeleteVirtualCurrencyWithHttpInfo($project_id, $virtual_currency_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrency'][0])
    {
        $request = $this->adminDeleteVirtualCurrencyRequest($project_id, $virtual_currency_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminDeleteVirtualCurrencyAsync
     *
     * Delete virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteVirtualCurrencyAsync($project_id, $virtual_currency_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrency'][0])
    {
        return $this->adminDeleteVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_currency_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminDeleteVirtualCurrencyAsyncWithHttpInfo
     *
     * Delete virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_currency_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrency'][0])
    {
        $returnType = '';
        $request = $this->adminDeleteVirtualCurrencyRequest($project_id, $virtual_currency_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminDeleteVirtualCurrency'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminDeleteVirtualCurrencyRequest($project_id, $virtual_currency_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrency'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminDeleteVirtualCurrency'
            );
        }

        // verify the required parameter 'virtual_currency_sku' is set
        if ($virtual_currency_sku === null || (is_array($virtual_currency_sku) && count($virtual_currency_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_currency_sku when calling adminDeleteVirtualCurrency'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/sku/{virtual_currency_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_currency_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'virtual_currency_sku' . '}',
                ObjectSerializer::toPathValue($virtual_currency_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminDeleteVirtualCurrencyPackage
     *
     * Delete virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminDeleteVirtualCurrencyPackage($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrencyPackage'][0])
    {
        $this->adminDeleteVirtualCurrencyPackageWithHttpInfo($project_id, $item_sku, $contentType);
    }

    /**
     * Operation adminDeleteVirtualCurrencyPackageWithHttpInfo
     *
     * Delete virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminDeleteVirtualCurrencyPackageWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrencyPackage'][0])
    {
        $request = $this->adminDeleteVirtualCurrencyPackageRequest($project_id, $item_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminDeleteVirtualCurrencyPackageAsync
     *
     * Delete virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteVirtualCurrencyPackageAsync($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrencyPackage'][0])
    {
        return $this->adminDeleteVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $item_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminDeleteVirtualCurrencyPackageAsyncWithHttpInfo
     *
     * Delete virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrencyPackage'][0])
    {
        $returnType = '';
        $request = $this->adminDeleteVirtualCurrencyPackageRequest($project_id, $item_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminDeleteVirtualCurrencyPackage'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminDeleteVirtualCurrencyPackageRequest($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualCurrencyPackage'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminDeleteVirtualCurrencyPackage'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminDeleteVirtualCurrencyPackage'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/package/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminDeleteVirtualItem
     *
     * Delete virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminDeleteVirtualItem($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualItem'][0])
    {
        $this->adminDeleteVirtualItemWithHttpInfo($project_id, $item_sku, $contentType);
    }

    /**
     * Operation adminDeleteVirtualItemWithHttpInfo
     *
     * Delete virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminDeleteVirtualItemWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualItem'][0])
    {
        $request = $this->adminDeleteVirtualItemRequest($project_id, $item_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminDeleteVirtualItemAsync
     *
     * Delete virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteVirtualItemAsync($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualItem'][0])
    {
        return $this->adminDeleteVirtualItemAsyncWithHttpInfo($project_id, $item_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminDeleteVirtualItemAsyncWithHttpInfo
     *
     * Delete virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminDeleteVirtualItemAsyncWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualItem'][0])
    {
        $returnType = '';
        $request = $this->adminDeleteVirtualItemRequest($project_id, $item_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminDeleteVirtualItem'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminDeleteVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminDeleteVirtualItemRequest($project_id, $item_sku, string $contentType = self::contentTypes['adminDeleteVirtualItem'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminDeleteVirtualItem'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminDeleteVirtualItem'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualCurrenciesList
     *
     * Get list of virtual currencies (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrenciesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject65|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualCurrenciesList($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrenciesList'][0])
    {
        list($response) = $this->adminGetVirtualCurrenciesListWithHttpInfo($project_id, $limit, $offset, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualCurrenciesListWithHttpInfo
     *
     * Get list of virtual currencies (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrenciesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject65|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualCurrenciesListWithHttpInfo($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrenciesList'][0])
    {
        $request = $this->adminGetVirtualCurrenciesListRequest($project_id, $limit, $offset, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject65',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject65',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject65',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualCurrenciesListAsync
     *
     * Get list of virtual currencies (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrenciesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrenciesListAsync($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrenciesList'][0])
    {
        return $this->adminGetVirtualCurrenciesListAsyncWithHttpInfo($project_id, $limit, $offset, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualCurrenciesListAsyncWithHttpInfo
     *
     * Get list of virtual currencies (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrenciesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrenciesListAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrenciesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject65';
        $request = $this->adminGetVirtualCurrenciesListRequest($project_id, $limit, $offset, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualCurrenciesList'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrenciesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualCurrenciesListRequest($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrenciesList'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualCurrenciesList'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrenciesList, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrenciesList, must be bigger than or equal to 0.');
        }
        
        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrenciesList, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrenciesList, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualCurrency
     *
     * Get virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrency|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject12
     */
    public function adminGetVirtualCurrency($project_id, $virtual_currency_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrency'][0])
    {
        list($response) = $this->adminGetVirtualCurrencyWithHttpInfo($project_id, $virtual_currency_sku, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualCurrencyWithHttpInfo
     *
     * Get virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrency|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject12, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualCurrencyWithHttpInfo($project_id, $virtual_currency_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrency'][0])
    {
        $request = $this->adminGetVirtualCurrencyRequest($project_id, $virtual_currency_sku, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrency',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject12',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrency',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject12',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualCurrencyAsync
     *
     * Get virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrencyAsync($project_id, $virtual_currency_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrency'][0])
    {
        return $this->adminGetVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_currency_sku, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualCurrencyAsyncWithHttpInfo
     *
     * Get virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_currency_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrency'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrency';
        $request = $this->adminGetVirtualCurrencyRequest($project_id, $virtual_currency_sku, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualCurrency'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualCurrencyRequest($project_id, $virtual_currency_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrency'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualCurrency'
            );
        }

        // verify the required parameter 'virtual_currency_sku' is set
        if ($virtual_currency_sku === null || (is_array($virtual_currency_sku) && count($virtual_currency_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_currency_sku when calling adminGetVirtualCurrency'
            );
        }

        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrency, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrency, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/sku/{virtual_currency_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_currency_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'virtual_currency_sku' . '}',
                ObjectSerializer::toPathValue($virtual_currency_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualCurrencyPackage
     *
     * Get virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrencyPackage|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualCurrencyPackage($project_id, $item_sku, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackage'][0])
    {
        list($response) = $this->adminGetVirtualCurrencyPackageWithHttpInfo($project_id, $item_sku, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualCurrencyPackageWithHttpInfo
     *
     * Get virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrencyPackage|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualCurrencyPackageWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackage'][0])
    {
        $request = $this->adminGetVirtualCurrencyPackageRequest($project_id, $item_sku, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrencyPackage',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrencyPackage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrencyPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualCurrencyPackageAsync
     *
     * Get virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrencyPackageAsync($project_id, $item_sku, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackage'][0])
    {
        return $this->adminGetVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $item_sku, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualCurrencyPackageAsyncWithHttpInfo
     *
     * Get virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $item_sku, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualCurrencyPackage';
        $request = $this->adminGetVirtualCurrencyPackageRequest($project_id, $item_sku, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualCurrencyPackage'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualCurrencyPackageRequest($project_id, $item_sku, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackage'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualCurrencyPackage'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminGetVirtualCurrencyPackage'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/package/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualCurrencyPackagesList
     *
     * Get list of virtual currency packages (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackagesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject66|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualCurrencyPackagesList($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackagesList'][0])
    {
        list($response) = $this->adminGetVirtualCurrencyPackagesListWithHttpInfo($project_id, $limit, $offset, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualCurrencyPackagesListWithHttpInfo
     *
     * Get list of virtual currency packages (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackagesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject66|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualCurrencyPackagesListWithHttpInfo($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackagesList'][0])
    {
        $request = $this->adminGetVirtualCurrencyPackagesListRequest($project_id, $limit, $offset, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject66',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject66',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject66',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualCurrencyPackagesListAsync
     *
     * Get list of virtual currency packages (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackagesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrencyPackagesListAsync($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackagesList'][0])
    {
        return $this->adminGetVirtualCurrencyPackagesListAsyncWithHttpInfo($project_id, $limit, $offset, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualCurrencyPackagesListAsyncWithHttpInfo
     *
     * Get list of virtual currency packages (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackagesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualCurrencyPackagesListAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackagesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject66';
        $request = $this->adminGetVirtualCurrencyPackagesListRequest($project_id, $limit, $offset, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualCurrencyPackagesList'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualCurrencyPackagesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualCurrencyPackagesListRequest($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualCurrencyPackagesList'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualCurrencyPackagesList'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrencyPackagesList, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrencyPackagesList, must be bigger than or equal to 0.');
        }
        
        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrencyPackagesList, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualCurrencyPackagesList, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualItem
     *
     * Get virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualItem|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualItem($project_id, $item_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItem'][0])
    {
        list($response) = $this->adminGetVirtualItemWithHttpInfo($project_id, $item_sku, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualItemWithHttpInfo
     *
     * Get virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualItem|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualItemWithHttpInfo($project_id, $item_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItem'][0])
    {
        $request = $this->adminGetVirtualItemRequest($project_id, $item_sku, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualItem',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualItem',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualItemAsync
     *
     * Get virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemAsync($project_id, $item_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItem'][0])
    {
        return $this->adminGetVirtualItemAsyncWithHttpInfo($project_id, $item_sku, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualItemAsyncWithHttpInfo
     *
     * Get virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemAsyncWithHttpInfo($project_id, $item_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminVirtualItem';
        $request = $this->adminGetVirtualItemRequest($project_id, $item_sku, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualItem'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualItemRequest($project_id, $item_sku, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItem'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualItem'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminGetVirtualItem'
            );
        }

        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItem, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItem, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualItemsList
     *
     * Get list of virtual items (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject63|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualItemsList($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsList'][0])
    {
        list($response) = $this->adminGetVirtualItemsListWithHttpInfo($project_id, $limit, $offset, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualItemsListWithHttpInfo
     *
     * Get list of virtual items (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject63|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualItemsListWithHttpInfo($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsList'][0])
    {
        $request = $this->adminGetVirtualItemsListRequest($project_id, $limit, $offset, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject63',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject63',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject63',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualItemsListAsync
     *
     * Get list of virtual items (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemsListAsync($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsList'][0])
    {
        return $this->adminGetVirtualItemsListAsyncWithHttpInfo($project_id, $limit, $offset, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualItemsListAsyncWithHttpInfo
     *
     * Get list of virtual items (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemsListAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject63';
        $request = $this->adminGetVirtualItemsListRequest($project_id, $limit, $offset, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualItemsList'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualItemsListRequest($project_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsList'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualItemsList'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsList, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsList, must be bigger than or equal to 0.');
        }
        
        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsList, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsList, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualItemsListByGroupExternalId
     *
     * Get list of virtual items by specified group external id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupExternalId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject63|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualItemsListByGroupExternalId($project_id, $external_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupExternalId'][0])
    {
        list($response) = $this->adminGetVirtualItemsListByGroupExternalIdWithHttpInfo($project_id, $external_id, $limit, $offset, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualItemsListByGroupExternalIdWithHttpInfo
     *
     * Get list of virtual items by specified group external id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupExternalId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject63|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualItemsListByGroupExternalIdWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupExternalId'][0])
    {
        $request = $this->adminGetVirtualItemsListByGroupExternalIdRequest($project_id, $external_id, $limit, $offset, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject63',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject63',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject63',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualItemsListByGroupExternalIdAsync
     *
     * Get list of virtual items by specified group external id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupExternalId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemsListByGroupExternalIdAsync($project_id, $external_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupExternalId'][0])
    {
        return $this->adminGetVirtualItemsListByGroupExternalIdAsyncWithHttpInfo($project_id, $external_id, $limit, $offset, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualItemsListByGroupExternalIdAsyncWithHttpInfo
     *
     * Get list of virtual items by specified group external id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupExternalId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemsListByGroupExternalIdAsyncWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupExternalId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject63';
        $request = $this->adminGetVirtualItemsListByGroupExternalIdRequest($project_id, $external_id, $limit, $offset, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualItemsListByGroupExternalId'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupExternalId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualItemsListByGroupExternalIdRequest($project_id, $external_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupExternalId'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualItemsListByGroupExternalId'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling adminGetVirtualItemsListByGroupExternalId'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupExternalId, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupExternalId, must be bigger than or equal to 0.');
        }
        
        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupExternalId, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupExternalId, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items/group/external_id/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminGetVirtualItemsListByGroupId
     *
     * Get list of virtual items by specified group id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $group_id Group ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject63|\OpenAPI\Client\Model\InlineObject1
     */
    public function adminGetVirtualItemsListByGroupId($project_id, $group_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupId'][0])
    {
        list($response) = $this->adminGetVirtualItemsListByGroupIdWithHttpInfo($project_id, $group_id, $limit, $offset, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation adminGetVirtualItemsListByGroupIdWithHttpInfo
     *
     * Get list of virtual items by specified group id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $group_id Group ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject63|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminGetVirtualItemsListByGroupIdWithHttpInfo($project_id, $group_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupId'][0])
    {
        $request = $this->adminGetVirtualItemsListByGroupIdRequest($project_id, $group_id, $limit, $offset, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject63',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject63',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject63',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminGetVirtualItemsListByGroupIdAsync
     *
     * Get list of virtual items by specified group id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $group_id Group ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemsListByGroupIdAsync($project_id, $group_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupId'][0])
    {
        return $this->adminGetVirtualItemsListByGroupIdAsyncWithHttpInfo($project_id, $group_id, $limit, $offset, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminGetVirtualItemsListByGroupIdAsyncWithHttpInfo
     *
     * Get list of virtual items by specified group id
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $group_id Group ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminGetVirtualItemsListByGroupIdAsyncWithHttpInfo($project_id, $group_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject63';
        $request = $this->adminGetVirtualItemsListByGroupIdRequest($project_id, $group_id, $limit, $offset, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminGetVirtualItemsListByGroupId'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $group_id Group ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminGetVirtualItemsListByGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminGetVirtualItemsListByGroupIdRequest($project_id, $group_id, $limit = null, $offset = null, $promo_code = null, string $contentType = self::contentTypes['adminGetVirtualItemsListByGroupId'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminGetVirtualItemsListByGroupId'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminGetVirtualItemsListByGroupId'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupId, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupId, must be bigger than or equal to 0.');
        }
        
        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupId, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminGetVirtualItemsListByGroupId, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items/group/id/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUpdateVirtualCurrency
     *
     * Update virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminUpdateVirtualCurrency($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrency'][0])
    {
        $this->adminUpdateVirtualCurrencyWithHttpInfo($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency, $contentType);
    }

    /**
     * Operation adminUpdateVirtualCurrencyWithHttpInfo
     *
     * Update virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUpdateVirtualCurrencyWithHttpInfo($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrency'][0])
    {
        $request = $this->adminUpdateVirtualCurrencyRequest($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminUpdateVirtualCurrencyAsync
     *
     * Update virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateVirtualCurrencyAsync($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrency'][0])
    {
        return $this->adminUpdateVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUpdateVirtualCurrencyAsyncWithHttpInfo
     *
     * Update virtual currency
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateVirtualCurrencyAsyncWithHttpInfo($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrency'][0])
    {
        $returnType = '';
        $request = $this->adminUpdateVirtualCurrencyRequest($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUpdateVirtualCurrency'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrency|null $virtual_items_currency_admin_create_virtual_currency (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUpdateVirtualCurrencyRequest($project_id, $virtual_currency_sku, $virtual_items_currency_admin_create_virtual_currency = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrency'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminUpdateVirtualCurrency'
            );
        }

        // verify the required parameter 'virtual_currency_sku' is set
        if ($virtual_currency_sku === null || (is_array($virtual_currency_sku) && count($virtual_currency_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_currency_sku when calling adminUpdateVirtualCurrency'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/sku/{virtual_currency_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_currency_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'virtual_currency_sku' . '}',
                ObjectSerializer::toPathValue($virtual_currency_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($virtual_items_currency_admin_create_virtual_currency)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($virtual_items_currency_admin_create_virtual_currency));
            } else {
                $httpBody = $virtual_items_currency_admin_create_virtual_currency;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUpdateVirtualCurrencyPackage
     *
     * Update virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminUpdateVirtualCurrencyPackage($project_id, $item_sku, $promo_code = null, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrencyPackage'][0])
    {
        $this->adminUpdateVirtualCurrencyPackageWithHttpInfo($project_id, $item_sku, $promo_code, $virtual_items_currency_admin_create_virtual_currency_package, $contentType);
    }

    /**
     * Operation adminUpdateVirtualCurrencyPackageWithHttpInfo
     *
     * Update virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUpdateVirtualCurrencyPackageWithHttpInfo($project_id, $item_sku, $promo_code = null, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrencyPackage'][0])
    {
        $request = $this->adminUpdateVirtualCurrencyPackageRequest($project_id, $item_sku, $promo_code, $virtual_items_currency_admin_create_virtual_currency_package, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminUpdateVirtualCurrencyPackageAsync
     *
     * Update virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateVirtualCurrencyPackageAsync($project_id, $item_sku, $promo_code = null, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrencyPackage'][0])
    {
        return $this->adminUpdateVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $item_sku, $promo_code, $virtual_items_currency_admin_create_virtual_currency_package, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUpdateVirtualCurrencyPackageAsyncWithHttpInfo
     *
     * Update virtual currency package
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $item_sku, $promo_code = null, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrencyPackage'][0])
    {
        $returnType = '';
        $request = $this->adminUpdateVirtualCurrencyPackageRequest($project_id, $item_sku, $promo_code, $virtual_items_currency_admin_create_virtual_currency_package, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUpdateVirtualCurrencyPackage'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualCurrencyPackage|null $virtual_items_currency_admin_create_virtual_currency_package (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUpdateVirtualCurrencyPackageRequest($project_id, $item_sku, $promo_code = null, $virtual_items_currency_admin_create_virtual_currency_package = null, string $contentType = self::contentTypes['adminUpdateVirtualCurrencyPackage'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminUpdateVirtualCurrencyPackage'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminUpdateVirtualCurrencyPackage'
            );
        }

        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminUpdateVirtualCurrencyPackage, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyAdminApi.adminUpdateVirtualCurrencyPackage, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_currency/package/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($virtual_items_currency_admin_create_virtual_currency_package)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($virtual_items_currency_admin_create_virtual_currency_package));
            } else {
                $httpBody = $virtual_items_currency_admin_create_virtual_currency_package;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUpdateVirtualItem
     *
     * Update virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminUpdateVirtualItem($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminUpdateVirtualItem'][0])
    {
        $this->adminUpdateVirtualItemWithHttpInfo($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item, $contentType);
    }

    /**
     * Operation adminUpdateVirtualItemWithHttpInfo
     *
     * Update virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUpdateVirtualItemWithHttpInfo($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminUpdateVirtualItem'][0])
    {
        $request = $this->adminUpdateVirtualItemRequest($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrency422InvalidRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminUpdateVirtualItemAsync
     *
     * Update virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateVirtualItemAsync($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminUpdateVirtualItem'][0])
    {
        return $this->adminUpdateVirtualItemAsyncWithHttpInfo($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUpdateVirtualItemAsyncWithHttpInfo
     *
     * Update virtual item
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUpdateVirtualItemAsyncWithHttpInfo($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminUpdateVirtualItem'][0])
    {
        $returnType = '';
        $request = $this->adminUpdateVirtualItemRequest($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUpdateVirtualItem'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVirtualItem|null $virtual_items_currency_admin_create_virtual_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUpdateVirtualItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUpdateVirtualItemRequest($project_id, $item_sku, $virtual_items_currency_admin_create_virtual_item = null, string $contentType = self::contentTypes['adminUpdateVirtualItem'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminUpdateVirtualItem'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling adminUpdateVirtualItem'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/items/virtual_items/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($virtual_items_currency_admin_create_virtual_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($virtual_items_currency_admin_create_virtual_item));
            } else {
                $httpBody = $virtual_items_currency_admin_create_virtual_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
