<?php
/**
 * GetGameKeyBySku200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetGameKeyBySku200Response Class Doc Comment
 *
 * @category Class
 * @description Object with game key information.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetGameKeyBySku200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_game_key_by_sku_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku' => 'string',
        'name' => 'string',
        'groups' => '\OpenAPI\Client\Model\GetGameBySku200ResponseGroupsInner[]',
        'attributes' => '\OpenAPI\Client\Model\BundlesClientAttributesInner[]',
        'type' => 'string',
        'description' => 'string',
        'image_url' => 'string',
        'is_free' => 'bool',
        'price' => '\OpenAPI\Client\Model\GetGameBySku200ResponseUnitItemsInnerPrice',
        'virtual_prices' => '\OpenAPI\Client\Model\GetGameKeyBySku200ResponseVirtualPricesInner[]',
        'can_be_bought' => 'bool',
        'drm_name' => 'string',
        'drm_sku' => 'string',
        'has_keys' => 'bool',
        'is_pre_order' => 'bool',
        'release_date' => 'string',
        'promotions' => '\OpenAPI\Client\Model\CatalogItemPromotionsInner[]',
        'limits' => '\OpenAPI\Client\Model\CatalogItemLimits',
        'periods' => '\OpenAPI\Client\Model\ItemPeriodsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku' => null,
        'name' => null,
        'groups' => null,
        'attributes' => null,
        'type' => null,
        'description' => null,
        'image_url' => null,
        'is_free' => null,
        'price' => null,
        'virtual_prices' => null,
        'can_be_bought' => null,
        'drm_name' => null,
        'drm_sku' => null,
        'has_keys' => null,
        'is_pre_order' => null,
        'release_date' => null,
        'promotions' => null,
        'limits' => null,
        'periods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sku' => false,
        'name' => false,
        'groups' => false,
        'attributes' => false,
        'type' => false,
        'description' => false,
        'image_url' => false,
        'is_free' => false,
        'price' => false,
        'virtual_prices' => false,
        'can_be_bought' => false,
        'drm_name' => false,
        'drm_sku' => false,
        'has_keys' => false,
        'is_pre_order' => false,
        'release_date' => false,
        'promotions' => false,
        'limits' => true,
        'periods' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'name' => 'name',
        'groups' => 'groups',
        'attributes' => 'attributes',
        'type' => 'type',
        'description' => 'description',
        'image_url' => 'image_url',
        'is_free' => 'is_free',
        'price' => 'price',
        'virtual_prices' => 'virtual_prices',
        'can_be_bought' => 'can_be_bought',
        'drm_name' => 'drm_name',
        'drm_sku' => 'drm_sku',
        'has_keys' => 'has_keys',
        'is_pre_order' => 'is_pre_order',
        'release_date' => 'release_date',
        'promotions' => 'promotions',
        'limits' => 'limits',
        'periods' => 'periods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'name' => 'setName',
        'groups' => 'setGroups',
        'attributes' => 'setAttributes',
        'type' => 'setType',
        'description' => 'setDescription',
        'image_url' => 'setImageUrl',
        'is_free' => 'setIsFree',
        'price' => 'setPrice',
        'virtual_prices' => 'setVirtualPrices',
        'can_be_bought' => 'setCanBeBought',
        'drm_name' => 'setDrmName',
        'drm_sku' => 'setDrmSku',
        'has_keys' => 'setHasKeys',
        'is_pre_order' => 'setIsPreOrder',
        'release_date' => 'setReleaseDate',
        'promotions' => 'setPromotions',
        'limits' => 'setLimits',
        'periods' => 'setPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'name' => 'getName',
        'groups' => 'getGroups',
        'attributes' => 'getAttributes',
        'type' => 'getType',
        'description' => 'getDescription',
        'image_url' => 'getImageUrl',
        'is_free' => 'getIsFree',
        'price' => 'getPrice',
        'virtual_prices' => 'getVirtualPrices',
        'can_be_bought' => 'getCanBeBought',
        'drm_name' => 'getDrmName',
        'drm_sku' => 'getDrmSku',
        'has_keys' => 'getHasKeys',
        'is_pre_order' => 'getIsPreOrder',
        'release_date' => 'getReleaseDate',
        'promotions' => 'getPromotions',
        'limits' => 'getLimits',
        'periods' => 'getPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('is_free', $data ?? [], false);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('virtual_prices', $data ?? [], null);
        $this->setIfExists('can_be_bought', $data ?? [], null);
        $this->setIfExists('drm_name', $data ?? [], null);
        $this->setIfExists('drm_sku', $data ?? [], null);
        $this->setIfExists('has_keys', $data ?? [], null);
        $this->setIfExists('is_pre_order', $data ?? [], null);
        $this->setIfExists('release_date', $data ?? [], null);
        $this->setIfExists('promotions', $data ?? [], null);
        $this->setIfExists('limits', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Unique item ID. The SKU may contain only lowercase and uppercase Latin alphanumeric characters, periods, dashes, and underscores.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Item name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \OpenAPI\Client\Model\GetGameBySku200ResponseGroupsInner[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \OpenAPI\Client\Model\GetGameBySku200ResponseGroupsInner[]|null $groups Groups the item belongs to.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\BundlesClientAttributesInner[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\BundlesClientAttributesInner[]|null $attributes List of attributes and their values corresponding to the item. Can be used for catalog filtering.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of item: `game_key`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Item description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url Image URL.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets is_free
     *
     * @return bool|null
     */
    public function getIsFree()
    {
        return $this->container['is_free'];
    }

    /**
     * Sets is_free
     *
     * @param bool|null $is_free If `true`, the item is free.
     *
     * @return self
     */
    public function setIsFree($is_free)
    {
        if (is_null($is_free)) {
            throw new \InvalidArgumentException('non-nullable is_free cannot be null');
        }
        $this->container['is_free'] = $is_free;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\GetGameBySku200ResponseUnitItemsInnerPrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\GetGameBySku200ResponseUnitItemsInnerPrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets virtual_prices
     *
     * @return \OpenAPI\Client\Model\GetGameKeyBySku200ResponseVirtualPricesInner[]|null
     */
    public function getVirtualPrices()
    {
        return $this->container['virtual_prices'];
    }

    /**
     * Sets virtual_prices
     *
     * @param \OpenAPI\Client\Model\GetGameKeyBySku200ResponseVirtualPricesInner[]|null $virtual_prices Virtual prices.
     *
     * @return self
     */
    public function setVirtualPrices($virtual_prices)
    {
        if (is_null($virtual_prices)) {
            throw new \InvalidArgumentException('non-nullable virtual_prices cannot be null');
        }
        $this->container['virtual_prices'] = $virtual_prices;

        return $this;
    }

    /**
     * Gets can_be_bought
     *
     * @return bool|null
     */
    public function getCanBeBought()
    {
        return $this->container['can_be_bought'];
    }

    /**
     * Sets can_be_bought
     *
     * @param bool|null $can_be_bought If `true`, the user can buy an item.
     *
     * @return self
     */
    public function setCanBeBought($can_be_bought)
    {
        if (is_null($can_be_bought)) {
            throw new \InvalidArgumentException('non-nullable can_be_bought cannot be null');
        }
        $this->container['can_be_bought'] = $can_be_bought;

        return $this;
    }

    /**
     * Gets drm_name
     *
     * @return string|null
     */
    public function getDrmName()
    {
        return $this->container['drm_name'];
    }

    /**
     * Sets drm_name
     *
     * @param string|null $drm_name DRM name.
     *
     * @return self
     */
    public function setDrmName($drm_name)
    {
        if (is_null($drm_name)) {
            throw new \InvalidArgumentException('non-nullable drm_name cannot be null');
        }
        $this->container['drm_name'] = $drm_name;

        return $this;
    }

    /**
     * Gets drm_sku
     *
     * @return string|null
     */
    public function getDrmSku()
    {
        return $this->container['drm_sku'];
    }

    /**
     * Sets drm_sku
     *
     * @param string|null $drm_sku Unique DRM ID. The SKU may contain only lowercase and uppercase Latin alphanumeric characters, periods, dashes, and underscores.
     *
     * @return self
     */
    public function setDrmSku($drm_sku)
    {
        if (is_null($drm_sku)) {
            throw new \InvalidArgumentException('non-nullable drm_sku cannot be null');
        }
        $this->container['drm_sku'] = $drm_sku;

        return $this;
    }

    /**
     * Gets has_keys
     *
     * @return bool|null
     */
    public function getHasKeys()
    {
        return $this->container['has_keys'];
    }

    /**
     * Sets has_keys
     *
     * @param bool|null $has_keys If `true`, the game key has keys for sale.
     *
     * @return self
     */
    public function setHasKeys($has_keys)
    {
        if (is_null($has_keys)) {
            throw new \InvalidArgumentException('non-nullable has_keys cannot be null');
        }
        $this->container['has_keys'] = $has_keys;

        return $this;
    }

    /**
     * Gets is_pre_order
     *
     * @return bool|null
     */
    public function getIsPreOrder()
    {
        return $this->container['is_pre_order'];
    }

    /**
     * Sets is_pre_order
     *
     * @param bool|null $is_pre_order If `true`, the game key is pre-order and the release date hasn't passed.
     *
     * @return self
     */
    public function setIsPreOrder($is_pre_order)
    {
        if (is_null($is_pre_order)) {
            throw new \InvalidArgumentException('non-nullable is_pre_order cannot be null');
        }
        $this->container['is_pre_order'] = $is_pre_order;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string|null
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string|null $release_date Game key release date in the ISO 8601 format.
     *
     * @return self
     */
    public function setReleaseDate($release_date)
    {
        if (is_null($release_date)) {
            throw new \InvalidArgumentException('non-nullable release_date cannot be null');
        }
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \OpenAPI\Client\Model\CatalogItemPromotionsInner[]|null
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \OpenAPI\Client\Model\CatalogItemPromotionsInner[]|null $promotions Applied promotions for specific items in the cart. The array is returned in the following cases:  * A discount promotion is configured for a specific item.  * A promo code with the **Discount on selected items** setting is applied.  If no item-level promotions are applied, an empty array is returned.
     *
     * @return self
     */
    public function setPromotions($promotions)
    {
        if (is_null($promotions)) {
            throw new \InvalidArgumentException('non-nullable promotions cannot be null');
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \OpenAPI\Client\Model\CatalogItemLimits|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \OpenAPI\Client\Model\CatalogItemLimits|null $limits limits
     *
     * @return self
     */
    public function setLimits($limits)
    {
        if (is_null($limits)) {
            array_push($this->openAPINullablesSetToNull, 'limits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \OpenAPI\Client\Model\ItemPeriodsInner[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \OpenAPI\Client\Model\ItemPeriodsInner[]|null $periods Item sales period.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            array_push($this->openAPINullablesSetToNull, 'periods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periods'] = $periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


