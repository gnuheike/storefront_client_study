<?php
/**
 * CartPaymentSettingsUi
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CartPaymentSettingsUi Class Doc Comment
 *
 * @category Class
 * @description Interface settings.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartPaymentSettingsUi implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cart-Payment_settings_ui';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'theme' => 'string',
        'desktop' => '\OpenAPI\Client\Model\CartPaymentSettingsUiDesktop',
        'mode' => 'string',
        'user_account' => '\OpenAPI\Client\Model\CartPaymentSettingsUiUserAccount',
        'header' => '\OpenAPI\Client\Model\CartPaymentSettingsUiHeader',
        'mobile' => '\OpenAPI\Client\Model\CartPaymentSettingsUiMobile',
        'is_prevent_external_link_open' => 'bool',
        'is_payment_methods_list_mode' => 'bool',
        'is_independent_windows' => 'bool',
        'currency_format' => 'string',
        'is_show_close_widget_warning' => 'bool',
        'layout' => 'string',
        'is_three_ds_independent_windows' => 'bool',
        'is_cart_open_by_default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'theme' => null,
        'desktop' => null,
        'mode' => null,
        'user_account' => null,
        'header' => null,
        'mobile' => null,
        'is_prevent_external_link_open' => null,
        'is_payment_methods_list_mode' => null,
        'is_independent_windows' => null,
        'currency_format' => null,
        'is_show_close_widget_warning' => null,
        'layout' => null,
        'is_three_ds_independent_windows' => null,
        'is_cart_open_by_default' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'theme' => false,
        'desktop' => false,
        'mode' => false,
        'user_account' => false,
        'header' => false,
        'mobile' => false,
        'is_prevent_external_link_open' => false,
        'is_payment_methods_list_mode' => false,
        'is_independent_windows' => false,
        'currency_format' => false,
        'is_show_close_widget_warning' => false,
        'layout' => false,
        'is_three_ds_independent_windows' => false,
        'is_cart_open_by_default' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'theme' => 'theme',
        'desktop' => 'desktop',
        'mode' => 'mode',
        'user_account' => 'user_account',
        'header' => 'header',
        'mobile' => 'mobile',
        'is_prevent_external_link_open' => 'is_prevent_external_link_open',
        'is_payment_methods_list_mode' => 'is_payment_methods_list_mode',
        'is_independent_windows' => 'is_independent_windows',
        'currency_format' => 'currency_format',
        'is_show_close_widget_warning' => 'is_show_close_widget_warning',
        'layout' => 'layout',
        'is_three_ds_independent_windows' => 'is_three_ds_independent_windows',
        'is_cart_open_by_default' => 'is_cart_open_by_default'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'theme' => 'setTheme',
        'desktop' => 'setDesktop',
        'mode' => 'setMode',
        'user_account' => 'setUserAccount',
        'header' => 'setHeader',
        'mobile' => 'setMobile',
        'is_prevent_external_link_open' => 'setIsPreventExternalLinkOpen',
        'is_payment_methods_list_mode' => 'setIsPaymentMethodsListMode',
        'is_independent_windows' => 'setIsIndependentWindows',
        'currency_format' => 'setCurrencyFormat',
        'is_show_close_widget_warning' => 'setIsShowCloseWidgetWarning',
        'layout' => 'setLayout',
        'is_three_ds_independent_windows' => 'setIsThreeDsIndependentWindows',
        'is_cart_open_by_default' => 'setIsCartOpenByDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'theme' => 'getTheme',
        'desktop' => 'getDesktop',
        'mode' => 'getMode',
        'user_account' => 'getUserAccount',
        'header' => 'getHeader',
        'mobile' => 'getMobile',
        'is_prevent_external_link_open' => 'getIsPreventExternalLinkOpen',
        'is_payment_methods_list_mode' => 'getIsPaymentMethodsListMode',
        'is_independent_windows' => 'getIsIndependentWindows',
        'currency_format' => 'getCurrencyFormat',
        'is_show_close_widget_warning' => 'getIsShowCloseWidgetWarning',
        'layout' => 'getLayout',
        'is_three_ds_independent_windows' => 'getIsThreeDsIndependentWindows',
        'is_cart_open_by_default' => 'getIsCartOpenByDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const THEME__63295A9A2E47FAB76F7708E1 = '63295a9a2e47fab76f7708e1';
    public const THEME__63295AAB2E47FAB76F7708E3 = '63295aab2e47fab76f7708e3';
    public const MODE_USER_ACCOUNT = 'user_account';
    public const LAYOUT_EMBED = 'embed';
    public const LAYOUT_COLUMN_REVERSE = 'column_reverse';
    public const LAYOUT_EMBED_COLUMN_REVERSE = 'embed_column_reverse';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThemeAllowableValues()
    {
        return [
            self::THEME__63295A9A2E47FAB76F7708E1,
            self::THEME__63295AAB2E47FAB76F7708E3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_USER_ACCOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLayoutAllowableValues()
    {
        return [
            self::LAYOUT_EMBED,
            self::LAYOUT_COLUMN_REVERSE,
            self::LAYOUT_EMBED_COLUMN_REVERSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('theme', $data ?? [], '63295a9a2e47fab76f7708e1');
        $this->setIfExists('desktop', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('user_account', $data ?? [], null);
        $this->setIfExists('header', $data ?? [], null);
        $this->setIfExists('mobile', $data ?? [], null);
        $this->setIfExists('is_prevent_external_link_open', $data ?? [], false);
        $this->setIfExists('is_payment_methods_list_mode', $data ?? [], false);
        $this->setIfExists('is_independent_windows', $data ?? [], false);
        $this->setIfExists('currency_format', $data ?? [], null);
        $this->setIfExists('is_show_close_widget_warning', $data ?? [], true);
        $this->setIfExists('layout', $data ?? [], null);
        $this->setIfExists('is_three_ds_independent_windows', $data ?? [], false);
        $this->setIfExists('is_cart_open_by_default', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getThemeAllowableValues();
        if (!is_null($this->container['theme']) && !in_array($this->container['theme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'theme', must be one of '%s'",
                $this->container['theme'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLayoutAllowableValues();
        if (!is_null($this->container['layout']) && !in_array($this->container['layout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'layout', must be one of '%s'",
                $this->container['layout'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme Payment UI theme. Can be `63295a9a2e47fab76f7708e1` for the light theme (default) or `63295aab2e47fab76f7708e3` for the dark theme. You can also [create a custom theme](https://developers.xsolla.com/doc/pay-station/features/ui-theme-customization/#pay_station_ui_theme_customization_in_token) and pass its ID in this parameter.
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $allowedValues = $this->getThemeAllowableValues();
        if (!in_array($theme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'theme', must be one of '%s'",
                    $theme,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets desktop
     *
     * @return \OpenAPI\Client\Model\CartPaymentSettingsUiDesktop|null
     */
    public function getDesktop()
    {
        return $this->container['desktop'];
    }

    /**
     * Sets desktop
     *
     * @param \OpenAPI\Client\Model\CartPaymentSettingsUiDesktop|null $desktop desktop
     *
     * @return self
     */
    public function setDesktop($desktop)
    {
        if (is_null($desktop)) {
            throw new \InvalidArgumentException('non-nullable desktop cannot be null');
        }
        $this->container['desktop'] = $desktop;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Interface mode in payment UI. Can be `user_account` only. The header contains only the account navigation menu, and the user cannot select a product or make a payment. This mode is only available on the desktop.
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets user_account
     *
     * @return \OpenAPI\Client\Model\CartPaymentSettingsUiUserAccount|null
     */
    public function getUserAccount()
    {
        return $this->container['user_account'];
    }

    /**
     * Sets user_account
     *
     * @param \OpenAPI\Client\Model\CartPaymentSettingsUiUserAccount|null $user_account user_account
     *
     * @return self
     */
    public function setUserAccount($user_account)
    {
        if (is_null($user_account)) {
            throw new \InvalidArgumentException('non-nullable user_account cannot be null');
        }
        $this->container['user_account'] = $user_account;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \OpenAPI\Client\Model\CartPaymentSettingsUiHeader|null
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \OpenAPI\Client\Model\CartPaymentSettingsUiHeader|null $header header
     *
     * @return self
     */
    public function setHeader($header)
    {
        if (is_null($header)) {
            throw new \InvalidArgumentException('non-nullable header cannot be null');
        }
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return \OpenAPI\Client\Model\CartPaymentSettingsUiMobile|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param \OpenAPI\Client\Model\CartPaymentSettingsUiMobile|null $mobile mobile
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        if (is_null($mobile)) {
            throw new \InvalidArgumentException('non-nullable mobile cannot be null');
        }
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets is_prevent_external_link_open
     *
     * @return bool|null
     */
    public function getIsPreventExternalLinkOpen()
    {
        return $this->container['is_prevent_external_link_open'];
    }

    /**
     * Sets is_prevent_external_link_open
     *
     * @param bool|null $is_prevent_external_link_open Whether or not redirecting links to an external resource is disabled. When clicking an external link, the `external-link-open` event is sent via the `postMessage` mechanism. The address for the redirected link is passed in the `url` parameter.
     *
     * @return self
     */
    public function setIsPreventExternalLinkOpen($is_prevent_external_link_open)
    {
        if (is_null($is_prevent_external_link_open)) {
            throw new \InvalidArgumentException('non-nullable is_prevent_external_link_open cannot be null');
        }
        $this->container['is_prevent_external_link_open'] = $is_prevent_external_link_open;

        return $this;
    }

    /**
     * Gets is_payment_methods_list_mode
     *
     * @return bool|null
     */
    public function getIsPaymentMethodsListMode()
    {
        return $this->container['is_payment_methods_list_mode'];
    }

    /**
     * Sets is_payment_methods_list_mode
     *
     * @param bool|null $is_payment_methods_list_mode Whether the list of payment methods available in the user’s country is displayed when opening the payment UI. If `false` (default), the payment method passed in the `settings.payment_method` parameter or the method selected by the [PayRank algorithm](https://developers.xsolla.com/solutions/payments/payment-ui-management/top-payment-methods-management/) is displayed.
     *
     * @return self
     */
    public function setIsPaymentMethodsListMode($is_payment_methods_list_mode)
    {
        if (is_null($is_payment_methods_list_mode)) {
            throw new \InvalidArgumentException('non-nullable is_payment_methods_list_mode cannot be null');
        }
        $this->container['is_payment_methods_list_mode'] = $is_payment_methods_list_mode;

        return $this;
    }

    /**
     * Gets is_independent_windows
     *
     * @return bool|null
     */
    public function getIsIndependentWindows()
    {
        return $this->container['is_independent_windows'];
    }

    /**
     * Sets is_independent_windows
     *
     * @param bool|null $is_independent_windows Whether to redirect users from the embedded launcher’s browser (WebView) to their default browser to make a purchase.
     *
     * @return self
     */
    public function setIsIndependentWindows($is_independent_windows)
    {
        if (is_null($is_independent_windows)) {
            throw new \InvalidArgumentException('non-nullable is_independent_windows cannot be null');
        }
        $this->container['is_independent_windows'] = $is_independent_windows;

        return $this;
    }

    /**
     * Gets currency_format
     *
     * @return string|null
     */
    public function getCurrencyFormat()
    {
        return $this->container['currency_format'];
    }

    /**
     * Sets currency_format
     *
     * @param string|null $currency_format Set to `code` to display a three-letter [ISO 4217](https://developers.xsolla.com/doc/pay-station/references/supported-currencies/) currency code in the payment UI. The currency symbol is displayed instead of the three-letter currency code by default.
     *
     * @return self
     */
    public function setCurrencyFormat($currency_format)
    {
        if (is_null($currency_format)) {
            throw new \InvalidArgumentException('non-nullable currency_format cannot be null');
        }
        $this->container['currency_format'] = $currency_format;

        return $this;
    }

    /**
     * Gets is_show_close_widget_warning
     *
     * @return bool|null
     */
    public function getIsShowCloseWidgetWarning()
    {
        return $this->container['is_show_close_widget_warning'];
    }

    /**
     * Sets is_show_close_widget_warning
     *
     * @param bool|null $is_show_close_widget_warning Whether to show a warning about processing the transaction when hovering over the **×** icon before closing the payment page. If `false` is passed, or the parameter is not passed, the warning is not displayed.
     *
     * @return self
     */
    public function setIsShowCloseWidgetWarning($is_show_close_widget_warning)
    {
        if (is_null($is_show_close_widget_warning)) {
            throw new \InvalidArgumentException('non-nullable is_show_close_widget_warning cannot be null');
        }
        $this->container['is_show_close_widget_warning'] = $is_show_close_widget_warning;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return string|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param string|null $layout Location of the main elements of the payment UI. You can open the payment UI inside your game and/or swap the columns with information about an order and payment methods. Refer to the [customization instructions](https://developers.xsolla.com/doc/pay-station/features/ui-theme-customization/#pay_station_ui_theme_customization_layout) for detailed information.
     *
     * @return self
     */
    public function setLayout($layout)
    {
        if (is_null($layout)) {
            throw new \InvalidArgumentException('non-nullable layout cannot be null');
        }
        $allowedValues = $this->getLayoutAllowableValues();
        if (!in_array($layout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'layout', must be one of '%s'",
                    $layout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets is_three_ds_independent_windows
     *
     * @return bool|null
     */
    public function getIsThreeDsIndependentWindows()
    {
        return $this->container['is_three_ds_independent_windows'];
    }

    /**
     * Sets is_three_ds_independent_windows
     *
     * @param bool|null $is_three_ds_independent_windows Whether the 3-D Secure verification opens in a new browser window. If your setup enforces a Content Security Policy (CSP), set to `true`.
     *
     * @return self
     */
    public function setIsThreeDsIndependentWindows($is_three_ds_independent_windows)
    {
        if (is_null($is_three_ds_independent_windows)) {
            throw new \InvalidArgumentException('non-nullable is_three_ds_independent_windows cannot be null');
        }
        $this->container['is_three_ds_independent_windows'] = $is_three_ds_independent_windows;

        return $this;
    }

    /**
     * Gets is_cart_open_by_default
     *
     * @return bool|null
     */
    public function getIsCartOpenByDefault()
    {
        return $this->container['is_cart_open_by_default'];
    }

    /**
     * Sets is_cart_open_by_default
     *
     * @param bool|null $is_cart_open_by_default The display of the list of items in the cart when opening the mobile version of the payment UI. If `true`, the list is displayed in an extended view. If `false` (default) or the parameters is not passed, the list is displayed in a collapsed view.
     *
     * @return self
     */
    public function setIsCartOpenByDefault($is_cart_open_by_default)
    {
        if (is_null($is_cart_open_by_default)) {
            throw new \InvalidArgumentException('non-nullable is_cart_open_by_default cannot be null');
        }
        $this->container['is_cart_open_by_default'] = $is_cart_open_by_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


