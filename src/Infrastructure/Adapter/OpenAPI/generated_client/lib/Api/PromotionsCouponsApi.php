<?php
/**
 * PromotionsCouponsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PromotionsCouponsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PromotionsCouponsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateCoupon' => [
            'application/json',
        ],
        'addCouponUserPromotionLimit' => [
            'application/json',
        ],
        'adminCreateCoupon' => [
            'application/json',
        ],
        'createCouponCode' => [
            'application/json',
        ],
        'deactivateCoupon' => [
            'application/json',
        ],
        'deleteCouponPromotion' => [
            'application/json',
        ],
        'generateCouponCodes' => [
            'application/json',
        ],
        'getCoupon' => [
            'application/json',
        ],
        'getCouponCodeLimit' => [
            'application/json',
        ],
        'getCouponCodes' => [
            'application/json',
        ],
        'getCouponRewardsByCode' => [
            'application/json',
        ],
        'getCouponUserLimit' => [
            'application/json',
        ],
        'getCoupons' => [
            'application/json',
        ],
        'redeemCoupon' => [
            'application/json',
        ],
        'removeCouponUserPromotionLimit' => [
            'application/json',
        ],
        'setCouponUserPromotionLimit' => [
            'application/json',
        ],
        'updateCouponPromotion' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activateCoupon
     *
     * Activate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function activateCoupon($project_id, $external_id, string $contentType = self::contentTypes['activateCoupon'][0])
    {
        $this->activateCouponWithHttpInfo($project_id, $external_id, $contentType);
    }

    /**
     * Operation activateCouponWithHttpInfo
     *
     * Activate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateCouponWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['activateCoupon'][0])
    {
        $request = $this->activateCouponRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject45',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation activateCouponAsync
     *
     * Activate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateCouponAsync($project_id, $external_id, string $contentType = self::contentTypes['activateCoupon'][0])
    {
        return $this->activateCouponAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateCouponAsyncWithHttpInfo
     *
     * Activate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateCouponAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['activateCoupon'][0])
    {
        $returnType = '';
        $request = $this->activateCouponRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateCoupon'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateCouponRequest($project_id, $external_id, string $contentType = self::contentTypes['activateCoupon'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling activateCoupon'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling activateCoupon'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addCouponUserPromotionLimit
     *
     * Increase coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function addCouponUserPromotionLimit($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['addCouponUserPromotionLimit'][0])
    {
        list($response) = $this->addCouponUserPromotionLimitWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation addCouponUserPromotionLimitWithHttpInfo
     *
     * Increase coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCouponUserPromotionLimitWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['addCouponUserPromotionLimit'][0])
    {
        $request = $this->addCouponUserPromotionLimitRequest($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitCoupon',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addCouponUserPromotionLimitAsync
     *
     * Increase coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCouponUserPromotionLimitAsync($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['addCouponUserPromotionLimit'][0])
    {
        return $this->addCouponUserPromotionLimitAsyncWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCouponUserPromotionLimitAsyncWithHttpInfo
     *
     * Increase coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCouponUserPromotionLimitAsyncWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['addCouponUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitCoupon';
        $request = $this->addCouponUserPromotionLimitRequest($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCouponUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCouponUserPromotionLimitRequest($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['addCouponUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling addCouponUserPromotionLimit'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling addCouponUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/coupon/external_id/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_coupon_user_promotion_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_coupon_user_promotion_limit_request));
            } else {
                $httpBody = $add_coupon_user_promotion_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminCreateCoupon
     *
     * Create coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateCouponRequest|null $admin_create_coupon_request admin_create_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminCreateCoupon201Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject43
     */
    public function adminCreateCoupon($project_id, $admin_create_coupon_request = null, string $contentType = self::contentTypes['adminCreateCoupon'][0])
    {
        list($response) = $this->adminCreateCouponWithHttpInfo($project_id, $admin_create_coupon_request, $contentType);
        return $response;
    }

    /**
     * Operation adminCreateCouponWithHttpInfo
     *
     * Create coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateCouponRequest|null $admin_create_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminCreateCoupon201Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject43, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminCreateCouponWithHttpInfo($project_id, $admin_create_coupon_request = null, string $contentType = self::contentTypes['adminCreateCoupon'][0])
    {
        $request = $this->adminCreateCouponRequest($project_id, $admin_create_coupon_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\AdminCreateCoupon201Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject43',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\AdminCreateCoupon201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminCreateCoupon201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation adminCreateCouponAsync
     *
     * Create coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateCouponRequest|null $admin_create_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateCouponAsync($project_id, $admin_create_coupon_request = null, string $contentType = self::contentTypes['adminCreateCoupon'][0])
    {
        return $this->adminCreateCouponAsyncWithHttpInfo($project_id, $admin_create_coupon_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminCreateCouponAsyncWithHttpInfo
     *
     * Create coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateCouponRequest|null $admin_create_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminCreateCouponAsyncWithHttpInfo($project_id, $admin_create_coupon_request = null, string $contentType = self::contentTypes['adminCreateCoupon'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminCreateCoupon201Response';
        $request = $this->adminCreateCouponRequest($project_id, $admin_create_coupon_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminCreateCoupon'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\AdminCreateCouponRequest|null $admin_create_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminCreateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminCreateCouponRequest($project_id, $admin_create_coupon_request = null, string $contentType = self::contentTypes['adminCreateCoupon'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling adminCreateCoupon'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_create_coupon_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($admin_create_coupon_request));
            } else {
                $httpBody = $admin_create_coupon_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCouponCode
     *
     * Create coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCouponCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject46CodesInner|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44|\OpenAPI\Client\Model\InlineObject47
     */
    public function createCouponCode($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createCouponCode'][0])
    {
        list($response) = $this->createCouponCodeWithHttpInfo($project_id, $external_id, $create_coupon_code_request, $contentType);
        return $response;
    }

    /**
     * Operation createCouponCodeWithHttpInfo
     *
     * Create coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCouponCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject46CodesInner|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44|\OpenAPI\Client\Model\InlineObject47, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponCodeWithHttpInfo($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createCouponCode'][0])
    {
        $request = $this->createCouponCodeRequest($project_id, $external_id, $create_coupon_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject46CodesInner',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject44',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject47',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject46CodesInner',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject46CodesInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject47',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createCouponCodeAsync
     *
     * Create coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCouponCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCouponCodeAsync($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createCouponCode'][0])
    {
        return $this->createCouponCodeAsyncWithHttpInfo($project_id, $external_id, $create_coupon_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCouponCodeAsyncWithHttpInfo
     *
     * Create coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCouponCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCouponCodeAsyncWithHttpInfo($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createCouponCode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject46CodesInner';
        $request = $this->createCouponCodeRequest($project_id, $external_id, $create_coupon_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCouponCode'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\CreateCouponCodeRequest|null $create_coupon_code_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCouponCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCouponCodeRequest($project_id, $external_id, $create_coupon_code_request = null, string $contentType = self::contentTypes['createCouponCode'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling createCouponCode'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling createCouponCode'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_coupon_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_coupon_code_request));
            } else {
                $httpBody = $create_coupon_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deactivateCoupon
     *
     * Deactivate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deactivateCoupon($project_id, $external_id, string $contentType = self::contentTypes['deactivateCoupon'][0])
    {
        $this->deactivateCouponWithHttpInfo($project_id, $external_id, $contentType);
    }

    /**
     * Operation deactivateCouponWithHttpInfo
     *
     * Deactivate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deactivateCouponWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deactivateCoupon'][0])
    {
        $request = $this->deactivateCouponRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject45',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deactivateCouponAsync
     *
     * Deactivate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateCouponAsync($project_id, $external_id, string $contentType = self::contentTypes['deactivateCoupon'][0])
    {
        return $this->deactivateCouponAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deactivateCouponAsyncWithHttpInfo
     *
     * Deactivate coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateCouponAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deactivateCoupon'][0])
    {
        $returnType = '';
        $request = $this->deactivateCouponRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deactivateCoupon'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deactivateCouponRequest($project_id, $external_id, string $contentType = self::contentTypes['deactivateCoupon'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling deactivateCoupon'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling deactivateCoupon'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}/deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCouponPromotion
     *
     * Delete coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCouponPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCouponPromotion($project_id, $external_id, string $contentType = self::contentTypes['deleteCouponPromotion'][0])
    {
        $this->deleteCouponPromotionWithHttpInfo($project_id, $external_id, $contentType);
    }

    /**
     * Operation deleteCouponPromotionWithHttpInfo
     *
     * Delete coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCouponPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponPromotionWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deleteCouponPromotion'][0])
    {
        $request = $this->deleteCouponPromotionRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteCouponPromotionAsync
     *
     * Delete coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCouponPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponPromotionAsync($project_id, $external_id, string $contentType = self::contentTypes['deleteCouponPromotion'][0])
    {
        return $this->deleteCouponPromotionAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCouponPromotionAsyncWithHttpInfo
     *
     * Delete coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCouponPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponPromotionAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['deleteCouponPromotion'][0])
    {
        $returnType = '';
        $request = $this->deleteCouponPromotionRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCouponPromotion'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCouponPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCouponPromotionRequest($project_id, $external_id, string $contentType = self::contentTypes['deleteCouponPromotion'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling deleteCouponPromotion'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling deleteCouponPromotion'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateCouponCodes
     *
     * Generate coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCouponCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenerateCouponCodes200Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject48
     */
    public function generateCouponCodes($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateCouponCodes'][0])
    {
        list($response) = $this->generateCouponCodesWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request, $contentType);
        return $response;
    }

    /**
     * Operation generateCouponCodesWithHttpInfo
     *
     * Generate coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCouponCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenerateCouponCodes200Response|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject48, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateCouponCodesWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateCouponCodes'][0])
    {
        $request = $this->generateCouponCodesRequest($project_id, $external_id, $generate_coupon_codes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenerateCouponCodes200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject48',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenerateCouponCodes200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenerateCouponCodes200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject48',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation generateCouponCodesAsync
     *
     * Generate coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCouponCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCouponCodesAsync($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateCouponCodes'][0])
    {
        return $this->generateCouponCodesAsyncWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateCouponCodesAsyncWithHttpInfo
     *
     * Generate coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCouponCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCouponCodesAsyncWithHttpInfo($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateCouponCodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GenerateCouponCodes200Response';
        $request = $this->generateCouponCodesRequest($project_id, $external_id, $generate_coupon_codes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateCouponCodes'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\GenerateCouponCodesRequest|null $generate_coupon_codes_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCouponCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateCouponCodesRequest($project_id, $external_id, $generate_coupon_codes_request = null, string $contentType = self::contentTypes['generateCouponCodes'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling generateCouponCodes'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling generateCouponCodes'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}/code/generate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($generate_coupon_codes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generate_coupon_codes_request));
            } else {
                $httpBody = $generate_coupon_codes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCoupon
     *
     * Get coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminPromotions200GetCouponPromotionModel|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44
     */
    public function getCoupon($project_id, $external_id, string $contentType = self::contentTypes['getCoupon'][0])
    {
        list($response) = $this->getCouponWithHttpInfo($project_id, $external_id, $contentType);
        return $response;
    }

    /**
     * Operation getCouponWithHttpInfo
     *
     * Get coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminPromotions200GetCouponPromotionModel|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['getCoupon'][0])
    {
        $request = $this->getCouponRequest($project_id, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\AdminPromotions200GetCouponPromotionModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject44',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\AdminPromotions200GetCouponPromotionModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminPromotions200GetCouponPromotionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCouponAsync
     *
     * Get coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponAsync($project_id, $external_id, string $contentType = self::contentTypes['getCoupon'][0])
    {
        return $this->getCouponAsyncWithHttpInfo($project_id, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponAsyncWithHttpInfo
     *
     * Get coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponAsyncWithHttpInfo($project_id, $external_id, string $contentType = self::contentTypes['getCoupon'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminPromotions200GetCouponPromotionModel';
        $request = $this->getCouponRequest($project_id, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoupon'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponRequest($project_id, $external_id, string $contentType = self::contentTypes['getCoupon'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getCoupon'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getCoupon'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponCodeLimit
     *
     * Get unique coupon code limits
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string[]|null $codes Unique case-sensitive codes. Contain only letters and numbers. (optional)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodeLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject80|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\GetPromoCodeCodeLimit422Response
     */
    public function getCouponCodeLimit($project_id, $external_id, $codes = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodeLimit'][0])
    {
        list($response) = $this->getCouponCodeLimitWithHttpInfo($project_id, $external_id, $codes, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getCouponCodeLimitWithHttpInfo
     *
     * Get unique coupon code limits
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string[]|null $codes Unique case-sensitive codes. Contain only letters and numbers. (optional)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodeLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject80|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\GetPromoCodeCodeLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponCodeLimitWithHttpInfo($project_id, $external_id, $codes = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodeLimit'][0])
    {
        $request = $this->getCouponCodeLimitRequest($project_id, $external_id, $codes, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject80',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetPromoCodeCodeLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject80',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject80',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPromoCodeCodeLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCouponCodeLimitAsync
     *
     * Get unique coupon code limits
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string[]|null $codes Unique case-sensitive codes. Contain only letters and numbers. (optional)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodeLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponCodeLimitAsync($project_id, $external_id, $codes = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodeLimit'][0])
    {
        return $this->getCouponCodeLimitAsyncWithHttpInfo($project_id, $external_id, $codes, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponCodeLimitAsyncWithHttpInfo
     *
     * Get unique coupon code limits
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string[]|null $codes Unique case-sensitive codes. Contain only letters and numbers. (optional)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodeLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponCodeLimitAsyncWithHttpInfo($project_id, $external_id, $codes = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodeLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject80';
        $request = $this->getCouponCodeLimitRequest($project_id, $external_id, $codes, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponCodeLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string[]|null $codes Unique case-sensitive codes. Contain only letters and numbers. (optional)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodeLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponCodeLimitRequest($project_id, $external_id, $codes = null, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodeLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getCouponCodeLimit'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getCouponCodeLimit'
            );
        }


        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsCouponsApi.getCouponCodeLimit, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PromotionsCouponsApi.getCouponCodeLimit, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/code/limit/coupon/external_id/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $codes,
            'codes[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponCodes
     *
     * Get coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject46|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44
     */
    public function getCouponCodes($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodes'][0])
    {
        list($response) = $this->getCouponCodesWithHttpInfo($project_id, $external_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getCouponCodesWithHttpInfo
     *
     * Get coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject46|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\InlineObject44, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponCodesWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodes'][0])
    {
        $request = $this->getCouponCodesRequest($project_id, $external_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject46',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject44',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject46',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject46',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCouponCodesAsync
     *
     * Get coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponCodesAsync($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodes'][0])
    {
        return $this->getCouponCodesAsyncWithHttpInfo($project_id, $external_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponCodesAsyncWithHttpInfo
     *
     * Get coupon codes
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponCodesAsyncWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject46';
        $request = $this->getCouponCodesRequest($project_id, $external_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponCodes'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponCodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponCodesRequest($project_id, $external_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCouponCodes'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getCouponCodes'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getCouponCodes'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsCouponsApi.getCouponCodes, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PromotionsCouponsApi.getCouponCodes, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}/code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponRewardsByCode
     *
     * Get coupon rewards
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $coupon_code Unique case sensitive code. Contains letters and numbers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponRewardsByCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject40|\OpenAPI\Client\Model\InlineObject24|\OpenAPI\Client\Model\InlineObject5|\OpenAPI\Client\Model\InlineObject38|\OpenAPI\Client\Model\InlineObject41
     */
    public function getCouponRewardsByCode($project_id, $coupon_code, string $contentType = self::contentTypes['getCouponRewardsByCode'][0])
    {
        list($response) = $this->getCouponRewardsByCodeWithHttpInfo($project_id, $coupon_code, $contentType);
        return $response;
    }

    /**
     * Operation getCouponRewardsByCodeWithHttpInfo
     *
     * Get coupon rewards
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $coupon_code Unique case sensitive code. Contains letters and numbers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponRewardsByCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject40|\OpenAPI\Client\Model\InlineObject24|\OpenAPI\Client\Model\InlineObject5|\OpenAPI\Client\Model\InlineObject38|\OpenAPI\Client\Model\InlineObject41, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponRewardsByCodeWithHttpInfo($project_id, $coupon_code, string $contentType = self::contentTypes['getCouponRewardsByCode'][0])
    {
        $request = $this->getCouponRewardsByCodeRequest($project_id, $coupon_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject40',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject24',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject5',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject38',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject41',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject40',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject40',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject24',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject38',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject41',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCouponRewardsByCodeAsync
     *
     * Get coupon rewards
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $coupon_code Unique case sensitive code. Contains letters and numbers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponRewardsByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponRewardsByCodeAsync($project_id, $coupon_code, string $contentType = self::contentTypes['getCouponRewardsByCode'][0])
    {
        return $this->getCouponRewardsByCodeAsyncWithHttpInfo($project_id, $coupon_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponRewardsByCodeAsyncWithHttpInfo
     *
     * Get coupon rewards
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $coupon_code Unique case sensitive code. Contains letters and numbers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponRewardsByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponRewardsByCodeAsyncWithHttpInfo($project_id, $coupon_code, string $contentType = self::contentTypes['getCouponRewardsByCode'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject40';
        $request = $this->getCouponRewardsByCodeRequest($project_id, $coupon_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponRewardsByCode'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $coupon_code Unique case sensitive code. Contains letters and numbers. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponRewardsByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponRewardsByCodeRequest($project_id, $coupon_code, string $contentType = self::contentTypes['getCouponRewardsByCode'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getCouponRewardsByCode'
            );
        }

        // verify the required parameter 'coupon_code' is set
        if ($coupon_code === null || (is_array($coupon_code) && count($coupon_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_code when calling getCouponRewardsByCode'
            );
        }
        if (strlen($coupon_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$coupon_code" when calling PromotionsCouponsApi.getCouponRewardsByCode, must be smaller than or equal to 128.');
        }
        if (strlen($coupon_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$coupon_code" when calling PromotionsCouponsApi.getCouponRewardsByCode, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/coupon/code/{coupon_code}/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($coupon_code !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_code' . '}',
                ObjectSerializer::toPathValue($coupon_code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponUserLimit
     *
     * Get coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponUserLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function getCouponUserLimit($project_id, $external_id, $user_external_id, string $contentType = self::contentTypes['getCouponUserLimit'][0])
    {
        list($response) = $this->getCouponUserLimitWithHttpInfo($project_id, $external_id, $user_external_id, $contentType);
        return $response;
    }

    /**
     * Operation getCouponUserLimitWithHttpInfo
     *
     * Get coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponUserLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponUserLimitWithHttpInfo($project_id, $external_id, $user_external_id, string $contentType = self::contentTypes['getCouponUserLimit'][0])
    {
        $request = $this->getCouponUserLimitRequest($project_id, $external_id, $user_external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitCoupon',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCouponUserLimitAsync
     *
     * Get coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponUserLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponUserLimitAsync($project_id, $external_id, $user_external_id, string $contentType = self::contentTypes['getCouponUserLimit'][0])
    {
        return $this->getCouponUserLimitAsyncWithHttpInfo($project_id, $external_id, $user_external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponUserLimitAsyncWithHttpInfo
     *
     * Get coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponUserLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponUserLimitAsyncWithHttpInfo($project_id, $external_id, $user_external_id, string $contentType = self::contentTypes['getCouponUserLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitCoupon';
        $request = $this->getCouponUserLimitRequest($project_id, $external_id, $user_external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponUserLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCouponUserLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponUserLimitRequest($project_id, $external_id, $user_external_id, string $contentType = self::contentTypes['getCouponUserLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getCouponUserLimit'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getCouponUserLimit'
            );
        }

        // verify the required parameter 'user_external_id' is set
        if ($user_external_id === null || (is_array($user_external_id) && count($user_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_external_id when calling getCouponUserLimit'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/user/limit/coupon/external_id/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_external_id,
            'user_external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCoupons
     *
     * Get list of coupon promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupons'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject42|\OpenAPI\Client\Model\InlineObject1
     */
    public function getCoupons($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCoupons'][0])
    {
        list($response) = $this->getCouponsWithHttpInfo($project_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getCouponsWithHttpInfo
     *
     * Get list of coupon promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupons'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject42|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponsWithHttpInfo($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCoupons'][0])
    {
        $request = $this->getCouponsRequest($project_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject42',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject42',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject42',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCouponsAsync
     *
     * Get list of coupon promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsAsync($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCoupons'][0])
    {
        return $this->getCouponsAsyncWithHttpInfo($project_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponsAsyncWithHttpInfo
     *
     * Get list of coupon promotions
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsAsyncWithHttpInfo($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCoupons'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject42';
        $request = $this->getCouponsRequest($project_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoupons'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCoupons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponsRequest($project_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getCoupons'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getCoupons'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsCouponsApi.getCoupons, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling PromotionsCouponsApi.getCoupons, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/project/{project_id}/admin/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemCoupon
     *
     * Redeem coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemCouponRequest|null $redeem_coupon_request redeem_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject37|\OpenAPI\Client\Model\InlineObject24|\OpenAPI\Client\Model\InlineObject5|\OpenAPI\Client\Model\InlineObject38|\OpenAPI\Client\Model\InlineObject39
     */
    public function redeemCoupon($project_id, $redeem_coupon_request = null, string $contentType = self::contentTypes['redeemCoupon'][0])
    {
        list($response) = $this->redeemCouponWithHttpInfo($project_id, $redeem_coupon_request, $contentType);
        return $response;
    }

    /**
     * Operation redeemCouponWithHttpInfo
     *
     * Redeem coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemCouponRequest|null $redeem_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemCoupon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject37|\OpenAPI\Client\Model\InlineObject24|\OpenAPI\Client\Model\InlineObject5|\OpenAPI\Client\Model\InlineObject38|\OpenAPI\Client\Model\InlineObject39, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemCouponWithHttpInfo($project_id, $redeem_coupon_request = null, string $contentType = self::contentTypes['redeemCoupon'][0])
    {
        $request = $this->redeemCouponRequest($project_id, $redeem_coupon_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject37',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject24',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject5',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject38',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject39',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject37',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject37',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject24',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject38',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject39',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation redeemCouponAsync
     *
     * Redeem coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemCouponRequest|null $redeem_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemCouponAsync($project_id, $redeem_coupon_request = null, string $contentType = self::contentTypes['redeemCoupon'][0])
    {
        return $this->redeemCouponAsyncWithHttpInfo($project_id, $redeem_coupon_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemCouponAsyncWithHttpInfo
     *
     * Redeem coupon code
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemCouponRequest|null $redeem_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemCouponAsyncWithHttpInfo($project_id, $redeem_coupon_request = null, string $contentType = self::contentTypes['redeemCoupon'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject37';
        $request = $this->redeemCouponRequest($project_id, $redeem_coupon_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemCoupon'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemCouponRequest|null $redeem_coupon_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redeemCouponRequest($project_id, $redeem_coupon_request = null, string $contentType = self::contentTypes['redeemCoupon'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling redeemCoupon'
            );
        }



        $resourcePath = '/v2/project/{project_id}/coupon/redeem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($redeem_coupon_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($redeem_coupon_request));
            } else {
                $httpBody = $redeem_coupon_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeCouponUserPromotionLimit
     *
     * Decrease coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function removeCouponUserPromotionLimit($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['removeCouponUserPromotionLimit'][0])
    {
        list($response) = $this->removeCouponUserPromotionLimitWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation removeCouponUserPromotionLimitWithHttpInfo
     *
     * Decrease coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeCouponUserPromotionLimitWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['removeCouponUserPromotionLimit'][0])
    {
        $request = $this->removeCouponUserPromotionLimitRequest($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitCoupon',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeCouponUserPromotionLimitAsync
     *
     * Decrease coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeCouponUserPromotionLimitAsync($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['removeCouponUserPromotionLimit'][0])
    {
        return $this->removeCouponUserPromotionLimitAsyncWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeCouponUserPromotionLimitAsyncWithHttpInfo
     *
     * Decrease coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeCouponUserPromotionLimitAsyncWithHttpInfo($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['removeCouponUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitCoupon';
        $request = $this->removeCouponUserPromotionLimitRequest($project_id, $external_id, $add_coupon_user_promotion_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeCouponUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddCouponUserPromotionLimitRequest|null $add_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeCouponUserPromotionLimitRequest($project_id, $external_id, $add_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['removeCouponUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling removeCouponUserPromotionLimit'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling removeCouponUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/coupon/external_id/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_coupon_user_promotion_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_coupon_user_promotion_limit_request));
            } else {
                $httpBody = $add_coupon_user_promotion_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCouponUserPromotionLimit
     *
     * Set coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetCouponUserPromotionLimitRequest|null $set_coupon_user_promotion_limit_request set_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function setCouponUserPromotionLimit($project_id, $external_id, $set_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['setCouponUserPromotionLimit'][0])
    {
        list($response) = $this->setCouponUserPromotionLimitWithHttpInfo($project_id, $external_id, $set_coupon_user_promotion_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation setCouponUserPromotionLimitWithHttpInfo
     *
     * Set coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetCouponUserPromotionLimitRequest|null $set_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitCoupon|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCouponUserPromotionLimitWithHttpInfo($project_id, $external_id, $set_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['setCouponUserPromotionLimit'][0])
    {
        $request = $this->setCouponUserPromotionLimitRequest($project_id, $external_id, $set_coupon_user_promotion_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitCoupon',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setCouponUserPromotionLimitAsync
     *
     * Set coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetCouponUserPromotionLimitRequest|null $set_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCouponUserPromotionLimitAsync($project_id, $external_id, $set_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['setCouponUserPromotionLimit'][0])
    {
        return $this->setCouponUserPromotionLimitAsyncWithHttpInfo($project_id, $external_id, $set_coupon_user_promotion_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCouponUserPromotionLimitAsyncWithHttpInfo
     *
     * Set coupon limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetCouponUserPromotionLimitRequest|null $set_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCouponUserPromotionLimitAsyncWithHttpInfo($project_id, $external_id, $set_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['setCouponUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitCoupon';
        $request = $this->setCouponUserPromotionLimitRequest($project_id, $external_id, $set_coupon_user_promotion_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCouponUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetCouponUserPromotionLimitRequest|null $set_coupon_user_promotion_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setCouponUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCouponUserPromotionLimitRequest($project_id, $external_id, $set_coupon_user_promotion_limit_request = null, string $contentType = self::contentTypes['setCouponUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling setCouponUserPromotionLimit'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling setCouponUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/coupon/external_id/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_coupon_user_promotion_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_coupon_user_promotion_limit_request));
            } else {
                $httpBody = $set_coupon_user_promotion_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCouponPromotion
     *
     * Update coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateCouponPromotionRequest|null $update_coupon_promotion_request update_coupon_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCouponPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCouponPromotion($project_id, $external_id, $update_coupon_promotion_request = null, string $contentType = self::contentTypes['updateCouponPromotion'][0])
    {
        $this->updateCouponPromotionWithHttpInfo($project_id, $external_id, $update_coupon_promotion_request, $contentType);
    }

    /**
     * Operation updateCouponPromotionWithHttpInfo
     *
     * Update coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateCouponPromotionRequest|null $update_coupon_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCouponPromotion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponPromotionWithHttpInfo($project_id, $external_id, $update_coupon_promotion_request = null, string $contentType = self::contentTypes['updateCouponPromotion'][0])
    {
        $request = $this->updateCouponPromotionRequest($project_id, $external_id, $update_coupon_promotion_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject44',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCouponPromotionAsync
     *
     * Update coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateCouponPromotionRequest|null $update_coupon_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCouponPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponPromotionAsync($project_id, $external_id, $update_coupon_promotion_request = null, string $contentType = self::contentTypes['updateCouponPromotion'][0])
    {
        return $this->updateCouponPromotionAsyncWithHttpInfo($project_id, $external_id, $update_coupon_promotion_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCouponPromotionAsyncWithHttpInfo
     *
     * Update coupon promotion
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateCouponPromotionRequest|null $update_coupon_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCouponPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponPromotionAsyncWithHttpInfo($project_id, $external_id, $update_coupon_promotion_request = null, string $contentType = self::contentTypes['updateCouponPromotion'][0])
    {
        $returnType = '';
        $request = $this->updateCouponPromotionRequest($project_id, $external_id, $update_coupon_promotion_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCouponPromotion'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $external_id Promotion external ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\UpdateCouponPromotionRequest|null $update_coupon_promotion_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCouponPromotion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCouponPromotionRequest($project_id, $external_id, $update_coupon_promotion_request = null, string $contentType = self::contentTypes['updateCouponPromotion'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling updateCouponPromotion'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling updateCouponPromotion'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/coupon/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_coupon_promotion_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_coupon_promotion_request));
            } else {
                $httpBody = $update_coupon_promotion_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
