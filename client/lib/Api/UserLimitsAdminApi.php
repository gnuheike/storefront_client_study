<?php
/**
 * UserLimitsAdminApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UserLimitsAdminApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserLimitsAdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addUserItemLimit' => [
            'application/json',
        ],
        'addUserPromotionLimit' => [
            'application/json',
        ],
        'getUserItemLimit' => [
            'application/json',
        ],
        'getUserPromotionLimit' => [
            'application/json',
        ],
        'removeUserItemLimit' => [
            'application/json',
        ],
        'removeUserPromotionLimit' => [
            'application/json',
        ],
        'resetAllUserItemsLimit' => [
            'application/json',
        ],
        'resetAllUserPromotionsLimit' => [
            'application/json',
        ],
        'resetUserItemLimit' => [
            'application/json',
        ],
        'resetUserPromotionLimit' => [
            'application/json',
        ],
        'setUserItemLimit' => [
            'application/json',
        ],
        'setUserPromotionLimit' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addUserItemLimit
     *
     * Increase number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function addUserItemLimit($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserItemLimit'][0])
    {
        list($response) = $this->addUserItemLimitWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation addUserItemLimitWithHttpInfo
     *
     * Increase number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserItemLimitWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserItemLimit'][0])
    {
        $request = $this->addUserItemLimitRequest($project_id, $item_sku, $add_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitItem',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addUserItemLimitAsync
     *
     * Increase number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUserItemLimitAsync($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserItemLimit'][0])
    {
        return $this->addUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUserItemLimitAsyncWithHttpInfo
     *
     * Increase number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserItemLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitItem';
        $request = $this->addUserItemLimitRequest($project_id, $item_sku, $add_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addUserItemLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addUserItemLimitRequest($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserItemLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling addUserItemLimit'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling addUserItemLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_user_item_limit_request));
            } else {
                $httpBody = $add_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addUserPromotionLimit
     *
     * Increase promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function addUserPromotionLimit($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserPromotionLimit'][0])
    {
        list($response) = $this->addUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation addUserPromotionLimitWithHttpInfo
     *
     * Increase promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserPromotionLimit'][0])
    {
        $request = $this->addUserPromotionLimitRequest($project_id, $promotion_id, $add_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitPromotion',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addUserPromotionLimitAsync
     *
     * Increase promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUserPromotionLimitAsync($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserPromotionLimit'][0])
    {
        return $this->addUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUserPromotionLimitAsyncWithHttpInfo
     *
     * Increase promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitPromotion';
        $request = $this->addUserPromotionLimitRequest($project_id, $promotion_id, $add_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addUserPromotionLimitRequest($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['addUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling addUserPromotionLimit'
            );
        }

        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling addUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotion_id' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_user_item_limit_request));
            } else {
                $httpBody = $add_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserItemLimit
     *
     * Get number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function getUserItemLimit($project_id, $item_sku, $user_external_id, string $contentType = self::contentTypes['getUserItemLimit'][0])
    {
        list($response) = $this->getUserItemLimitWithHttpInfo($project_id, $item_sku, $user_external_id, $contentType);
        return $response;
    }

    /**
     * Operation getUserItemLimitWithHttpInfo
     *
     * Get number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserItemLimitWithHttpInfo($project_id, $item_sku, $user_external_id, string $contentType = self::contentTypes['getUserItemLimit'][0])
    {
        $request = $this->getUserItemLimitRequest($project_id, $item_sku, $user_external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitItem',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUserItemLimitAsync
     *
     * Get number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserItemLimitAsync($project_id, $item_sku, $user_external_id, string $contentType = self::contentTypes['getUserItemLimit'][0])
    {
        return $this->getUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $user_external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserItemLimitAsyncWithHttpInfo
     *
     * Get number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $user_external_id, string $contentType = self::contentTypes['getUserItemLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitItem';
        $request = $this->getUserItemLimitRequest($project_id, $item_sku, $user_external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserItemLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserItemLimitRequest($project_id, $item_sku, $user_external_id, string $contentType = self::contentTypes['getUserItemLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getUserItemLimit'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling getUserItemLimit'
            );
        }

        // verify the required parameter 'user_external_id' is set
        if ($user_external_id === null || (is_array($user_external_id) && count($user_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_external_id when calling getUserItemLimit'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_external_id,
            'user_external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserPromotionLimit
     *
     * Get promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function getUserPromotionLimit($project_id, $promotion_id, $user_external_id, string $contentType = self::contentTypes['getUserPromotionLimit'][0])
    {
        list($response) = $this->getUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $user_external_id, $contentType);
        return $response;
    }

    /**
     * Operation getUserPromotionLimitWithHttpInfo
     *
     * Get promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $user_external_id, string $contentType = self::contentTypes['getUserPromotionLimit'][0])
    {
        $request = $this->getUserPromotionLimitRequest($project_id, $promotion_id, $user_external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitPromotion',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUserPromotionLimitAsync
     *
     * Get promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPromotionLimitAsync($project_id, $promotion_id, $user_external_id, string $contentType = self::contentTypes['getUserPromotionLimit'][0])
    {
        return $this->getUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $user_external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserPromotionLimitAsyncWithHttpInfo
     *
     * Get promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $user_external_id, string $contentType = self::contentTypes['getUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitPromotion';
        $request = $this->getUserPromotionLimitRequest($project_id, $promotion_id, $user_external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  string $user_external_id User external ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserPromotionLimitRequest($project_id, $promotion_id, $user_external_id, string $contentType = self::contentTypes['getUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getUserPromotionLimit'
            );
        }

        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling getUserPromotionLimit'
            );
        }

        // verify the required parameter 'user_external_id' is set
        if ($user_external_id === null || (is_array($user_external_id) && count($user_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_external_id when calling getUserPromotionLimit'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_external_id,
            'user_external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotion_id' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeUserItemLimit
     *
     * Decrease number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function removeUserItemLimit($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserItemLimit'][0])
    {
        list($response) = $this->removeUserItemLimitWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation removeUserItemLimitWithHttpInfo
     *
     * Decrease number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeUserItemLimitWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserItemLimit'][0])
    {
        $request = $this->removeUserItemLimitRequest($project_id, $item_sku, $add_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitItem',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeUserItemLimitAsync
     *
     * Decrease number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeUserItemLimitAsync($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserItemLimit'][0])
    {
        return $this->removeUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeUserItemLimitAsyncWithHttpInfo
     *
     * Decrease number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserItemLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitItem';
        $request = $this->removeUserItemLimitRequest($project_id, $item_sku, $add_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeUserItemLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeUserItemLimitRequest($project_id, $item_sku, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserItemLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling removeUserItemLimit'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling removeUserItemLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_user_item_limit_request));
            } else {
                $httpBody = $add_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeUserPromotionLimit
     *
     * Decrease promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function removeUserPromotionLimit($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserPromotionLimit'][0])
    {
        list($response) = $this->removeUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation removeUserPromotionLimitWithHttpInfo
     *
     * Decrease promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserPromotionLimit'][0])
    {
        $request = $this->removeUserPromotionLimitRequest($project_id, $promotion_id, $add_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitPromotion',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeUserPromotionLimitAsync
     *
     * Decrease promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeUserPromotionLimitAsync($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserPromotionLimit'][0])
    {
        return $this->removeUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeUserPromotionLimitAsyncWithHttpInfo
     *
     * Decrease promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitPromotion';
        $request = $this->removeUserPromotionLimitRequest($project_id, $promotion_id, $add_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\AddUserItemLimitRequest|null $add_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeUserPromotionLimitRequest($project_id, $promotion_id, $add_user_item_limit_request = null, string $contentType = self::contentTypes['removeUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling removeUserPromotionLimit'
            );
        }

        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling removeUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotion_id' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_user_item_limit_request));
            } else {
                $httpBody = $add_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetAllUserItemsLimit
     *
     * Refresh all purchase limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserItemsLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resetAllUserItemsLimit($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserItemsLimit'][0])
    {
        $this->resetAllUserItemsLimitWithHttpInfo($project_id, $reset_all_user_items_limit_request, $contentType);
    }

    /**
     * Operation resetAllUserItemsLimitWithHttpInfo
     *
     * Refresh all purchase limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserItemsLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetAllUserItemsLimitWithHttpInfo($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserItemsLimit'][0])
    {
        $request = $this->resetAllUserItemsLimitRequest($project_id, $reset_all_user_items_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation resetAllUserItemsLimitAsync
     *
     * Refresh all purchase limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserItemsLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetAllUserItemsLimitAsync($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserItemsLimit'][0])
    {
        return $this->resetAllUserItemsLimitAsyncWithHttpInfo($project_id, $reset_all_user_items_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetAllUserItemsLimitAsyncWithHttpInfo
     *
     * Refresh all purchase limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserItemsLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetAllUserItemsLimitAsyncWithHttpInfo($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserItemsLimit'][0])
    {
        $returnType = '';
        $request = $this->resetAllUserItemsLimitRequest($project_id, $reset_all_user_items_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetAllUserItemsLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserItemsLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetAllUserItemsLimitRequest($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserItemsLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling resetAllUserItemsLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/item/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reset_all_user_items_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reset_all_user_items_limit_request));
            } else {
                $httpBody = $reset_all_user_items_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetAllUserPromotionsLimit
     *
     * Refresh all promotion limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserPromotionsLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resetAllUserPromotionsLimit($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserPromotionsLimit'][0])
    {
        $this->resetAllUserPromotionsLimitWithHttpInfo($project_id, $reset_all_user_items_limit_request, $contentType);
    }

    /**
     * Operation resetAllUserPromotionsLimitWithHttpInfo
     *
     * Refresh all promotion limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserPromotionsLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetAllUserPromotionsLimitWithHttpInfo($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserPromotionsLimit'][0])
    {
        $request = $this->resetAllUserPromotionsLimitRequest($project_id, $reset_all_user_items_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation resetAllUserPromotionsLimitAsync
     *
     * Refresh all promotion limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserPromotionsLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetAllUserPromotionsLimitAsync($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserPromotionsLimit'][0])
    {
        return $this->resetAllUserPromotionsLimitAsyncWithHttpInfo($project_id, $reset_all_user_items_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetAllUserPromotionsLimitAsyncWithHttpInfo
     *
     * Refresh all promotion limits for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserPromotionsLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetAllUserPromotionsLimitAsyncWithHttpInfo($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserPromotionsLimit'][0])
    {
        $returnType = '';
        $request = $this->resetAllUserPromotionsLimitRequest($project_id, $reset_all_user_items_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetAllUserPromotionsLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\ResetAllUserItemsLimitRequest|null $reset_all_user_items_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetAllUserPromotionsLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetAllUserPromotionsLimitRequest($project_id, $reset_all_user_items_limit_request = null, string $contentType = self::contentTypes['resetAllUserPromotionsLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling resetAllUserPromotionsLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/promotion/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reset_all_user_items_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reset_all_user_items_limit_request));
            } else {
                $httpBody = $reset_all_user_items_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetUserItemLimit
     *
     * Refresh purchase limit
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resetUserItemLimit($project_id, $item_sku, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserItemLimit'][0])
    {
        $this->resetUserItemLimitWithHttpInfo($project_id, $item_sku, $reset_user_item_limit_request, $contentType);
    }

    /**
     * Operation resetUserItemLimitWithHttpInfo
     *
     * Refresh purchase limit
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetUserItemLimitWithHttpInfo($project_id, $item_sku, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserItemLimit'][0])
    {
        $request = $this->resetUserItemLimitRequest($project_id, $item_sku, $reset_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation resetUserItemLimitAsync
     *
     * Refresh purchase limit
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetUserItemLimitAsync($project_id, $item_sku, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserItemLimit'][0])
    {
        return $this->resetUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $reset_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetUserItemLimitAsyncWithHttpInfo
     *
     * Refresh purchase limit
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserItemLimit'][0])
    {
        $returnType = '';
        $request = $this->resetUserItemLimitRequest($project_id, $item_sku, $reset_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetUserItemLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetUserItemLimitRequest($project_id, $item_sku, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserItemLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling resetUserItemLimit'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling resetUserItemLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reset_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reset_user_item_limit_request));
            } else {
                $httpBody = $reset_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetUserPromotionLimit
     *
     * Refresh promotion limit for users
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resetUserPromotionLimit($project_id, $promotion_id, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserPromotionLimit'][0])
    {
        $this->resetUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $reset_user_item_limit_request, $contentType);
    }

    /**
     * Operation resetUserPromotionLimitWithHttpInfo
     *
     * Refresh promotion limit for users
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserPromotionLimit'][0])
    {
        $request = $this->resetUserPromotionLimitRequest($project_id, $promotion_id, $reset_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation resetUserPromotionLimitAsync
     *
     * Refresh promotion limit for users
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetUserPromotionLimitAsync($project_id, $promotion_id, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserPromotionLimit'][0])
    {
        return $this->resetUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $reset_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetUserPromotionLimitAsyncWithHttpInfo
     *
     * Refresh promotion limit for users
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserPromotionLimit'][0])
    {
        $returnType = '';
        $request = $this->resetUserPromotionLimitRequest($project_id, $promotion_id, $reset_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\ResetUserItemLimitRequest|null $reset_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetUserPromotionLimitRequest($project_id, $promotion_id, $reset_user_item_limit_request = null, string $contentType = self::contentTypes['resetUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling resetUserPromotionLimit'
            );
        }

        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling resetUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotion_id' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reset_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reset_user_item_limit_request));
            } else {
                $httpBody = $reset_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserItemLimit
     *
     * Set number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function setUserItemLimit($project_id, $item_sku, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserItemLimit'][0])
    {
        list($response) = $this->setUserItemLimitWithHttpInfo($project_id, $item_sku, $set_user_item_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation setUserItemLimitWithHttpInfo
     *
     * Set number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserItemLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitItem|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserItemLimitWithHttpInfo($project_id, $item_sku, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserItemLimit'][0])
    {
        $request = $this->setUserItemLimitRequest($project_id, $item_sku, $set_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitItem',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setUserItemLimitAsync
     *
     * Set number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserItemLimitAsync($project_id, $item_sku, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserItemLimit'][0])
    {
        return $this->setUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $set_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setUserItemLimitAsyncWithHttpInfo
     *
     * Set number of items available to specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserItemLimitAsyncWithHttpInfo($project_id, $item_sku, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserItemLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitItem';
        $request = $this->setUserItemLimitRequest($project_id, $item_sku, $set_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setUserItemLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserItemLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setUserItemLimitRequest($project_id, $item_sku, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserItemLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling setUserItemLimit'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling setUserItemLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/item/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_user_item_limit_request));
            } else {
                $httpBody = $set_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserPromotionLimit
     *
     * Set promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response
     */
    public function setUserPromotionLimit($project_id, $promotion_id, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserPromotionLimit'][0])
    {
        list($response) = $this->setUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $set_user_item_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation setUserPromotionLimitWithHttpInfo
     *
     * Set promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserLimitPromotion|\OpenAPI\Client\Model\InlineObject1|\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response|\OpenAPI\Client\Model\ResetUserItemLimit422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserPromotionLimitWithHttpInfo($project_id, $promotion_id, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserPromotionLimit'][0])
    {
        $request = $this->setUserPromotionLimitRequest($project_id, $promotion_id, $set_user_item_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\UserLimitPromotion',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserLimitPromotion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetAllUserItemsLimit404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetUserItemLimit422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setUserPromotionLimitAsync
     *
     * Set promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserPromotionLimitAsync($project_id, $promotion_id, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserPromotionLimit'][0])
    {
        return $this->setUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $set_user_item_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setUserPromotionLimitAsyncWithHttpInfo
     *
     * Set promotion limit for specified user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserPromotionLimitAsyncWithHttpInfo($project_id, $promotion_id, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserPromotionLimit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserLimitPromotion';
        $request = $this->setUserPromotionLimitRequest($project_id, $promotion_id, $set_user_item_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setUserPromotionLimit'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int $promotion_id Promotion ID. Unique promotion identifier within the project. (required)
     * @param  \OpenAPI\Client\Model\SetUserItemLimitRequest|null $set_user_item_limit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserPromotionLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setUserPromotionLimitRequest($project_id, $promotion_id, $set_user_item_limit_request = null, string $contentType = self::contentTypes['setUserPromotionLimit'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling setUserPromotionLimit'
            );
        }

        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling setUserPromotionLimit'
            );
        }



        $resourcePath = '/v2/project/{project_id}/admin/user/limit/promotion/id/{promotion_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotion_id' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_user_item_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_user_item_limit_request));
            } else {
                $httpBody = $set_user_item_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
