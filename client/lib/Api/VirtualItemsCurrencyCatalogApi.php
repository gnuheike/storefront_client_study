<?php
/**
 * VirtualItemsCurrencyCatalogApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VirtualItemsCurrencyCatalogApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VirtualItemsCurrencyCatalogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAllVirtualItems' => [
            'application/json',
        ],
        'getItemGroups' => [
            'application/json',
        ],
        'getVirtualCurrency' => [
            'application/json',
        ],
        'getVirtualCurrencyPackage' => [
            'application/json',
        ],
        'getVirtualCurrencyPackageSku' => [
            'application/json',
        ],
        'getVirtualCurrencySku' => [
            'application/json',
        ],
        'getVirtualItems' => [
            'application/json',
        ],
        'getVirtualItemsGroup' => [
            'application/json',
        ],
        'getVirtualItemsSku' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllVirtualItems
     *
     * Get all virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllVirtualItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject67
     */
    public function getAllVirtualItems($project_id, $locale = 'en', $promo_code = null, string $contentType = self::contentTypes['getAllVirtualItems'][0])
    {
        list($response) = $this->getAllVirtualItemsWithHttpInfo($project_id, $locale, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation getAllVirtualItemsWithHttpInfo
     *
     * Get all virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllVirtualItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject67, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllVirtualItemsWithHttpInfo($project_id, $locale = 'en', $promo_code = null, string $contentType = self::contentTypes['getAllVirtualItems'][0])
    {
        $request = $this->getAllVirtualItemsRequest($project_id, $locale, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject67',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject67',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject67',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAllVirtualItemsAsync
     *
     * Get all virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllVirtualItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllVirtualItemsAsync($project_id, $locale = 'en', $promo_code = null, string $contentType = self::contentTypes['getAllVirtualItems'][0])
    {
        return $this->getAllVirtualItemsAsyncWithHttpInfo($project_id, $locale, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllVirtualItemsAsyncWithHttpInfo
     *
     * Get all virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllVirtualItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllVirtualItemsAsyncWithHttpInfo($project_id, $locale = 'en', $promo_code = null, string $contentType = self::contentTypes['getAllVirtualItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject67';
        $request = $this->getAllVirtualItemsRequest($project_id, $locale, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllVirtualItems'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllVirtualItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllVirtualItemsRequest($project_id, $locale = 'en', $promo_code = null, string $contentType = self::contentTypes['getAllVirtualItems'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getAllVirtualItems'
            );
        }


        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getAllVirtualItems, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getAllVirtualItems, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/items/virtual_items/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemGroups
     *
     * Get item group list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject70
     */
    public function getItemGroups($project_id, $promo_code = null, string $contentType = self::contentTypes['getItemGroups'][0])
    {
        list($response) = $this->getItemGroupsWithHttpInfo($project_id, $promo_code, $contentType);
        return $response;
    }

    /**
     * Operation getItemGroupsWithHttpInfo
     *
     * Get item group list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject70, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemGroupsWithHttpInfo($project_id, $promo_code = null, string $contentType = self::contentTypes['getItemGroups'][0])
    {
        $request = $this->getItemGroupsRequest($project_id, $promo_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject70',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject70',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject70',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getItemGroupsAsync
     *
     * Get item group list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemGroupsAsync($project_id, $promo_code = null, string $contentType = self::contentTypes['getItemGroups'][0])
    {
        return $this->getItemGroupsAsyncWithHttpInfo($project_id, $promo_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemGroupsAsyncWithHttpInfo
     *
     * Get item group list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemGroupsAsyncWithHttpInfo($project_id, $promo_code = null, string $contentType = self::contentTypes['getItemGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject70';
        $request = $this->getItemGroupsRequest($project_id, $promo_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemGroups'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemGroupsRequest($project_id, $promo_code = null, string $contentType = self::contentTypes['getItemGroups'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getItemGroups'
            );
        }

        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getItemGroups, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getItemGroups, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/project/{project_id}/items/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualCurrency
     *
     * Get virtual currency list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyList
     */
    public function getVirtualCurrency($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrency'][0])
    {
        list($response) = $this->getVirtualCurrencyWithHttpInfo($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualCurrencyWithHttpInfo
     *
     * Get virtual currency list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualCurrencyWithHttpInfo($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrency'][0])
    {
        $request = $this->getVirtualCurrencyRequest($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyList',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualCurrencyAsync
     *
     * Get virtual currency list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencyAsync($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrency'][0])
    {
        return $this->getVirtualCurrencyAsyncWithHttpInfo($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualCurrencyAsyncWithHttpInfo
     *
     * Get virtual currency list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencyAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrency'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyList';
        $request = $this->getVirtualCurrencyRequest($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualCurrency'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualCurrencyRequest($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrency'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualCurrency'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrency, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrency, must be bigger than or equal to 0.');
        }
        



        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrency, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrency, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/project/{project_id}/items/virtual_currency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_fields,
            'additional_fields[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualCurrencyPackage
     *
     * Get virtual currency package list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackages
     */
    public function getVirtualCurrencyPackage($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackage'][0])
    {
        list($response) = $this->getVirtualCurrencyPackageWithHttpInfo($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualCurrencyPackageWithHttpInfo
     *
     * Get virtual currency package list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackages, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualCurrencyPackageWithHttpInfo($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackage'][0])
    {
        $request = $this->getVirtualCurrencyPackageRequest($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackages',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackages',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualCurrencyPackageAsync
     *
     * Get virtual currency package list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencyPackageAsync($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackage'][0])
    {
        return $this->getVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualCurrencyPackageAsyncWithHttpInfo
     *
     * Get virtual currency package list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencyPackageAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackages';
        $request = $this->getVirtualCurrencyPackageRequest($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualCurrencyPackage'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualCurrencyPackageRequest($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackage'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualCurrencyPackage'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrencyPackage, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrencyPackage, must be bigger than or equal to 0.');
        }
        



        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrencyPackage, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualCurrencyPackage, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/project/{project_id}/items/virtual_currency/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_fields,
            'additional_fields[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualCurrencyPackageSku
     *
     * Get virtual currency package by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_package_sku Virtual currency package SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackageSku'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackage
     */
    public function getVirtualCurrencyPackageSku($project_id, $virtual_currency_package_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackageSku'][0])
    {
        list($response) = $this->getVirtualCurrencyPackageSkuWithHttpInfo($project_id, $virtual_currency_package_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualCurrencyPackageSkuWithHttpInfo
     *
     * Get virtual currency package by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_package_sku Virtual currency package SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackageSku'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualCurrencyPackageSkuWithHttpInfo($project_id, $virtual_currency_package_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackageSku'][0])
    {
        $request = $this->getVirtualCurrencyPackageSkuRequest($project_id, $virtual_currency_package_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackage',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualCurrencyPackageSkuAsync
     *
     * Get virtual currency package by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_package_sku Virtual currency package SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackageSku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencyPackageSkuAsync($project_id, $virtual_currency_package_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackageSku'][0])
    {
        return $this->getVirtualCurrencyPackageSkuAsyncWithHttpInfo($project_id, $virtual_currency_package_sku, $locale, $country, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualCurrencyPackageSkuAsyncWithHttpInfo
     *
     * Get virtual currency package by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_package_sku Virtual currency package SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackageSku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencyPackageSkuAsyncWithHttpInfo($project_id, $virtual_currency_package_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackageSku'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrencyPackage';
        $request = $this->getVirtualCurrencyPackageSkuRequest($project_id, $virtual_currency_package_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualCurrencyPackageSku'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_package_sku Virtual currency package SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencyPackageSku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualCurrencyPackageSkuRequest($project_id, $virtual_currency_package_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencyPackageSku'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualCurrencyPackageSku'
            );
        }

        // verify the required parameter 'virtual_currency_package_sku' is set
        if ($virtual_currency_package_sku === null || (is_array($virtual_currency_package_sku) && count($virtual_currency_package_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_currency_package_sku when calling getVirtualCurrencyPackageSku'
            );
        }





        $resourcePath = '/v2/project/{project_id}/items/virtual_currency/package/sku/{virtual_currency_package_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_currency_package_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'virtual_currency_package_sku' . '}',
                ObjectSerializer::toPathValue($virtual_currency_package_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualCurrencySku
     *
     * Get virtual currency by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencySku'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrency
     */
    public function getVirtualCurrencySku($project_id, $virtual_currency_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencySku'][0])
    {
        list($response) = $this->getVirtualCurrencySkuWithHttpInfo($project_id, $virtual_currency_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualCurrencySkuWithHttpInfo
     *
     * Get virtual currency by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencySku'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrency, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualCurrencySkuWithHttpInfo($project_id, $virtual_currency_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencySku'][0])
    {
        $request = $this->getVirtualCurrencySkuRequest($project_id, $virtual_currency_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrency',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrency',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualCurrencySkuAsync
     *
     * Get virtual currency by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencySku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencySkuAsync($project_id, $virtual_currency_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencySku'][0])
    {
        return $this->getVirtualCurrencySkuAsyncWithHttpInfo($project_id, $virtual_currency_sku, $locale, $country, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualCurrencySkuAsyncWithHttpInfo
     *
     * Get virtual currency by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencySku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualCurrencySkuAsyncWithHttpInfo($project_id, $virtual_currency_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencySku'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyVirtualCurrency';
        $request = $this->getVirtualCurrencySkuRequest($project_id, $virtual_currency_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualCurrencySku'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $virtual_currency_sku Virtual currency SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualCurrencySku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualCurrencySkuRequest($project_id, $virtual_currency_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualCurrencySku'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualCurrencySku'
            );
        }

        // verify the required parameter 'virtual_currency_sku' is set
        if ($virtual_currency_sku === null || (is_array($virtual_currency_sku) && count($virtual_currency_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_currency_sku when calling getVirtualCurrencySku'
            );
        }





        $resourcePath = '/v2/project/{project_id}/items/virtual_currency/sku/{virtual_currency_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_currency_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'virtual_currency_sku' . '}',
                ObjectSerializer::toPathValue($virtual_currency_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualItems
     *
     * Get virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyItemList
     */
    public function getVirtualItems($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItems'][0])
    {
        list($response) = $this->getVirtualItemsWithHttpInfo($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualItemsWithHttpInfo
     *
     * Get virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyItemList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualItemsWithHttpInfo($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItems'][0])
    {
        $request = $this->getVirtualItemsRequest($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyItemList',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyItemList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyItemList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualItemsAsync
     *
     * Get virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualItemsAsync($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItems'][0])
    {
        return $this->getVirtualItemsAsyncWithHttpInfo($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualItemsAsyncWithHttpInfo
     *
     * Get virtual items list
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualItemsAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItems'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyItemList';
        $request = $this->getVirtualItemsRequest($project_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualItems'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualItemsRequest($project_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItems'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualItems'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyCatalogApi.getVirtualItems, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyCatalogApi.getVirtualItems, must be bigger than or equal to 0.');
        }
        



        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualItems, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualItems, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/project/{project_id}/items/virtual_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_fields,
            'additional_fields[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualItemsGroup
     *
     * Get items list by specified group
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject68|\OpenAPI\Client\Model\InlineObject69
     */
    public function getVirtualItemsGroup($project_id, $external_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsGroup'][0])
    {
        list($response) = $this->getVirtualItemsGroupWithHttpInfo($project_id, $external_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualItemsGroupWithHttpInfo
     *
     * Get items list by specified group
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject68|\OpenAPI\Client\Model\InlineObject69, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualItemsGroupWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsGroup'][0])
    {
        $request = $this->getVirtualItemsGroupRequest($project_id, $external_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject68',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject69',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject68',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject68',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject69',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualItemsGroupAsync
     *
     * Get items list by specified group
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualItemsGroupAsync($project_id, $external_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsGroup'][0])
    {
        return $this->getVirtualItemsGroupAsyncWithHttpInfo($project_id, $external_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualItemsGroupAsyncWithHttpInfo
     *
     * Get items list by specified group
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualItemsGroupAsyncWithHttpInfo($project_id, $external_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsGroup'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject68';
        $request = $this->getVirtualItemsGroupRequest($project_id, $external_id, $limit, $offset, $locale, $additional_fields, $country, $promo_code, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualItemsGroup'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $external_id Group external ID. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. (optional)
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  string|null $promo_code Unique case sensitive code. Contains letters and numbers. (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualItemsGroupRequest($project_id, $external_id, $limit = null, $offset = null, $locale = 'en', $additional_fields = null, $country = null, $promo_code = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsGroup'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualItemsGroup'
            );
        }

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getVirtualItemsGroup'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VirtualItemsCurrencyCatalogApi.getVirtualItemsGroup, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling VirtualItemsCurrencyCatalogApi.getVirtualItemsGroup, must be bigger than or equal to 0.');
        }
        



        if ($promo_code !== null && strlen($promo_code) > 128) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualItemsGroup, must be smaller than or equal to 128.');
        }
        if ($promo_code !== null && strlen($promo_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$promo_code" when calling VirtualItemsCurrencyCatalogApi.getVirtualItemsGroup, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/project/{project_id}/items/virtual_items/group/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_fields,
            'additional_fields[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $promo_code,
            'promo_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVirtualItemsSku
     *
     * Get virtual item by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsSku'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyItem|\OpenAPI\Client\Model\InlineObject12
     */
    public function getVirtualItemsSku($project_id, $item_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsSku'][0])
    {
        list($response) = $this->getVirtualItemsSkuWithHttpInfo($project_id, $item_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);
        return $response;
    }

    /**
     * Operation getVirtualItemsSkuWithHttpInfo
     *
     * Get virtual item by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsSku'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VirtualItemsCurrencyItem|\OpenAPI\Client\Model\InlineObject12, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVirtualItemsSkuWithHttpInfo($project_id, $item_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsSku'][0])
    {
        $request = $this->getVirtualItemsSkuRequest($project_id, $item_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyItem',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject12',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\VirtualItemsCurrencyItem',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VirtualItemsCurrencyItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject12',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getVirtualItemsSkuAsync
     *
     * Get virtual item by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsSku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualItemsSkuAsync($project_id, $item_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsSku'][0])
    {
        return $this->getVirtualItemsSkuAsyncWithHttpInfo($project_id, $item_sku, $locale, $country, $show_inactive_time_limited_items, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVirtualItemsSkuAsyncWithHttpInfo
     *
     * Get virtual item by SKU
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsSku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVirtualItemsSkuAsyncWithHttpInfo($project_id, $item_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsSku'][0])
    {
        $returnType = '\OpenAPI\Client\Model\VirtualItemsCurrencyItem';
        $request = $this->getVirtualItemsSkuRequest($project_id, $item_sku, $locale, $country, $show_inactive_time_limited_items, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVirtualItemsSku'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  string $item_sku Item SKU. (required)
     * @param  string|null $locale Response language. Two-letter lowercase language code per ISO 639-1. (optional, default to 'en')
     * @param  string|null $country Two-letter uppercase country code per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Check the documentation for detailed information about [countries supported by Xsolla](https://developers.xsolla.com/doc/shop-builder/references/supported-countries/) and [the process of determining the country](https://developers.xsolla.com/doc/shop-builder/features/pricing-policy/#pricing_policy_country_determination). (optional)
     * @param  int|null $show_inactive_time_limited_items Shows time-limited items that are not available to the user. The validity period of such items has not started or has already expired. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVirtualItemsSku'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVirtualItemsSkuRequest($project_id, $item_sku, $locale = 'en', $country = null, $show_inactive_time_limited_items = 0, string $contentType = self::contentTypes['getVirtualItemsSku'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getVirtualItemsSku'
            );
        }

        // verify the required parameter 'item_sku' is set
        if ($item_sku === null || (is_array($item_sku) && count($item_sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_sku when calling getVirtualItemsSku'
            );
        }





        $resourcePath = '/v2/project/{project_id}/items/virtual_items/sku/{item_sku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locale,
            'locale', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_inactive_time_limited_items,
            'show_inactive_time_limited_items', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }
        // path params
        if ($item_sku !== null) {
            $resourcePath = str_replace(
                '{' . 'item_sku' . '}',
                ObjectSerializer::toPathValue($item_sku),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
