<?php
/**
 * VirtualItemsCurrencyAdminCreateVirtualCurrency
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VirtualItemsCurrencyAdminCreateVirtualCurrency Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VirtualItemsCurrencyAdminCreateVirtualCurrency implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Virtual-Items-Currency_admin-create-virtual-currency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku' => 'string',
        'name' => '\OpenAPI\Client\Model\NameLocalizationObject',
        'description' => '\OpenAPI\Client\Model\DescriptionLocalizationObject',
        'long_description' => '\OpenAPI\Client\Model\LongDescriptionLocalizationObject',
        'image_url' => 'string',
        'media_list' => '\OpenAPI\Client\Model\AdminCreateGameRequestMediaListInner[]',
        'groups' => '\OpenAPI\Client\Model\BundlesGroupsResponseInner[]',
        'attributes' => '\OpenAPI\Client\Model\AdminPostPutAttributeItem[]',
        'prices' => '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminPricesInner[]',
        'vc_prices' => '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVcPricesInner[]',
        'is_enabled' => 'bool',
        'is_deleted' => 'bool',
        'is_show_in_store' => 'bool',
        'is_free' => 'bool',
        'is_hard' => 'bool',
        'order' => 'int',
        'pre_order' => '\OpenAPI\Client\Model\VirtualItemsCurrencyAdminPreOrder',
        'regions' => '\OpenAPI\Client\Model\BundlesAdminRegionsInner[]',
        'limits' => '\OpenAPI\Client\Model\ItemLimit',
        'periods' => '\OpenAPI\Client\Model\ItemPeriodsInner[]',
        'custom_attributes' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku' => null,
        'name' => null,
        'description' => null,
        'long_description' => null,
        'image_url' => null,
        'media_list' => null,
        'groups' => null,
        'attributes' => null,
        'prices' => null,
        'vc_prices' => null,
        'is_enabled' => null,
        'is_deleted' => null,
        'is_show_in_store' => null,
        'is_free' => null,
        'is_hard' => null,
        'order' => null,
        'pre_order' => null,
        'regions' => null,
        'limits' => null,
        'periods' => null,
        'custom_attributes' => 'json'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sku' => false,
        'name' => true,
        'description' => true,
        'long_description' => true,
        'image_url' => false,
        'media_list' => false,
        'groups' => false,
        'attributes' => false,
        'prices' => false,
        'vc_prices' => false,
        'is_enabled' => false,
        'is_deleted' => false,
        'is_show_in_store' => false,
        'is_free' => false,
        'is_hard' => false,
        'order' => false,
        'pre_order' => false,
        'regions' => false,
        'limits' => false,
        'periods' => true,
        'custom_attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'name' => 'name',
        'description' => 'description',
        'long_description' => 'long_description',
        'image_url' => 'image_url',
        'media_list' => 'media_list',
        'groups' => 'groups',
        'attributes' => 'attributes',
        'prices' => 'prices',
        'vc_prices' => 'vc_prices',
        'is_enabled' => 'is_enabled',
        'is_deleted' => 'is_deleted',
        'is_show_in_store' => 'is_show_in_store',
        'is_free' => 'is_free',
        'is_hard' => 'is_hard',
        'order' => 'order',
        'pre_order' => 'pre_order',
        'regions' => 'regions',
        'limits' => 'limits',
        'periods' => 'periods',
        'custom_attributes' => 'custom_attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'name' => 'setName',
        'description' => 'setDescription',
        'long_description' => 'setLongDescription',
        'image_url' => 'setImageUrl',
        'media_list' => 'setMediaList',
        'groups' => 'setGroups',
        'attributes' => 'setAttributes',
        'prices' => 'setPrices',
        'vc_prices' => 'setVcPrices',
        'is_enabled' => 'setIsEnabled',
        'is_deleted' => 'setIsDeleted',
        'is_show_in_store' => 'setIsShowInStore',
        'is_free' => 'setIsFree',
        'is_hard' => 'setIsHard',
        'order' => 'setOrder',
        'pre_order' => 'setPreOrder',
        'regions' => 'setRegions',
        'limits' => 'setLimits',
        'periods' => 'setPeriods',
        'custom_attributes' => 'setCustomAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'name' => 'getName',
        'description' => 'getDescription',
        'long_description' => 'getLongDescription',
        'image_url' => 'getImageUrl',
        'media_list' => 'getMediaList',
        'groups' => 'getGroups',
        'attributes' => 'getAttributes',
        'prices' => 'getPrices',
        'vc_prices' => 'getVcPrices',
        'is_enabled' => 'getIsEnabled',
        'is_deleted' => 'getIsDeleted',
        'is_show_in_store' => 'getIsShowInStore',
        'is_free' => 'getIsFree',
        'is_hard' => 'getIsHard',
        'order' => 'getOrder',
        'pre_order' => 'getPreOrder',
        'regions' => 'getRegions',
        'limits' => 'getLimits',
        'periods' => 'getPeriods',
        'custom_attributes' => 'getCustomAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('media_list', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('prices', $data ?? [], null);
        $this->setIfExists('vc_prices', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_show_in_store', $data ?? [], null);
        $this->setIfExists('is_free', $data ?? [], false);
        $this->setIfExists('is_hard', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('pre_order', $data ?? [], null);
        $this->setIfExists('regions', $data ?? [], null);
        $this->setIfExists('limits', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
        $this->setIfExists('custom_attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ((mb_strlen($this->container['sku']) > 255)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['sku']) < 1)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9_\\-–.]*$/", $this->container['sku'])) {
            $invalidProperties[] = "invalid value for 'sku', must be conform to the pattern /^[a-zA-Z0-9_\\-–.]*$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!is_null($this->container['attributes']) && (count($this->container['attributes']) > 20)) {
            $invalidProperties[] = "invalid value for 'attributes', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Unique item ID. The SKU may contain only lowercase and uppercase Latin alphanumeric characters, periods, dashes, and underscores.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        if ((mb_strlen($sku) > 255)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling VirtualItemsCurrencyAdminCreateVirtualCurrency., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($sku) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling VirtualItemsCurrencyAdminCreateVirtualCurrency., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_\\-–.]*$/", ObjectSerializer::toString($sku)))) {
            throw new \InvalidArgumentException("invalid value for \$sku when calling VirtualItemsCurrencyAdminCreateVirtualCurrency., must conform to the pattern /^[a-zA-Z0-9_\\-–.]*$/.");
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\NameLocalizationObject
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\NameLocalizationObject $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\DescriptionLocalizationObject|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\DescriptionLocalizationObject|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return \OpenAPI\Client\Model\LongDescriptionLocalizationObject|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param \OpenAPI\Client\Model\LongDescriptionLocalizationObject|null $long_description long_description
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets media_list
     *
     * @return \OpenAPI\Client\Model\AdminCreateGameRequestMediaListInner[]|null
     */
    public function getMediaList()
    {
        return $this->container['media_list'];
    }

    /**
     * Sets media_list
     *
     * @param \OpenAPI\Client\Model\AdminCreateGameRequestMediaListInner[]|null $media_list Item's additional assets such as screenshots, gameplay video and so on.
     *
     * @return self
     */
    public function setMediaList($media_list)
    {
        if (is_null($media_list)) {
            throw new \InvalidArgumentException('non-nullable media_list cannot be null');
        }
        $this->container['media_list'] = $media_list;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \OpenAPI\Client\Model\BundlesGroupsResponseInner[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \OpenAPI\Client\Model\BundlesGroupsResponseInner[]|null $groups Groups the item belongs to.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\AdminPostPutAttributeItem[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\AdminPostPutAttributeItem[]|null $attributes List of attributes. <div class=\"notice\"><strong>Attention.</strong> You <strong>can't specify more than 20 attributes</strong> for the item. Any attempts to exceed the limit result in an error.</div>
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }

        if ((count($attributes) > 20)) {
            throw new \InvalidArgumentException('invalid value for $attributes when calling VirtualItemsCurrencyAdminCreateVirtualCurrency., number of items must be less than or equal to 20.');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyAdminPricesInner[]|null
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \OpenAPI\Client\Model\VirtualItemsCurrencyAdminPricesInner[]|null $prices prices
     *
     * @return self
     */
    public function setPrices($prices)
    {
        if (is_null($prices)) {
            throw new \InvalidArgumentException('non-nullable prices cannot be null');
        }
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets vc_prices
     *
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVcPricesInner[]|null
     */
    public function getVcPrices()
    {
        return $this->container['vc_prices'];
    }

    /**
     * Sets vc_prices
     *
     * @param \OpenAPI\Client\Model\VirtualItemsCurrencyAdminCreateVcPricesInner[]|null $vc_prices vc_prices
     *
     * @return self
     */
    public function setVcPrices($vc_prices)
    {
        if (is_null($vc_prices)) {
            throw new \InvalidArgumentException('non-nullable vc_prices cannot be null');
        }
        $this->container['vc_prices'] = $vc_prices;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled is_enabled
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_show_in_store
     *
     * @return bool|null
     */
    public function getIsShowInStore()
    {
        return $this->container['is_show_in_store'];
    }

    /**
     * Sets is_show_in_store
     *
     * @param bool|null $is_show_in_store is_show_in_store
     *
     * @return self
     */
    public function setIsShowInStore($is_show_in_store)
    {
        if (is_null($is_show_in_store)) {
            throw new \InvalidArgumentException('non-nullable is_show_in_store cannot be null');
        }
        $this->container['is_show_in_store'] = $is_show_in_store;

        return $this;
    }

    /**
     * Gets is_free
     *
     * @return bool|null
     */
    public function getIsFree()
    {
        return $this->container['is_free'];
    }

    /**
     * Sets is_free
     *
     * @param bool|null $is_free If `true`, the item is free.
     *
     * @return self
     */
    public function setIsFree($is_free)
    {
        if (is_null($is_free)) {
            throw new \InvalidArgumentException('non-nullable is_free cannot be null');
        }
        $this->container['is_free'] = $is_free;

        return $this;
    }

    /**
     * Gets is_hard
     *
     * @return bool|null
     */
    public function getIsHard()
    {
        return $this->container['is_hard'];
    }

    /**
     * Sets is_hard
     *
     * @param bool|null $is_hard is_hard
     *
     * @return self
     */
    public function setIsHard($is_hard)
    {
        if (is_null($is_hard)) {
            throw new \InvalidArgumentException('non-nullable is_hard cannot be null');
        }
        $this->container['is_hard'] = $is_hard;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order Defines arrangement order.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets pre_order
     *
     * @return \OpenAPI\Client\Model\VirtualItemsCurrencyAdminPreOrder|null
     */
    public function getPreOrder()
    {
        return $this->container['pre_order'];
    }

    /**
     * Sets pre_order
     *
     * @param \OpenAPI\Client\Model\VirtualItemsCurrencyAdminPreOrder|null $pre_order pre_order
     *
     * @return self
     */
    public function setPreOrder($pre_order)
    {
        if (is_null($pre_order)) {
            throw new \InvalidArgumentException('non-nullable pre_order cannot be null');
        }
        $this->container['pre_order'] = $pre_order;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return \OpenAPI\Client\Model\BundlesAdminRegionsInner[]|null
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param \OpenAPI\Client\Model\BundlesAdminRegionsInner[]|null $regions regions
     *
     * @return self
     */
    public function setRegions($regions)
    {
        if (is_null($regions)) {
            throw new \InvalidArgumentException('non-nullable regions cannot be null');
        }
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \OpenAPI\Client\Model\ItemLimit|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \OpenAPI\Client\Model\ItemLimit|null $limits limits
     *
     * @return self
     */
    public function setLimits($limits)
    {
        if (is_null($limits)) {
            throw new \InvalidArgumentException('non-nullable limits cannot be null');
        }
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \OpenAPI\Client\Model\ItemPeriodsInner[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \OpenAPI\Client\Model\ItemPeriodsInner[]|null $periods Item sales period.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            array_push($this->openAPINullablesSetToNull, 'periods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('periods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['periods'] = $periods;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return object|null
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param object|null $custom_attributes A JSON object containing item attributes and values. Attributes allow you to add more info to items like the player's required level to use the item. Attributes enrich your game's internal logic and are accessible through dedicated GET methods and webhooks.
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        if (is_null($custom_attributes)) {
            throw new \InvalidArgumentException('non-nullable custom_attributes cannot be null');
        }


        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


