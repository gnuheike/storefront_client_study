<?php
/**
 * RecurrentSchedulePerUser
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecurrentSchedulePerUser Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecurrentSchedulePerUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recurrent_schedule_per_user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interval_type' => 'string',
        'time' => 'string',
        'day_of_week' => 'int',
        'day_of_month' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'interval_type' => null,
        'time' => null,
        'day_of_week' => null,
        'day_of_month' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'interval_type' => false,
        'time' => false,
        'day_of_week' => false,
        'day_of_month' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interval_type' => 'interval_type',
        'time' => 'time',
        'day_of_week' => 'day_of_week',
        'day_of_month' => 'day_of_month'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interval_type' => 'setIntervalType',
        'time' => 'setTime',
        'day_of_week' => 'setDayOfWeek',
        'day_of_month' => 'setDayOfMonth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interval_type' => 'getIntervalType',
        'time' => 'getTime',
        'day_of_week' => 'getDayOfWeek',
        'day_of_month' => 'getDayOfMonth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INTERVAL_TYPE_MONTHLY = 'monthly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalTypeAllowableValues()
    {
        return [
            self::INTERVAL_TYPE_MONTHLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('interval_type', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('day_of_week', $data ?? [], null);
        $this->setIfExists('day_of_month', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['interval_type'] === null) {
            $invalidProperties[] = "'interval_type' can't be null";
        }
        $allowedValues = $this->getIntervalTypeAllowableValues();
        if (!is_null($this->container['interval_type']) && !in_array($this->container['interval_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval_type', must be one of '%s'",
                $this->container['interval_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if (!preg_match("/((0[0-9]|1[0-9]|2[0-3]):00:00)(\\+|-)(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])/", $this->container['time'])) {
            $invalidProperties[] = "invalid value for 'time', must be conform to the pattern /((0[0-9]|1[0-9]|2[0-3]):00:00)(\\+|-)(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])/.";
        }

        if ($this->container['day_of_week'] === null) {
            $invalidProperties[] = "'day_of_week' can't be null";
        }
        if (($this->container['day_of_week'] > 7)) {
            $invalidProperties[] = "invalid value for 'day_of_week', must be smaller than or equal to 7.";
        }

        if (($this->container['day_of_week'] < 1)) {
            $invalidProperties[] = "invalid value for 'day_of_week', must be bigger than or equal to 1.";
        }

        if ($this->container['day_of_month'] === null) {
            $invalidProperties[] = "'day_of_month' can't be null";
        }
        if (($this->container['day_of_month'] > 31)) {
            $invalidProperties[] = "invalid value for 'day_of_month', must be smaller than or equal to 31.";
        }

        if (($this->container['day_of_month'] < 1)) {
            $invalidProperties[] = "invalid value for 'day_of_month', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interval_type
     *
     * @return string
     */
    public function getIntervalType()
    {
        return $this->container['interval_type'];
    }

    /**
     * Sets interval_type
     *
     * @param string $interval_type Recurrent refresh period.
     *
     * @return self
     */
    public function setIntervalType($interval_type)
    {
        if (is_null($interval_type)) {
            throw new \InvalidArgumentException('non-nullable interval_type cannot be null');
        }
        $allowedValues = $this->getIntervalTypeAllowableValues();
        if (!in_array($interval_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval_type', must be one of '%s'",
                    $interval_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval_type'] = $interval_type;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time Time of limit refresh in the desired time zone (rounding to hours).
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }

        if ((!preg_match("/((0[0-9]|1[0-9]|2[0-3]):00:00)(\\+|-)(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])/", ObjectSerializer::toString($time)))) {
            throw new \InvalidArgumentException("invalid value for \$time when calling RecurrentSchedulePerUser., must conform to the pattern /((0[0-9]|1[0-9]|2[0-3]):00:00)(\\+|-)(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])/.");
        }

        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return int
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param int $day_of_week Day of the week when the limits refresh. Where 1 is Monday and 7 is Sunday.
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        if (is_null($day_of_week)) {
            throw new \InvalidArgumentException('non-nullable day_of_week cannot be null');
        }

        if (($day_of_week > 7)) {
            throw new \InvalidArgumentException('invalid value for $day_of_week when calling RecurrentSchedulePerUser., must be smaller than or equal to 7.');
        }
        if (($day_of_week < 1)) {
            throw new \InvalidArgumentException('invalid value for $day_of_week when calling RecurrentSchedulePerUser., must be bigger than or equal to 1.');
        }

        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets day_of_month
     *
     * @return int
     */
    public function getDayOfMonth()
    {
        return $this->container['day_of_month'];
    }

    /**
     * Sets day_of_month
     *
     * @param int $day_of_month Day of the month when limits refresh. If there's no selected day in the month as it's shorter, then the refresh will occur on the last day of the month.
     *
     * @return self
     */
    public function setDayOfMonth($day_of_month)
    {
        if (is_null($day_of_month)) {
            throw new \InvalidArgumentException('non-nullable day_of_month cannot be null');
        }

        if (($day_of_month > 31)) {
            throw new \InvalidArgumentException('invalid value for $day_of_month when calling RecurrentSchedulePerUser., must be smaller than or equal to 31.');
        }
        if (($day_of_month < 1)) {
            throw new \InvalidArgumentException('invalid value for $day_of_month when calling RecurrentSchedulePerUser., must be bigger than or equal to 1.');
        }

        $this->container['day_of_month'] = $day_of_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


