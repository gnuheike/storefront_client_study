<?php
/**
 * GameKeysEntitlementApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GameKeysEntitlementApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GameKeysEntitlementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getUserGames' => [
            'application/json',
        ],
        'grantEntitlementAdmin' => [
            'application/json',
        ],
        'redeemGamePinCode' => [
            'application/json',
        ],
        'revokeEntitlementAdmin' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getUserGames
     *
     * Get list of games owned by user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $sandbox What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn&#39;t passed or is set to 0, the entitlements received by the user in the live mode only are returned. (optional, default to 0)
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. Available fields &#x60;attributes&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserGames'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject32|\OpenAPI\Client\Model\InlineObject1
     */
    public function getUserGames($project_id, $limit = null, $offset = null, $sandbox = 0, $additional_fields = null, string $contentType = self::contentTypes['getUserGames'][0])
    {
        list($response) = $this->getUserGamesWithHttpInfo($project_id, $limit, $offset, $sandbox, $additional_fields, $contentType);
        return $response;
    }

    /**
     * Operation getUserGamesWithHttpInfo
     *
     * Get list of games owned by user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $sandbox What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn&#39;t passed or is set to 0, the entitlements received by the user in the live mode only are returned. (optional, default to 0)
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. Available fields &#x60;attributes&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserGames'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject32|\OpenAPI\Client\Model\InlineObject1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserGamesWithHttpInfo($project_id, $limit = null, $offset = null, $sandbox = 0, $additional_fields = null, string $contentType = self::contentTypes['getUserGames'][0])
    {
        $request = $this->getUserGamesRequest($project_id, $limit, $offset, $sandbox, $additional_fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject32',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InlineObject1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InlineObject32',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject32',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getUserGamesAsync
     *
     * Get list of games owned by user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $sandbox What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn&#39;t passed or is set to 0, the entitlements received by the user in the live mode only are returned. (optional, default to 0)
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. Available fields &#x60;attributes&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserGamesAsync($project_id, $limit = null, $offset = null, $sandbox = 0, $additional_fields = null, string $contentType = self::contentTypes['getUserGames'][0])
    {
        return $this->getUserGamesAsyncWithHttpInfo($project_id, $limit, $offset, $sandbox, $additional_fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserGamesAsyncWithHttpInfo
     *
     * Get list of games owned by user
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $sandbox What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn&#39;t passed or is set to 0, the entitlements received by the user in the live mode only are returned. (optional, default to 0)
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. Available fields &#x60;attributes&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserGamesAsyncWithHttpInfo($project_id, $limit = null, $offset = null, $sandbox = 0, $additional_fields = null, string $contentType = self::contentTypes['getUserGames'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject32';
        $request = $this->getUserGamesRequest($project_id, $limit, $offset, $sandbox, $additional_fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserGames'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  int|null $limit Limit for the number of elements on the page. (optional)
     * @param  int|null $offset Number of the element from which the list is generated (the count starts from 0). (optional)
     * @param  int|null $sandbox What type of entitlements should be returned. If the parameter is set to 1, the entitlements received by the user in the sandbox mode only are returned. If the parameter isn&#39;t passed or is set to 0, the entitlements received by the user in the live mode only are returned. (optional, default to 0)
     * @param  string[]|null $additional_fields The list of additional fields. These fields will be in the response if you send them in your request. Available fields &#x60;attributes&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserGamesRequest($project_id, $limit = null, $offset = null, $sandbox = 0, $additional_fields = null, string $contentType = self::contentTypes['getUserGames'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling getUserGames'
            );
        }

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling GameKeysEntitlementApi.getUserGames, must be bigger than or equal to 1.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling GameKeysEntitlementApi.getUserGames, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/v2/project/{project_id}/entitlement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sandbox,
            'sandbox', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_fields,
            'additional_fields[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation grantEntitlementAdmin
     *
     * Grant entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\GrantEntitlementAdminRequest $grant_entitlement_admin_request grant_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function grantEntitlementAdmin($project_id, $grant_entitlement_admin_request, string $contentType = self::contentTypes['grantEntitlementAdmin'][0])
    {
        $this->grantEntitlementAdminWithHttpInfo($project_id, $grant_entitlement_admin_request, $contentType);
    }

    /**
     * Operation grantEntitlementAdminWithHttpInfo
     *
     * Grant entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\GrantEntitlementAdminRequest $grant_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function grantEntitlementAdminWithHttpInfo($project_id, $grant_entitlement_admin_request, string $contentType = self::contentTypes['grantEntitlementAdmin'][0])
    {
        $request = $this->grantEntitlementAdminRequest($project_id, $grant_entitlement_admin_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RedeemGamePinCode404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RedeemGamePinCode422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation grantEntitlementAdminAsync
     *
     * Grant entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\GrantEntitlementAdminRequest $grant_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function grantEntitlementAdminAsync($project_id, $grant_entitlement_admin_request, string $contentType = self::contentTypes['grantEntitlementAdmin'][0])
    {
        return $this->grantEntitlementAdminAsyncWithHttpInfo($project_id, $grant_entitlement_admin_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation grantEntitlementAdminAsyncWithHttpInfo
     *
     * Grant entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\GrantEntitlementAdminRequest $grant_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function grantEntitlementAdminAsyncWithHttpInfo($project_id, $grant_entitlement_admin_request, string $contentType = self::contentTypes['grantEntitlementAdmin'][0])
    {
        $returnType = '';
        $request = $this->grantEntitlementAdminRequest($project_id, $grant_entitlement_admin_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'grantEntitlementAdmin'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\GrantEntitlementAdminRequest $grant_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['grantEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function grantEntitlementAdminRequest($project_id, $grant_entitlement_admin_request, string $contentType = self::contentTypes['grantEntitlementAdmin'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling grantEntitlementAdmin'
            );
        }

        // verify the required parameter 'grant_entitlement_admin_request' is set
        if ($grant_entitlement_admin_request === null || (is_array($grant_entitlement_admin_request) && count($grant_entitlement_admin_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_entitlement_admin_request when calling grantEntitlementAdmin'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/entitlement/grant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($grant_entitlement_admin_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($grant_entitlement_admin_request));
            } else {
                $httpBody = $grant_entitlement_admin_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemGamePinCode
     *
     * Redeem game code by client
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemGamePinCodeRequest $redeem_game_pin_code_request redeem_game_pin_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemGamePinCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function redeemGamePinCode($project_id, $redeem_game_pin_code_request, string $contentType = self::contentTypes['redeemGamePinCode'][0])
    {
        $this->redeemGamePinCodeWithHttpInfo($project_id, $redeem_game_pin_code_request, $contentType);
    }

    /**
     * Operation redeemGamePinCodeWithHttpInfo
     *
     * Redeem game code by client
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemGamePinCodeRequest $redeem_game_pin_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemGamePinCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemGamePinCodeWithHttpInfo($project_id, $redeem_game_pin_code_request, string $contentType = self::contentTypes['redeemGamePinCode'][0])
    {
        $request = $this->redeemGamePinCodeRequest($project_id, $redeem_game_pin_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RedeemGamePinCode404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RedeemGamePinCode422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation redeemGamePinCodeAsync
     *
     * Redeem game code by client
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemGamePinCodeRequest $redeem_game_pin_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemGamePinCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemGamePinCodeAsync($project_id, $redeem_game_pin_code_request, string $contentType = self::contentTypes['redeemGamePinCode'][0])
    {
        return $this->redeemGamePinCodeAsyncWithHttpInfo($project_id, $redeem_game_pin_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemGamePinCodeAsyncWithHttpInfo
     *
     * Redeem game code by client
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemGamePinCodeRequest $redeem_game_pin_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemGamePinCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemGamePinCodeAsyncWithHttpInfo($project_id, $redeem_game_pin_code_request, string $contentType = self::contentTypes['redeemGamePinCode'][0])
    {
        $returnType = '';
        $request = $this->redeemGamePinCodeRequest($project_id, $redeem_game_pin_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemGamePinCode'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RedeemGamePinCodeRequest $redeem_game_pin_code_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemGamePinCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redeemGamePinCodeRequest($project_id, $redeem_game_pin_code_request, string $contentType = self::contentTypes['redeemGamePinCode'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling redeemGamePinCode'
            );
        }

        // verify the required parameter 'redeem_game_pin_code_request' is set
        if ($redeem_game_pin_code_request === null || (is_array($redeem_game_pin_code_request) && count($redeem_game_pin_code_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redeem_game_pin_code_request when calling redeemGamePinCode'
            );
        }


        $resourcePath = '/v2/project/{project_id}/entitlement/redeem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($redeem_game_pin_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($redeem_game_pin_code_request));
            } else {
                $httpBody = $redeem_game_pin_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeEntitlementAdmin
     *
     * Revoke entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RevokeEntitlementAdminRequest $revoke_entitlement_admin_request revoke_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function revokeEntitlementAdmin($project_id, $revoke_entitlement_admin_request, string $contentType = self::contentTypes['revokeEntitlementAdmin'][0])
    {
        $this->revokeEntitlementAdminWithHttpInfo($project_id, $revoke_entitlement_admin_request, $contentType);
    }

    /**
     * Operation revokeEntitlementAdminWithHttpInfo
     *
     * Revoke entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RevokeEntitlementAdminRequest $revoke_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeEntitlementAdminWithHttpInfo($project_id, $revoke_entitlement_admin_request, string $contentType = self::contentTypes['revokeEntitlementAdmin'][0])
    {
        $request = $this->revokeEntitlementAdminRequest($project_id, $revoke_entitlement_admin_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RedeemGamePinCode422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation revokeEntitlementAdminAsync
     *
     * Revoke entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RevokeEntitlementAdminRequest $revoke_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeEntitlementAdminAsync($project_id, $revoke_entitlement_admin_request, string $contentType = self::contentTypes['revokeEntitlementAdmin'][0])
    {
        return $this->revokeEntitlementAdminAsyncWithHttpInfo($project_id, $revoke_entitlement_admin_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeEntitlementAdminAsyncWithHttpInfo
     *
     * Revoke entitlement (admin)
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RevokeEntitlementAdminRequest $revoke_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeEntitlementAdminAsyncWithHttpInfo($project_id, $revoke_entitlement_admin_request, string $contentType = self::contentTypes['revokeEntitlementAdmin'][0])
    {
        $returnType = '';
        $request = $this->revokeEntitlementAdminRequest($project_id, $revoke_entitlement_admin_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeEntitlementAdmin'
     *
     * @param  int $project_id Project ID. You can find this parameter in your [Publisher Account](https://publisher.xsolla.com/) next to the name of the project. (required)
     * @param  \OpenAPI\Client\Model\RevokeEntitlementAdminRequest $revoke_entitlement_admin_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeEntitlementAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeEntitlementAdminRequest($project_id, $revoke_entitlement_admin_request, string $contentType = self::contentTypes['revokeEntitlementAdmin'][0])
    {

        // verify the required parameter 'project_id' is set
        if ($project_id === null || (is_array($project_id) && count($project_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_id when calling revokeEntitlementAdmin'
            );
        }

        // verify the required parameter 'revoke_entitlement_admin_request' is set
        if ($revoke_entitlement_admin_request === null || (is_array($revoke_entitlement_admin_request) && count($revoke_entitlement_admin_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revoke_entitlement_admin_request when calling revokeEntitlementAdmin'
            );
        }


        $resourcePath = '/v2/project/{project_id}/admin/entitlement/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace(
                '{' . 'project_id' . '}',
                ObjectSerializer::toPathValue($project_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($revoke_entitlement_admin_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($revoke_entitlement_admin_request));
            } else {
                $httpBody = $revoke_entitlement_admin_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
