<?php
/**
 * CartPaymentRedirectPolicy
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CartPaymentRedirectPolicy Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartPaymentRedirectPolicy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cart-Payment_redirect_policy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redirect_conditions' => 'string',
        'delay' => 'int',
        'status_for_manual_redirection' => 'string',
        'redirect_button_caption' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redirect_conditions' => null,
        'delay' => null,
        'status_for_manual_redirection' => null,
        'redirect_button_caption' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redirect_conditions' => false,
        'delay' => false,
        'status_for_manual_redirection' => false,
        'redirect_button_caption' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirect_conditions' => 'redirect_conditions',
        'delay' => 'delay',
        'status_for_manual_redirection' => 'status_for_manual_redirection',
        'redirect_button_caption' => 'redirect_button_caption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirect_conditions' => 'setRedirectConditions',
        'delay' => 'setDelay',
        'status_for_manual_redirection' => 'setStatusForManualRedirection',
        'redirect_button_caption' => 'setRedirectButtonCaption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirect_conditions' => 'getRedirectConditions',
        'delay' => 'getDelay',
        'status_for_manual_redirection' => 'getStatusForManualRedirection',
        'redirect_button_caption' => 'getRedirectButtonCaption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REDIRECT_CONDITIONS_NONE = 'none';
    public const REDIRECT_CONDITIONS_SUCCESSFUL = 'successful';
    public const REDIRECT_CONDITIONS_SUCCESSFUL_OR_CANCELED = 'successful_or_canceled';
    public const REDIRECT_CONDITIONS_ANY = 'any';
    public const STATUS_FOR_MANUAL_REDIRECTION_NONE = 'none';
    public const STATUS_FOR_MANUAL_REDIRECTION_VC = 'vc';
    public const STATUS_FOR_MANUAL_REDIRECTION_SUCCESSFUL = 'successful';
    public const STATUS_FOR_MANUAL_REDIRECTION_SUCCESSFUL_OR_CANCELED = 'successful_or_canceled';
    public const STATUS_FOR_MANUAL_REDIRECTION_ANY = 'any';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedirectConditionsAllowableValues()
    {
        return [
            self::REDIRECT_CONDITIONS_NONE,
            self::REDIRECT_CONDITIONS_SUCCESSFUL,
            self::REDIRECT_CONDITIONS_SUCCESSFUL_OR_CANCELED,
            self::REDIRECT_CONDITIONS_ANY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusForManualRedirectionAllowableValues()
    {
        return [
            self::STATUS_FOR_MANUAL_REDIRECTION_NONE,
            self::STATUS_FOR_MANUAL_REDIRECTION_VC,
            self::STATUS_FOR_MANUAL_REDIRECTION_SUCCESSFUL,
            self::STATUS_FOR_MANUAL_REDIRECTION_SUCCESSFUL_OR_CANCELED,
            self::STATUS_FOR_MANUAL_REDIRECTION_ANY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('redirect_conditions', $data ?? [], null);
        $this->setIfExists('delay', $data ?? [], null);
        $this->setIfExists('status_for_manual_redirection', $data ?? [], null);
        $this->setIfExists('redirect_button_caption', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRedirectConditionsAllowableValues();
        if (!is_null($this->container['redirect_conditions']) && !in_array($this->container['redirect_conditions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redirect_conditions', must be one of '%s'",
                $this->container['redirect_conditions'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusForManualRedirectionAllowableValues();
        if (!is_null($this->container['status_for_manual_redirection']) && !in_array($this->container['status_for_manual_redirection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status_for_manual_redirection', must be one of '%s'",
                $this->container['status_for_manual_redirection'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirect_conditions
     *
     * @return string|null
     */
    public function getRedirectConditions()
    {
        return $this->container['redirect_conditions'];
    }

    /**
     * Sets redirect_conditions
     *
     * @param string|null $redirect_conditions Payment status triggering user redirect to the return URL.
     *
     * @return self
     */
    public function setRedirectConditions($redirect_conditions)
    {
        if (is_null($redirect_conditions)) {
            throw new \InvalidArgumentException('non-nullable redirect_conditions cannot be null');
        }
        $allowedValues = $this->getRedirectConditionsAllowableValues();
        if (!in_array($redirect_conditions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redirect_conditions', must be one of '%s'",
                    $redirect_conditions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redirect_conditions'] = $redirect_conditions;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return int|null
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param int|null $delay Delay after which the user will be automatically redirected to the return URL.
     *
     * @return self
     */
    public function setDelay($delay)
    {
        if (is_null($delay)) {
            throw new \InvalidArgumentException('non-nullable delay cannot be null');
        }
        $this->container['delay'] = $delay;

        return $this;
    }

    /**
     * Gets status_for_manual_redirection
     *
     * @return string|null
     */
    public function getStatusForManualRedirection()
    {
        return $this->container['status_for_manual_redirection'];
    }

    /**
     * Sets status_for_manual_redirection
     *
     * @param string|null $status_for_manual_redirection Payment status triggering the display of a button clicking which redirects the user to the return URL.
     *
     * @return self
     */
    public function setStatusForManualRedirection($status_for_manual_redirection)
    {
        if (is_null($status_for_manual_redirection)) {
            throw new \InvalidArgumentException('non-nullable status_for_manual_redirection cannot be null');
        }
        $allowedValues = $this->getStatusForManualRedirectionAllowableValues();
        if (!in_array($status_for_manual_redirection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status_for_manual_redirection', must be one of '%s'",
                    $status_for_manual_redirection,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status_for_manual_redirection'] = $status_for_manual_redirection;

        return $this;
    }

    /**
     * Gets redirect_button_caption
     *
     * @return string|null
     */
    public function getRedirectButtonCaption()
    {
        return $this->container['redirect_button_caption'];
    }

    /**
     * Sets redirect_button_caption
     *
     * @param string|null $redirect_button_caption Localized redirect button captions.
     *
     * @return self
     */
    public function setRedirectButtonCaption($redirect_button_caption)
    {
        if (is_null($redirect_button_caption)) {
            throw new \InvalidArgumentException('non-nullable redirect_button_caption cannot be null');
        }
        $this->container['redirect_button_caption'] = $redirect_button_caption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


