<?php
/**
 * FiveLetterLocale
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FiveLetterLocale Class Doc Comment
 *
 * @category Class
 * @description Five-character locale codes.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FiveLetterLocale implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'five-letter-locale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'en_us' => 'string',
        'ar_ae' => 'string',
        'bg_bg' => 'string',
        'zh_cn' => 'string',
        'cs_cz' => 'string',
        'de_de' => 'string',
        'es_es' => 'string',
        'fr_fr' => 'string',
        'he_il' => 'string',
        'it_it' => 'string',
        'ja_jp' => 'string',
        'ko_kr' => 'string',
        'pl_pl' => 'string',
        'pt_br' => 'string',
        'ro_ro' => 'string',
        'ru_ru' => 'string',
        'th_th' => 'string',
        'tr_tr' => 'string',
        'zh_tw' => 'string',
        'vi_vn' => 'string',
        'km_kh' => 'string',
        'id_id' => 'string',
        'lo_la' => 'string',
        'my_mm' => 'string',
        'ph_ph' => 'string',
        'ne_np' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'en_us' => null,
        'ar_ae' => null,
        'bg_bg' => null,
        'zh_cn' => null,
        'cs_cz' => null,
        'de_de' => null,
        'es_es' => null,
        'fr_fr' => null,
        'he_il' => null,
        'it_it' => null,
        'ja_jp' => null,
        'ko_kr' => null,
        'pl_pl' => null,
        'pt_br' => null,
        'ro_ro' => null,
        'ru_ru' => null,
        'th_th' => null,
        'tr_tr' => null,
        'zh_tw' => null,
        'vi_vn' => null,
        'km_kh' => null,
        'id_id' => null,
        'lo_la' => null,
        'my_mm' => null,
        'ph_ph' => null,
        'ne_np' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'en_us' => true,
        'ar_ae' => true,
        'bg_bg' => true,
        'zh_cn' => true,
        'cs_cz' => true,
        'de_de' => true,
        'es_es' => true,
        'fr_fr' => true,
        'he_il' => true,
        'it_it' => true,
        'ja_jp' => true,
        'ko_kr' => true,
        'pl_pl' => true,
        'pt_br' => true,
        'ro_ro' => true,
        'ru_ru' => true,
        'th_th' => true,
        'tr_tr' => true,
        'zh_tw' => true,
        'vi_vn' => true,
        'km_kh' => true,
        'id_id' => true,
        'lo_la' => true,
        'my_mm' => true,
        'ph_ph' => true,
        'ne_np' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'en_us' => 'en-US',
        'ar_ae' => 'ar-AE',
        'bg_bg' => 'bg-BG',
        'zh_cn' => 'zh-CN',
        'cs_cz' => 'cs-CZ',
        'de_de' => 'de-DE',
        'es_es' => 'es-ES',
        'fr_fr' => 'fr-FR',
        'he_il' => 'he-IL',
        'it_it' => 'it-IT',
        'ja_jp' => 'ja-JP',
        'ko_kr' => 'ko-KR',
        'pl_pl' => 'pl-PL',
        'pt_br' => 'pt-BR',
        'ro_ro' => 'ro-RO',
        'ru_ru' => 'ru-RU',
        'th_th' => 'th-TH',
        'tr_tr' => 'tr-TR',
        'zh_tw' => 'zh-TW',
        'vi_vn' => 'vi-VN',
        'km_kh' => 'km-KH',
        'id_id' => 'id-ID',
        'lo_la' => 'lo-LA',
        'my_mm' => 'my-MM',
        'ph_ph' => 'ph-PH',
        'ne_np' => 'ne-NP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'en_us' => 'setEnUs',
        'ar_ae' => 'setArAe',
        'bg_bg' => 'setBgBg',
        'zh_cn' => 'setZhCn',
        'cs_cz' => 'setCsCz',
        'de_de' => 'setDeDe',
        'es_es' => 'setEsEs',
        'fr_fr' => 'setFrFr',
        'he_il' => 'setHeIl',
        'it_it' => 'setItIt',
        'ja_jp' => 'setJaJp',
        'ko_kr' => 'setKoKr',
        'pl_pl' => 'setPlPl',
        'pt_br' => 'setPtBr',
        'ro_ro' => 'setRoRo',
        'ru_ru' => 'setRuRu',
        'th_th' => 'setThTh',
        'tr_tr' => 'setTrTr',
        'zh_tw' => 'setZhTw',
        'vi_vn' => 'setViVn',
        'km_kh' => 'setKmKh',
        'id_id' => 'setIdId',
        'lo_la' => 'setLoLa',
        'my_mm' => 'setMyMm',
        'ph_ph' => 'setPhPh',
        'ne_np' => 'setNeNp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'en_us' => 'getEnUs',
        'ar_ae' => 'getArAe',
        'bg_bg' => 'getBgBg',
        'zh_cn' => 'getZhCn',
        'cs_cz' => 'getCsCz',
        'de_de' => 'getDeDe',
        'es_es' => 'getEsEs',
        'fr_fr' => 'getFrFr',
        'he_il' => 'getHeIl',
        'it_it' => 'getItIt',
        'ja_jp' => 'getJaJp',
        'ko_kr' => 'getKoKr',
        'pl_pl' => 'getPlPl',
        'pt_br' => 'getPtBr',
        'ro_ro' => 'getRoRo',
        'ru_ru' => 'getRuRu',
        'th_th' => 'getThTh',
        'tr_tr' => 'getTrTr',
        'zh_tw' => 'getZhTw',
        'vi_vn' => 'getViVn',
        'km_kh' => 'getKmKh',
        'id_id' => 'getIdId',
        'lo_la' => 'getLoLa',
        'my_mm' => 'getMyMm',
        'ph_ph' => 'getPhPh',
        'ne_np' => 'getNeNp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('en_us', $data ?? [], null);
        $this->setIfExists('ar_ae', $data ?? [], null);
        $this->setIfExists('bg_bg', $data ?? [], null);
        $this->setIfExists('zh_cn', $data ?? [], null);
        $this->setIfExists('cs_cz', $data ?? [], null);
        $this->setIfExists('de_de', $data ?? [], null);
        $this->setIfExists('es_es', $data ?? [], null);
        $this->setIfExists('fr_fr', $data ?? [], null);
        $this->setIfExists('he_il', $data ?? [], null);
        $this->setIfExists('it_it', $data ?? [], null);
        $this->setIfExists('ja_jp', $data ?? [], null);
        $this->setIfExists('ko_kr', $data ?? [], null);
        $this->setIfExists('pl_pl', $data ?? [], null);
        $this->setIfExists('pt_br', $data ?? [], null);
        $this->setIfExists('ro_ro', $data ?? [], null);
        $this->setIfExists('ru_ru', $data ?? [], null);
        $this->setIfExists('th_th', $data ?? [], null);
        $this->setIfExists('tr_tr', $data ?? [], null);
        $this->setIfExists('zh_tw', $data ?? [], null);
        $this->setIfExists('vi_vn', $data ?? [], null);
        $this->setIfExists('km_kh', $data ?? [], null);
        $this->setIfExists('id_id', $data ?? [], null);
        $this->setIfExists('lo_la', $data ?? [], null);
        $this->setIfExists('my_mm', $data ?? [], null);
        $this->setIfExists('ph_ph', $data ?? [], null);
        $this->setIfExists('ne_np', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets en_us
     *
     * @return string|null
     */
    public function getEnUs()
    {
        return $this->container['en_us'];
    }

    /**
     * Sets en_us
     *
     * @param string|null $en_us English
     *
     * @return self
     */
    public function setEnUs($en_us)
    {
        if (is_null($en_us)) {
            array_push($this->openAPINullablesSetToNull, 'en_us');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('en_us', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['en_us'] = $en_us;

        return $this;
    }

    /**
     * Gets ar_ae
     *
     * @return string|null
     */
    public function getArAe()
    {
        return $this->container['ar_ae'];
    }

    /**
     * Sets ar_ae
     *
     * @param string|null $ar_ae Arabic
     *
     * @return self
     */
    public function setArAe($ar_ae)
    {
        if (is_null($ar_ae)) {
            array_push($this->openAPINullablesSetToNull, 'ar_ae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ar_ae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ar_ae'] = $ar_ae;

        return $this;
    }

    /**
     * Gets bg_bg
     *
     * @return string|null
     */
    public function getBgBg()
    {
        return $this->container['bg_bg'];
    }

    /**
     * Sets bg_bg
     *
     * @param string|null $bg_bg Bulgarian
     *
     * @return self
     */
    public function setBgBg($bg_bg)
    {
        if (is_null($bg_bg)) {
            array_push($this->openAPINullablesSetToNull, 'bg_bg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bg_bg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bg_bg'] = $bg_bg;

        return $this;
    }

    /**
     * Gets zh_cn
     *
     * @return string|null
     */
    public function getZhCn()
    {
        return $this->container['zh_cn'];
    }

    /**
     * Sets zh_cn
     *
     * @param string|null $zh_cn Chinese (Simplified)
     *
     * @return self
     */
    public function setZhCn($zh_cn)
    {
        if (is_null($zh_cn)) {
            array_push($this->openAPINullablesSetToNull, 'zh_cn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zh_cn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zh_cn'] = $zh_cn;

        return $this;
    }

    /**
     * Gets cs_cz
     *
     * @return string|null
     */
    public function getCsCz()
    {
        return $this->container['cs_cz'];
    }

    /**
     * Sets cs_cz
     *
     * @param string|null $cs_cz Czech
     *
     * @return self
     */
    public function setCsCz($cs_cz)
    {
        if (is_null($cs_cz)) {
            array_push($this->openAPINullablesSetToNull, 'cs_cz');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cs_cz', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cs_cz'] = $cs_cz;

        return $this;
    }

    /**
     * Gets de_de
     *
     * @return string|null
     */
    public function getDeDe()
    {
        return $this->container['de_de'];
    }

    /**
     * Sets de_de
     *
     * @param string|null $de_de German
     *
     * @return self
     */
    public function setDeDe($de_de)
    {
        if (is_null($de_de)) {
            array_push($this->openAPINullablesSetToNull, 'de_de');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('de_de', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['de_de'] = $de_de;

        return $this;
    }

    /**
     * Gets es_es
     *
     * @return string|null
     */
    public function getEsEs()
    {
        return $this->container['es_es'];
    }

    /**
     * Sets es_es
     *
     * @param string|null $es_es Spanish (Spain)
     *
     * @return self
     */
    public function setEsEs($es_es)
    {
        if (is_null($es_es)) {
            array_push($this->openAPINullablesSetToNull, 'es_es');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('es_es', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['es_es'] = $es_es;

        return $this;
    }

    /**
     * Gets fr_fr
     *
     * @return string|null
     */
    public function getFrFr()
    {
        return $this->container['fr_fr'];
    }

    /**
     * Sets fr_fr
     *
     * @param string|null $fr_fr French
     *
     * @return self
     */
    public function setFrFr($fr_fr)
    {
        if (is_null($fr_fr)) {
            array_push($this->openAPINullablesSetToNull, 'fr_fr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fr_fr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fr_fr'] = $fr_fr;

        return $this;
    }

    /**
     * Gets he_il
     *
     * @return string|null
     */
    public function getHeIl()
    {
        return $this->container['he_il'];
    }

    /**
     * Sets he_il
     *
     * @param string|null $he_il Hebrew
     *
     * @return self
     */
    public function setHeIl($he_il)
    {
        if (is_null($he_il)) {
            array_push($this->openAPINullablesSetToNull, 'he_il');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('he_il', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['he_il'] = $he_il;

        return $this;
    }

    /**
     * Gets it_it
     *
     * @return string|null
     */
    public function getItIt()
    {
        return $this->container['it_it'];
    }

    /**
     * Sets it_it
     *
     * @param string|null $it_it Italian
     *
     * @return self
     */
    public function setItIt($it_it)
    {
        if (is_null($it_it)) {
            array_push($this->openAPINullablesSetToNull, 'it_it');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('it_it', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['it_it'] = $it_it;

        return $this;
    }

    /**
     * Gets ja_jp
     *
     * @return string|null
     */
    public function getJaJp()
    {
        return $this->container['ja_jp'];
    }

    /**
     * Sets ja_jp
     *
     * @param string|null $ja_jp Japanese
     *
     * @return self
     */
    public function setJaJp($ja_jp)
    {
        if (is_null($ja_jp)) {
            array_push($this->openAPINullablesSetToNull, 'ja_jp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ja_jp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ja_jp'] = $ja_jp;

        return $this;
    }

    /**
     * Gets ko_kr
     *
     * @return string|null
     */
    public function getKoKr()
    {
        return $this->container['ko_kr'];
    }

    /**
     * Sets ko_kr
     *
     * @param string|null $ko_kr Korean
     *
     * @return self
     */
    public function setKoKr($ko_kr)
    {
        if (is_null($ko_kr)) {
            array_push($this->openAPINullablesSetToNull, 'ko_kr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ko_kr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ko_kr'] = $ko_kr;

        return $this;
    }

    /**
     * Gets pl_pl
     *
     * @return string|null
     */
    public function getPlPl()
    {
        return $this->container['pl_pl'];
    }

    /**
     * Sets pl_pl
     *
     * @param string|null $pl_pl Polish
     *
     * @return self
     */
    public function setPlPl($pl_pl)
    {
        if (is_null($pl_pl)) {
            array_push($this->openAPINullablesSetToNull, 'pl_pl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pl_pl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pl_pl'] = $pl_pl;

        return $this;
    }

    /**
     * Gets pt_br
     *
     * @return string|null
     */
    public function getPtBr()
    {
        return $this->container['pt_br'];
    }

    /**
     * Sets pt_br
     *
     * @param string|null $pt_br Portuguese (Brazil)
     *
     * @return self
     */
    public function setPtBr($pt_br)
    {
        if (is_null($pt_br)) {
            array_push($this->openAPINullablesSetToNull, 'pt_br');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pt_br', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pt_br'] = $pt_br;

        return $this;
    }

    /**
     * Gets ro_ro
     *
     * @return string|null
     */
    public function getRoRo()
    {
        return $this->container['ro_ro'];
    }

    /**
     * Sets ro_ro
     *
     * @param string|null $ro_ro Romanian
     *
     * @return self
     */
    public function setRoRo($ro_ro)
    {
        if (is_null($ro_ro)) {
            array_push($this->openAPINullablesSetToNull, 'ro_ro');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ro_ro', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ro_ro'] = $ro_ro;

        return $this;
    }

    /**
     * Gets ru_ru
     *
     * @return string|null
     */
    public function getRuRu()
    {
        return $this->container['ru_ru'];
    }

    /**
     * Sets ru_ru
     *
     * @param string|null $ru_ru Russian
     *
     * @return self
     */
    public function setRuRu($ru_ru)
    {
        if (is_null($ru_ru)) {
            array_push($this->openAPINullablesSetToNull, 'ru_ru');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ru_ru', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ru_ru'] = $ru_ru;

        return $this;
    }

    /**
     * Gets th_th
     *
     * @return string|null
     */
    public function getThTh()
    {
        return $this->container['th_th'];
    }

    /**
     * Sets th_th
     *
     * @param string|null $th_th Thai
     *
     * @return self
     */
    public function setThTh($th_th)
    {
        if (is_null($th_th)) {
            array_push($this->openAPINullablesSetToNull, 'th_th');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('th_th', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['th_th'] = $th_th;

        return $this;
    }

    /**
     * Gets tr_tr
     *
     * @return string|null
     */
    public function getTrTr()
    {
        return $this->container['tr_tr'];
    }

    /**
     * Sets tr_tr
     *
     * @param string|null $tr_tr Turkish
     *
     * @return self
     */
    public function setTrTr($tr_tr)
    {
        if (is_null($tr_tr)) {
            array_push($this->openAPINullablesSetToNull, 'tr_tr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tr_tr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tr_tr'] = $tr_tr;

        return $this;
    }

    /**
     * Gets zh_tw
     *
     * @return string|null
     */
    public function getZhTw()
    {
        return $this->container['zh_tw'];
    }

    /**
     * Sets zh_tw
     *
     * @param string|null $zh_tw Chinese (Traditional)
     *
     * @return self
     */
    public function setZhTw($zh_tw)
    {
        if (is_null($zh_tw)) {
            array_push($this->openAPINullablesSetToNull, 'zh_tw');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zh_tw', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zh_tw'] = $zh_tw;

        return $this;
    }

    /**
     * Gets vi_vn
     *
     * @return string|null
     */
    public function getViVn()
    {
        return $this->container['vi_vn'];
    }

    /**
     * Sets vi_vn
     *
     * @param string|null $vi_vn Vietnamese
     *
     * @return self
     */
    public function setViVn($vi_vn)
    {
        if (is_null($vi_vn)) {
            array_push($this->openAPINullablesSetToNull, 'vi_vn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vi_vn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vi_vn'] = $vi_vn;

        return $this;
    }

    /**
     * Gets km_kh
     *
     * @return string|null
     */
    public function getKmKh()
    {
        return $this->container['km_kh'];
    }

    /**
     * Sets km_kh
     *
     * @param string|null $km_kh Khmer
     *
     * @return self
     */
    public function setKmKh($km_kh)
    {
        if (is_null($km_kh)) {
            array_push($this->openAPINullablesSetToNull, 'km_kh');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('km_kh', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['km_kh'] = $km_kh;

        return $this;
    }

    /**
     * Gets id_id
     *
     * @return string|null
     */
    public function getIdId()
    {
        return $this->container['id_id'];
    }

    /**
     * Sets id_id
     *
     * @param string|null $id_id Indonesian
     *
     * @return self
     */
    public function setIdId($id_id)
    {
        if (is_null($id_id)) {
            array_push($this->openAPINullablesSetToNull, 'id_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id_id'] = $id_id;

        return $this;
    }

    /**
     * Gets lo_la
     *
     * @return string|null
     */
    public function getLoLa()
    {
        return $this->container['lo_la'];
    }

    /**
     * Sets lo_la
     *
     * @param string|null $lo_la Lao
     *
     * @return self
     */
    public function setLoLa($lo_la)
    {
        if (is_null($lo_la)) {
            array_push($this->openAPINullablesSetToNull, 'lo_la');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lo_la', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lo_la'] = $lo_la;

        return $this;
    }

    /**
     * Gets my_mm
     *
     * @return string|null
     */
    public function getMyMm()
    {
        return $this->container['my_mm'];
    }

    /**
     * Sets my_mm
     *
     * @param string|null $my_mm Burmese
     *
     * @return self
     */
    public function setMyMm($my_mm)
    {
        if (is_null($my_mm)) {
            array_push($this->openAPINullablesSetToNull, 'my_mm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('my_mm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['my_mm'] = $my_mm;

        return $this;
    }

    /**
     * Gets ph_ph
     *
     * @return string|null
     */
    public function getPhPh()
    {
        return $this->container['ph_ph'];
    }

    /**
     * Sets ph_ph
     *
     * @param string|null $ph_ph Filipino
     *
     * @return self
     */
    public function setPhPh($ph_ph)
    {
        if (is_null($ph_ph)) {
            array_push($this->openAPINullablesSetToNull, 'ph_ph');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ph_ph', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ph_ph'] = $ph_ph;

        return $this;
    }

    /**
     * Gets ne_np
     *
     * @return string|null
     */
    public function getNeNp()
    {
        return $this->container['ne_np'];
    }

    /**
     * Sets ne_np
     *
     * @param string|null $ne_np Nepali
     *
     * @return self
     */
    public function setNeNp($ne_np)
    {
        if (is_null($ne_np)) {
            array_push($this->openAPINullablesSetToNull, 'ne_np');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ne_np', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ne_np'] = $ne_np;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


