<?php
/**
 * InlineObject30UnitItemsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shop Builder API
 *
 * # Overview  * **Version:** 2.0.0 * **Servers**: `https://store.xsolla.com/api` * **[Contact Us by Email](mailto:integration@xsolla.com)** * **Contact URL:** https://xsolla.com/ * **Required TLS version:** 1.2  Shop Builder API provides a third-party solution for implementing the server side for your store interface. Use the endpoints to manage in-game items, in-game currencies, cart, player inventory, promotions, game library, etc.  # Download API definition  You can download the API definition in two formats: - [YAML](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.yaml) - [JSON](https://api.redocly.com/registry/bundle/xsolla/store-en/v1/openapi.json)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject30UnitItemsInner Class Doc Comment
 *
 * @category Class
 * @description Game key item. It represents game on a certain platform (steam, gog, etc.).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InlineObject30UnitItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_30_unit_items_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_id' => 'int',
        'sku' => 'string',
        'type' => 'string',
        'is_free' => 'bool',
        'prices' => '\OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerPricesInner[]',
        'virtual_prices' => '\OpenAPI\Client\Model\InlineObject30UnitItemsInnerVirtualPricesInner[]',
        'order' => 'int',
        'is_enabled' => 'bool',
        'is_show_in_store' => 'bool',
        'drm_name' => 'string',
        'drm_sku' => 'string',
        'drm_image' => 'string',
        'drm_id' => 'int',
        'keys' => '\OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerKeys',
        'is_sales_exist' => 'bool',
        'pre_order' => '\OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerPreOrder',
        'regions' => '\OpenAPI\Client\Model\GameKeysRegionsInner[]',
        'limits' => '\OpenAPI\Client\Model\ItemLimitResponse',
        'periods' => '\OpenAPI\Client\Model\ItemPeriodsResponseInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_id' => null,
        'sku' => null,
        'type' => null,
        'is_free' => null,
        'prices' => null,
        'virtual_prices' => null,
        'order' => null,
        'is_enabled' => null,
        'is_show_in_store' => null,
        'drm_name' => null,
        'drm_sku' => null,
        'drm_image' => null,
        'drm_id' => null,
        'keys' => null,
        'is_sales_exist' => null,
        'pre_order' => null,
        'regions' => null,
        'limits' => null,
        'periods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_id' => false,
        'sku' => false,
        'type' => false,
        'is_free' => false,
        'prices' => false,
        'virtual_prices' => true,
        'order' => false,
        'is_enabled' => false,
        'is_show_in_store' => false,
        'drm_name' => false,
        'drm_sku' => false,
        'drm_image' => true,
        'drm_id' => false,
        'keys' => false,
        'is_sales_exist' => false,
        'pre_order' => false,
        'regions' => false,
        'limits' => true,
        'periods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'item_id',
        'sku' => 'sku',
        'type' => 'type',
        'is_free' => 'is_free',
        'prices' => 'prices',
        'virtual_prices' => 'virtual_prices',
        'order' => 'order',
        'is_enabled' => 'is_enabled',
        'is_show_in_store' => 'is_show_in_store',
        'drm_name' => 'drm_name',
        'drm_sku' => 'drm_sku',
        'drm_image' => 'drm_image',
        'drm_id' => 'drm_id',
        'keys' => 'keys',
        'is_sales_exist' => 'is_sales_exist',
        'pre_order' => 'pre_order',
        'regions' => 'regions',
        'limits' => 'limits',
        'periods' => 'periods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'sku' => 'setSku',
        'type' => 'setType',
        'is_free' => 'setIsFree',
        'prices' => 'setPrices',
        'virtual_prices' => 'setVirtualPrices',
        'order' => 'setOrder',
        'is_enabled' => 'setIsEnabled',
        'is_show_in_store' => 'setIsShowInStore',
        'drm_name' => 'setDrmName',
        'drm_sku' => 'setDrmSku',
        'drm_image' => 'setDrmImage',
        'drm_id' => 'setDrmId',
        'keys' => 'setKeys',
        'is_sales_exist' => 'setIsSalesExist',
        'pre_order' => 'setPreOrder',
        'regions' => 'setRegions',
        'limits' => 'setLimits',
        'periods' => 'setPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'sku' => 'getSku',
        'type' => 'getType',
        'is_free' => 'getIsFree',
        'prices' => 'getPrices',
        'virtual_prices' => 'getVirtualPrices',
        'order' => 'getOrder',
        'is_enabled' => 'getIsEnabled',
        'is_show_in_store' => 'getIsShowInStore',
        'drm_name' => 'getDrmName',
        'drm_sku' => 'getDrmSku',
        'drm_image' => 'getDrmImage',
        'drm_id' => 'getDrmId',
        'keys' => 'getKeys',
        'is_sales_exist' => 'getIsSalesExist',
        'pre_order' => 'getPreOrder',
        'regions' => 'getRegions',
        'limits' => 'getLimits',
        'periods' => 'getPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_free', $data ?? [], false);
        $this->setIfExists('prices', $data ?? [], null);
        $this->setIfExists('virtual_prices', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('is_show_in_store', $data ?? [], null);
        $this->setIfExists('drm_name', $data ?? [], null);
        $this->setIfExists('drm_sku', $data ?? [], null);
        $this->setIfExists('drm_image', $data ?? [], null);
        $this->setIfExists('drm_id', $data ?? [], null);
        $this->setIfExists('keys', $data ?? [], null);
        $this->setIfExists('is_sales_exist', $data ?? [], null);
        $this->setIfExists('pre_order', $data ?? [], null);
        $this->setIfExists('regions', $data ?? [], null);
        $this->setIfExists('limits', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id Internal unique item ID that is provided upon item creation.
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Unique item ID. The SKU may contain only lowercase and uppercase Latin alphanumeric characters, periods, dashes, and underscores.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of item. In this case it is always `game_key`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_free
     *
     * @return bool|null
     */
    public function getIsFree()
    {
        return $this->container['is_free'];
    }

    /**
     * Sets is_free
     *
     * @param bool|null $is_free If `true`, the item is free.
     *
     * @return self
     */
    public function setIsFree($is_free)
    {
        if (is_null($is_free)) {
            throw new \InvalidArgumentException('non-nullable is_free cannot be null');
        }
        $this->container['is_free'] = $is_free;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerPricesInner[]|null
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerPricesInner[]|null $prices Prices in real currencies.
     *
     * @return self
     */
    public function setPrices($prices)
    {
        if (is_null($prices)) {
            throw new \InvalidArgumentException('non-nullable prices cannot be null');
        }
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets virtual_prices
     *
     * @return \OpenAPI\Client\Model\InlineObject30UnitItemsInnerVirtualPricesInner[]|null
     */
    public function getVirtualPrices()
    {
        return $this->container['virtual_prices'];
    }

    /**
     * Sets virtual_prices
     *
     * @param \OpenAPI\Client\Model\InlineObject30UnitItemsInnerVirtualPricesInner[]|null $virtual_prices virtual_prices
     *
     * @return self
     */
    public function setVirtualPrices($virtual_prices)
    {
        if (is_null($virtual_prices)) {
            array_push($this->openAPINullablesSetToNull, 'virtual_prices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('virtual_prices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['virtual_prices'] = $virtual_prices;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order Game order priority in the list.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled If disabled, item cannot be purchased and accessed through inventory.
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_show_in_store
     *
     * @return bool|null
     */
    public function getIsShowInStore()
    {
        return $this->container['is_show_in_store'];
    }

    /**
     * Sets is_show_in_store
     *
     * @param bool|null $is_show_in_store Item is available for purchase.
     *
     * @return self
     */
    public function setIsShowInStore($is_show_in_store)
    {
        if (is_null($is_show_in_store)) {
            throw new \InvalidArgumentException('non-nullable is_show_in_store cannot be null');
        }
        $this->container['is_show_in_store'] = $is_show_in_store;

        return $this;
    }

    /**
     * Gets drm_name
     *
     * @return string|null
     */
    public function getDrmName()
    {
        return $this->container['drm_name'];
    }

    /**
     * Sets drm_name
     *
     * @param string|null $drm_name Game key DRM name.
     *
     * @return self
     */
    public function setDrmName($drm_name)
    {
        if (is_null($drm_name)) {
            throw new \InvalidArgumentException('non-nullable drm_name cannot be null');
        }
        $this->container['drm_name'] = $drm_name;

        return $this;
    }

    /**
     * Gets drm_sku
     *
     * @return string|null
     */
    public function getDrmSku()
    {
        return $this->container['drm_sku'];
    }

    /**
     * Sets drm_sku
     *
     * @param string|null $drm_sku DRM unique ID.
     *
     * @return self
     */
    public function setDrmSku($drm_sku)
    {
        if (is_null($drm_sku)) {
            throw new \InvalidArgumentException('non-nullable drm_sku cannot be null');
        }
        $this->container['drm_sku'] = $drm_sku;

        return $this;
    }

    /**
     * Gets drm_image
     *
     * @return string|null
     */
    public function getDrmImage()
    {
        return $this->container['drm_image'];
    }

    /**
     * Sets drm_image
     *
     * @param string|null $drm_image Game key DRM icon.
     *
     * @return self
     */
    public function setDrmImage($drm_image)
    {
        if (is_null($drm_image)) {
            array_push($this->openAPINullablesSetToNull, 'drm_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('drm_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['drm_image'] = $drm_image;

        return $this;
    }

    /**
     * Gets drm_id
     *
     * @return int|null
     */
    public function getDrmId()
    {
        return $this->container['drm_id'];
    }

    /**
     * Sets drm_id
     *
     * @param int|null $drm_id DRM internal unique ID.
     *
     * @return self
     */
    public function setDrmId($drm_id)
    {
        if (is_null($drm_id)) {
            throw new \InvalidArgumentException('non-nullable drm_id cannot be null');
        }
        $this->container['drm_id'] = $drm_id;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return \OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerKeys|null
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param \OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerKeys|null $keys keys
     *
     * @return self
     */
    public function setKeys($keys)
    {
        if (is_null($keys)) {
            throw new \InvalidArgumentException('non-nullable keys cannot be null');
        }
        $this->container['keys'] = $keys;

        return $this;
    }

    /**
     * Gets is_sales_exist
     *
     * @return bool|null
     */
    public function getIsSalesExist()
    {
        return $this->container['is_sales_exist'];
    }

    /**
     * Sets is_sales_exist
     *
     * @param bool|null $is_sales_exist If `true`, the game key was purchased by users.
     *
     * @return self
     */
    public function setIsSalesExist($is_sales_exist)
    {
        if (is_null($is_sales_exist)) {
            throw new \InvalidArgumentException('non-nullable is_sales_exist cannot be null');
        }
        $this->container['is_sales_exist'] = $is_sales_exist;

        return $this;
    }

    /**
     * Gets pre_order
     *
     * @return \OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerPreOrder|null
     */
    public function getPreOrder()
    {
        return $this->container['pre_order'];
    }

    /**
     * Sets pre_order
     *
     * @param \OpenAPI\Client\Model\InlineObject29ItemsInnerUnitItemsInnerPreOrder|null $pre_order pre_order
     *
     * @return self
     */
    public function setPreOrder($pre_order)
    {
        if (is_null($pre_order)) {
            throw new \InvalidArgumentException('non-nullable pre_order cannot be null');
        }
        $this->container['pre_order'] = $pre_order;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return \OpenAPI\Client\Model\GameKeysRegionsInner[]|null
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param \OpenAPI\Client\Model\GameKeysRegionsInner[]|null $regions regions
     *
     * @return self
     */
    public function setRegions($regions)
    {
        if (is_null($regions)) {
            throw new \InvalidArgumentException('non-nullable regions cannot be null');
        }
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return \OpenAPI\Client\Model\ItemLimitResponse|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param \OpenAPI\Client\Model\ItemLimitResponse|null $limits limits
     *
     * @return self
     */
    public function setLimits($limits)
    {
        if (is_null($limits)) {
            array_push($this->openAPINullablesSetToNull, 'limits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \OpenAPI\Client\Model\ItemPeriodsResponseInner[]|null
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \OpenAPI\Client\Model\ItemPeriodsResponseInner[]|null $periods Item sales period.
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            throw new \InvalidArgumentException('non-nullable periods cannot be null');
        }
        $this->container['periods'] = $periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


